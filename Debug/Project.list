
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c50  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f68  08004f68  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f70  08004f70  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f70  08004f70  00014f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  20000014  08004f8c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007c4  08004f8c  000207c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dcb  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d65  00000000  00000000  00035e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  00038b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00039d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232bb  00000000  00000000  0003ad70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001610a  00000000  00000000  0005e02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6224  00000000  00000000  00074135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0014a359  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab0  00000000  00000000  0014a420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000d0a  00000000  00000000  0014eed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004dfc 	.word	0x08004dfc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08004dfc 	.word	0x08004dfc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	; 0x30
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fe6f 	bl	80011f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Call FIR init function to initialize the instance structure. */
  arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 8000512:	4b80      	ldr	r3, [pc, #512]	; (8000714 <main+0x20c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f107 0008 	add.w	r0, r7, #8
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	4b7e      	ldr	r3, [pc, #504]	; (8000718 <main+0x210>)
 800051e:	4a7f      	ldr	r2, [pc, #508]	; (800071c <main+0x214>)
 8000520:	211d      	movs	r1, #29
 8000522:	f004 f9af 	bl	8004884 <arm_fir_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f91b 	bl	8000760 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  float32_t output = 0;
 800052a:	f04f 0300 	mov.w	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
  float index = 0;
 8000530:	f04f 0300 	mov.w	r3, #0
 8000534:	627b      	str	r3, [r7, #36]	; 0x24
//  int32_t incr = 1;
  float incr = 2;
 8000536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800053a:	623b      	str	r3, [r7, #32]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 fa8a 	bl	8000a54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000540:	f000 fa68 	bl	8000a14 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000544:	f000 fa0e 	bl	8000964 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000548:	f000 fa36 	bl	80009b8 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 800054c:	f000 f974 	bl	8000838 <MX_DAC_Init>
  MX_TIM7_Init();
 8000550:	f000 f9d2 	bl	80008f8 <MX_TIM7_Init>
  MX_TIM6_Init();
 8000554:	f000 f99a 	bl	800088c <MX_TIM6_Init>


  for (int i = 0; i < SAMPLES/2 - 1; i++){
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
 800055c:	e009      	b.n	8000572 <main+0x6a>
	  square[i] = 1;
 800055e:	4a70      	ldr	r2, [pc, #448]	; (8000720 <main+0x218>)
 8000560:	69fb      	ldr	r3, [r7, #28]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4413      	add	r3, r2
 8000566:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800056a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < SAMPLES/2 - 1; i++){
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	3301      	adds	r3, #1
 8000570:	61fb      	str	r3, [r7, #28]
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	2b16      	cmp	r3, #22
 8000576:	ddf2      	ble.n	800055e <main+0x56>
  }

  for (int i = SAMPLES/2 - 1; i < SAMPLES - 1; i++){
 8000578:	2317      	movs	r3, #23
 800057a:	61bb      	str	r3, [r7, #24]
 800057c:	e008      	b.n	8000590 <main+0x88>
  	  square[i] = -1;
 800057e:	4a68      	ldr	r2, [pc, #416]	; (8000720 <main+0x218>)
 8000580:	69bb      	ldr	r3, [r7, #24]
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	4a67      	ldr	r2, [pc, #412]	; (8000724 <main+0x21c>)
 8000588:	601a      	str	r2, [r3, #0]
  for (int i = SAMPLES/2 - 1; i < SAMPLES - 1; i++){
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	3301      	adds	r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	2b2e      	cmp	r3, #46	; 0x2e
 8000594:	ddf3      	ble.n	800057e <main+0x76>
  }
  HAL_DACEx_NoiseWaveGenerate(&hdac, DAC_CHANNEL_1, DAC_LFSRUNMASK_BITS4_0);
 8000596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800059a:	2100      	movs	r1, #0
 800059c:	4862      	ldr	r0, [pc, #392]	; (8000728 <main+0x220>)
 800059e:	f001 f91a 	bl	80017d6 <HAL_DACEx_NoiseWaveGenerate>

//  HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095);
  /* USER CODE BEGIN 2 */
  current_row = 0;
 80005a2:	4b62      	ldr	r3, [pc, #392]	; (800072c <main+0x224>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ae:	4860      	ldr	r0, [pc, #384]	; (8000730 <main+0x228>)
 80005b0:	f001 fde8 	bl	8002184 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ba:	485d      	ldr	r0, [pc, #372]	; (8000730 <main+0x228>)
 80005bc:	f001 fde2 	bl	8002184 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	485a      	ldr	r0, [pc, #360]	; (8000730 <main+0x228>)
 80005c8:	f001 fddc 	bl	8002184 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d2:	4857      	ldr	r0, [pc, #348]	; (8000730 <main+0x228>)
 80005d4:	f001 fdd6 	bl	8002184 <HAL_GPIO_WritePin>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80005d8:	2100      	movs	r1, #0
 80005da:	4853      	ldr	r0, [pc, #332]	; (8000728 <main+0x220>)
 80005dc:	f000 ffd1 	bl	8001582 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 80005e0:	4854      	ldr	r0, [pc, #336]	; (8000734 <main+0x22c>)
 80005e2:	f003 f8b7 	bl	8003754 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80005e6:	4854      	ldr	r0, [pc, #336]	; (8000738 <main+0x230>)
 80005e8:	f003 f8b4 	bl	8003754 <HAL_TIM_Base_Start_IT>

	float32_t  *inputF32;
	inputF32 = &sine[0];
 80005ec:	4b53      	ldr	r3, [pc, #332]	; (800073c <main+0x234>)
 80005ee:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (keypad_poll){
 80005f0:	4b53      	ldr	r3, [pc, #332]	; (8000740 <main+0x238>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d005      	beq.n	8000604 <main+0xfc>
	  		  keypad_poll = 0;
 80005f8:	4b51      	ldr	r3, [pc, #324]	; (8000740 <main+0x238>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	  		  current_row = 0;
 80005fe:	4b4b      	ldr	r3, [pc, #300]	; (800072c <main+0x224>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
//	  	  	  poll_keypad();
	  	  }

	  	  if (key_pressed){
 8000604:	4b4f      	ldr	r3, [pc, #316]	; (8000744 <main+0x23c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d025      	beq.n	8000658 <main+0x150>
	  		key_pressed = 0;
 800060c:	4b4d      	ldr	r3, [pc, #308]	; (8000744 <main+0x23c>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	  		if ((current_row - 1 == 2) && (current_col == 1)){
 8000612:	4b46      	ldr	r3, [pc, #280]	; (800072c <main+0x224>)
 8000614:	f993 3000 	ldrsb.w	r3, [r3]
 8000618:	2b03      	cmp	r3, #3
 800061a:	d10b      	bne.n	8000634 <main+0x12c>
 800061c:	4b4a      	ldr	r3, [pc, #296]	; (8000748 <main+0x240>)
 800061e:	f993 3000 	ldrsb.w	r3, [r3]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d106      	bne.n	8000634 <main+0x12c>
	  			// double the frequency
	  			incr = incr*2;
 8000626:	edd7 7a08 	vldr	s15, [r7, #32]
 800062a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800062e:	edc7 7a08 	vstr	s15, [r7, #32]
 8000632:	e011      	b.n	8000658 <main+0x150>
	  		}else if ((current_row - 1 == 2) && (current_col == 0)){
 8000634:	4b3d      	ldr	r3, [pc, #244]	; (800072c <main+0x224>)
 8000636:	f993 3000 	ldrsb.w	r3, [r3]
 800063a:	2b03      	cmp	r3, #3
 800063c:	d10c      	bne.n	8000658 <main+0x150>
 800063e:	4b42      	ldr	r3, [pc, #264]	; (8000748 <main+0x240>)
 8000640:	f993 3000 	ldrsb.w	r3, [r3]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d107      	bne.n	8000658 <main+0x150>
	  			// half the frequency (haven't exactly figured out how to go below 1 kHz)
	  //			if (incr > 1){
	  //				incr = incr >> 1;
	  //			}
	  			incr = incr/2;
 8000648:	ed97 7a08 	vldr	s14, [r7, #32]
 800064c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000650:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000654:	edc7 7a08 	vstr	s15, [r7, #32]
	  		}
	  	  }

	  	if (new_sample){
 8000658:	4b3c      	ldr	r3, [pc, #240]	; (800074c <main+0x244>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0c7      	beq.n	80005f0 <main+0xe8>
	  	  new_sample = 0;
 8000660:	4b3a      	ldr	r3, [pc, #232]	; (800074c <main+0x244>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]

	  	  if (filter_en){
 8000666:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <main+0x248>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d019      	beq.n	80006a2 <main+0x19a>
	  		  arm_fir_f32(&S, inputF32 + (uint32_t)(index)%SAMPLES, &output, blockSize);
 800066e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000676:	ee17 1a90 	vmov	r1, s15
 800067a:	4b36      	ldr	r3, [pc, #216]	; (8000754 <main+0x24c>)
 800067c:	fba3 2301 	umull	r2, r3, r3, r1
 8000680:	095a      	lsrs	r2, r3, #5
 8000682:	4613      	mov	r3, r2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	1aca      	subs	r2, r1, r3
 800068c:	0093      	lsls	r3, r2, #2
 800068e:	697a      	ldr	r2, [r7, #20]
 8000690:	18d1      	adds	r1, r2, r3
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <main+0x20c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	1d3a      	adds	r2, r7, #4
 8000698:	f107 0008 	add.w	r0, r7, #8
 800069c:	f004 f902 	bl	80048a4 <arm_fir_f32>
 80006a0:	e013      	b.n	80006ca <main+0x1c2>
	  	  }else{
//	  		  output = sine[(uint32_t)(index)%SAMPLES];

	  		output = square[(uint32_t)(index)%SAMPLES];
 80006a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80006a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006aa:	ee17 1a90 	vmov	r1, s15
 80006ae:	4b29      	ldr	r3, [pc, #164]	; (8000754 <main+0x24c>)
 80006b0:	fba3 2301 	umull	r2, r3, r3, r1
 80006b4:	095a      	lsrs	r2, r3, #5
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	011b      	lsls	r3, r3, #4
 80006be:	1aca      	subs	r2, r1, r3
 80006c0:	4917      	ldr	r1, [pc, #92]	; (8000720 <main+0x218>)
 80006c2:	0093      	lsls	r3, r2, #2
 80006c4:	440b      	add	r3, r1
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	607b      	str	r3, [r7, #4]
//	  		  output = 1;
//
//	  		  output = -1;
	  	  }

	  	  output *= 3000;
 80006ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80006ce:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000758 <main+0x250>
 80006d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006d6:	edc7 7a01 	vstr	s15, [r7, #4]
	  	  output += 2047;
 80006da:	edd7 7a01 	vldr	s15, [r7, #4]
 80006de:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800075c <main+0x254>
 80006e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006e6:	edc7 7a01 	vstr	s15, [r7, #4]
	  	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint16_t)output);
 80006ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80006ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006f2:	ee17 3a90 	vmov	r3, s15
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	480a      	ldr	r0, [pc, #40]	; (8000728 <main+0x220>)
 80006fe:	f000 ffec 	bl	80016da <HAL_DAC_SetValue>

	  	  index += incr;
 8000702:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000706:	edd7 7a08 	vldr	s15, [r7, #32]
 800070a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800070e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  if (keypad_poll){
 8000712:	e76d      	b.n	80005f0 <main+0xe8>
 8000714:	20000004 	.word	0x20000004
 8000718:	20000748 	.word	0x20000748
 800071c:	08004ed4 	.word	0x08004ed4
 8000720:	20000688 	.word	0x20000688
 8000724:	bf800000 	.word	0xbf800000
 8000728:	20000030 	.word	0x20000030
 800072c:	20000000 	.word	0x20000000
 8000730:	40020800 	.word	0x40020800
 8000734:	200000ec 	.word	0x200000ec
 8000738:	200000a4 	.word	0x200000a4
 800073c:	08004e14 	.word	0x08004e14
 8000740:	20000684 	.word	0x20000684
 8000744:	20000685 	.word	0x20000685
 8000748:	20000001 	.word	0x20000001
 800074c:	20000687 	.word	0x20000687
 8000750:	20000686 	.word	0x20000686
 8000754:	aaaaaaab 	.word	0xaaaaaaab
 8000758:	453b8000 	.word	0x453b8000
 800075c:	44ffe000 	.word	0x44ffe000

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2234      	movs	r2, #52	; 0x34
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fb3c 	bl	8004dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <SystemClock_Config+0xd0>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a28      	ldr	r2, [pc, #160]	; (8000830 <SystemClock_Config+0xd0>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <SystemClock_Config+0xd0>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <SystemClock_Config+0xd4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a22      	ldr	r2, [pc, #136]	; (8000834 <SystemClock_Config+0xd4>)
 80007aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b20      	ldr	r3, [pc, #128]	; (8000834 <SystemClock_Config+0xd4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d0:	2308      	movs	r3, #8
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007de:	2307      	movs	r3, #7
 80007e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fcc4 	bl	8003178 <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007f6:	f000 fa17 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80007fe:	2303      	movs	r3, #3
 8000800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000806:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	2105      	movs	r1, #5
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fe39 	bl	8002490 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000824:	f000 fa00 	bl	8000c28 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3750      	adds	r7, #80	; 0x50
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_DAC_Init+0x4c>)
 8000848:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <MX_DAC_Init+0x50>)
 800084a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800084c:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_DAC_Init+0x4c>)
 800084e:	f000 fe76 	bl	800153e <HAL_DAC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000858:	f000 f9e6 	bl	8000c28 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800085c:	2314      	movs	r3, #20
 800085e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_DAC_Init+0x4c>)
 800086c:	f000 ff64 	bl	8001738 <HAL_DAC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000876:	f000 f9d7 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000030 	.word	0x20000030
 8000888:	40007400 	.word	0x40007400

0800088c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000892:	463b      	mov	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_TIM6_Init+0x64>)
 800089c:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <MX_TIM6_Init+0x68>)
 800089e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400 - 1;
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_TIM6_Init+0x64>)
 80008a2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80008a6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_TIM6_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_TIM6_Init+0x64>)
 80008b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008b4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_TIM6_Init+0x64>)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <MX_TIM6_Init+0x64>)
 80008be:	f002 fef9 	bl	80036b4 <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80008c8:	f000 f9ae 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_TIM6_Init+0x64>)
 80008da:	f003 f985 	bl	8003be8 <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80008e4:	f000 f9a0 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200000a4 	.word	0x200000a4
 80008f4:	40001000 	.word	0x40001000

080008f8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_TIM7_Init+0x64>)
 8000908:	4a15      	ldr	r2, [pc, #84]	; (8000960 <MX_TIM7_Init+0x68>)
 800090a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_TIM7_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_TIM7_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1750-1;
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_TIM7_Init+0x64>)
 800091a:	f240 62d5 	movw	r2, #1749	; 0x6d5
 800091e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_TIM7_Init+0x64>)
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_TIM7_Init+0x64>)
 8000928:	f002 fec4 	bl	80036b4 <HAL_TIM_Base_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000932:	f000 f979 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000936:	2320      	movs	r3, #32
 8000938:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800093e:	463b      	mov	r3, r7
 8000940:	4619      	mov	r1, r3
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <MX_TIM7_Init+0x64>)
 8000944:	f003 f950 	bl	8003be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800094e:	f000 f96b 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000ec 	.word	0x200000ec
 8000960:	40001400 	.word	0x40001400

08000964 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_USART3_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USART3_UART_Init+0x4c>)
 800099c:	f003 f9b4 	bl	8003d08 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f000 f93f 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000134 	.word	0x20000134
 80009b4:	40004800 	.word	0x40004800

080009b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2206      	movs	r2, #6
 80009c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2202      	movs	r2, #2
 80009da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2201      	movs	r2, #1
 80009e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fc:	f001 fbff 	bl	80021fe <HAL_PCD_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 f90f 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000178 	.word	0x20000178

08000a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_DMA_Init+0x3c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <MX_DMA_Init+0x3c>)
 8000a24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_DMA_Init+0x3c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2010      	movs	r0, #16
 8000a3c:	f000 fd49 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a40:	2010      	movs	r0, #16
 8000a42:	f000 fd62 	bl	800150a <HAL_NVIC_EnableIRQ>

}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	; 0x30
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
 8000a6e:	4b69      	ldr	r3, [pc, #420]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a68      	ldr	r2, [pc, #416]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b66      	ldr	r3, [pc, #408]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	61bb      	str	r3, [r7, #24]
 8000a84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	4b62      	ldr	r3, [pc, #392]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a61      	ldr	r2, [pc, #388]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b5f      	ldr	r3, [pc, #380]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b5b      	ldr	r3, [pc, #364]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a5a      	ldr	r2, [pc, #360]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b58      	ldr	r3, [pc, #352]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b54      	ldr	r3, [pc, #336]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a53      	ldr	r2, [pc, #332]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b51      	ldr	r3, [pc, #324]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	4b4d      	ldr	r3, [pc, #308]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a4c      	ldr	r2, [pc, #304]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b4a      	ldr	r3, [pc, #296]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b46      	ldr	r3, [pc, #280]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a45      	ldr	r2, [pc, #276]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b43      	ldr	r3, [pc, #268]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b18:	483f      	ldr	r0, [pc, #252]	; (8000c18 <MX_GPIO_Init+0x1c4>)
 8000b1a:	f001 fb33 	bl	8002184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2140      	movs	r1, #64	; 0x40
 8000b22:	483e      	ldr	r0, [pc, #248]	; (8000c1c <MX_GPIO_Init+0x1c8>)
 8000b24:	f001 fb2e 	bl	8002184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000b2e:	483c      	ldr	r0, [pc, #240]	; (8000c20 <MX_GPIO_Init+0x1cc>)
 8000b30:	f001 fb28 	bl	8002184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4835      	ldr	r0, [pc, #212]	; (8000c20 <MX_GPIO_Init+0x1cc>)
 8000b4c:	f001 f96e 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b50:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	482b      	ldr	r0, [pc, #172]	; (8000c18 <MX_GPIO_Init+0x1c4>)
 8000b6a:	f001 f95f 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b6e:	2340      	movs	r3, #64	; 0x40
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	4825      	ldr	r0, [pc, #148]	; (8000c1c <MX_GPIO_Init+0x1c8>)
 8000b86:	f001 f951 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	481f      	ldr	r0, [pc, #124]	; (8000c1c <MX_GPIO_Init+0x1c8>)
 8000b9e:	f001 f945 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000ba2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4819      	ldr	r0, [pc, #100]	; (8000c20 <MX_GPIO_Init+0x1cc>)
 8000bbc:	f001 f936 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin;
 8000bc0:	23f0      	movs	r3, #240	; 0xf0
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4813      	ldr	r0, [pc, #76]	; (8000c24 <MX_GPIO_Init+0x1d0>)
 8000bd6:	f001 f929 	bl	8001e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	200a      	movs	r0, #10
 8000be0:	f000 fc77 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000be4:	200a      	movs	r0, #10
 8000be6:	f000 fc90 	bl	800150a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2017      	movs	r0, #23
 8000bf0:	f000 fc6f 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bf4:	2017      	movs	r0, #23
 8000bf6:	f000 fc88 	bl	800150a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2028      	movs	r0, #40	; 0x28
 8000c00:	f000 fc67 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c04:	2028      	movs	r0, #40	; 0x28
 8000c06:	f000 fc80 	bl	800150a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3730      	adds	r7, #48	; 0x30
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020400 	.word	0x40020400
 8000c1c:	40021800 	.word	0x40021800
 8000c20:	40020800 	.word	0x40020800
 8000c24:	40020c00 	.word	0x40020c00

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a34      	ldr	r2, [pc, #208]	; (8000d74 <HAL_DAC_MspInit+0xf0>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d161      	bne.n	8000d6a <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <HAL_DAC_MspInit+0xf4>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a32      	ldr	r2, [pc, #200]	; (8000d78 <HAL_DAC_MspInit+0xf4>)
 8000cb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <HAL_DAC_MspInit+0xf4>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <HAL_DAC_MspInit+0xf4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a2b      	ldr	r2, [pc, #172]	; (8000d78 <HAL_DAC_MspInit+0xf4>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <HAL_DAC_MspInit+0xf4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cde:	2310      	movs	r3, #16
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4822      	ldr	r0, [pc, #136]	; (8000d7c <HAL_DAC_MspInit+0xf8>)
 8000cf2:	f001 f89b 	bl	8001e2c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <HAL_DAC_MspInit+0xfc>)
 8000cf8:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <HAL_DAC_MspInit+0x100>)
 8000cfa:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <HAL_DAC_MspInit+0xfc>)
 8000cfe:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000d02:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <HAL_DAC_MspInit+0xfc>)
 8000d06:	2240      	movs	r2, #64	; 0x40
 8000d08:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <HAL_DAC_MspInit+0xfc>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <HAL_DAC_MspInit+0xfc>)
 8000d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d16:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_DAC_MspInit+0xfc>)
 8000d1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d1e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_DAC_MspInit+0xfc>)
 8000d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d26:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_DAC_MspInit+0xfc>)
 8000d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_DAC_MspInit+0xfc>)
 8000d32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d36:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_DAC_MspInit+0xfc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000d3e:	4810      	ldr	r0, [pc, #64]	; (8000d80 <HAL_DAC_MspInit+0xfc>)
 8000d40:	f000 fd8a 	bl	8001858 <HAL_DMA_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000d4a:	f7ff ff6d 	bl	8000c28 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <HAL_DAC_MspInit+0xfc>)
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_DAC_MspInit+0xfc>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2036      	movs	r0, #54	; 0x36
 8000d60:	f000 fbb7 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d64:	2036      	movs	r0, #54	; 0x36
 8000d66:	f000 fbd0 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40007400 	.word	0x40007400
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	20000044 	.word	0x20000044
 8000d84:	40026088 	.word	0x40026088

08000d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1c      	ldr	r2, [pc, #112]	; (8000e08 <HAL_TIM_Base_MspInit+0x80>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d116      	bne.n	8000dc8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <HAL_TIM_Base_MspInit+0x84>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a1a      	ldr	r2, [pc, #104]	; (8000e0c <HAL_TIM_Base_MspInit+0x84>)
 8000da4:	f043 0310 	orr.w	r3, r3, #16
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_TIM_Base_MspInit+0x84>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2036      	movs	r0, #54	; 0x36
 8000dbc:	f000 fb89 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dc0:	2036      	movs	r0, #54	; 0x36
 8000dc2:	f000 fba2 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000dc6:	e01a      	b.n	8000dfe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <HAL_TIM_Base_MspInit+0x88>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d115      	bne.n	8000dfe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_TIM_Base_MspInit+0x84>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <HAL_TIM_Base_MspInit+0x84>)
 8000ddc:	f043 0320 	orr.w	r3, r3, #32
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_TIM_Base_MspInit+0x84>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 0320 	and.w	r3, r3, #32
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2037      	movs	r0, #55	; 0x37
 8000df4:	f000 fb6d 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000df8:	2037      	movs	r0, #55	; 0x37
 8000dfa:	f000 fb86 	bl	800150a <HAL_NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40001000 	.word	0x40001000
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40001400 	.word	0x40001400

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <HAL_UART_MspInit+0x84>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d12c      	bne.n	8000e90 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_UART_MspInit+0x88>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <HAL_UART_MspInit+0x88>)
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_UART_MspInit+0x88>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_UART_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <HAL_UART_MspInit+0x88>)
 8000e5c:	f043 0308 	orr.w	r3, r3, #8
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_UART_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e80:	2307      	movs	r3, #7
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <HAL_UART_MspInit+0x8c>)
 8000e8c:	f000 ffce 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	; 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40004800 	.word	0x40004800
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020c00 	.word	0x40020c00

08000ea4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0a0      	sub	sp, #128	; 0x80
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	225c      	movs	r2, #92	; 0x5c
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 ff91 	bl	8004dec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ed2:	d14e      	bne.n	8000f72 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000eda:	2300      	movs	r3, #0
 8000edc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fbee 	bl	80026c4 <HAL_RCCEx_PeriphCLKConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000eee:	f7ff fe9b 	bl	8000c28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <HAL_PCD_MspInit+0xd8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a20      	ldr	r2, [pc, #128]	; (8000f7c <HAL_PCD_MspInit+0xd8>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <HAL_PCD_MspInit+0xd8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f0e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f12:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f20:	230a      	movs	r3, #10
 8000f22:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4815      	ldr	r0, [pc, #84]	; (8000f80 <HAL_PCD_MspInit+0xdc>)
 8000f2c:	f000 ff7e 	bl	8001e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f34:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f36:	2300      	movs	r3, #0
 8000f38:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f42:	4619      	mov	r1, r3
 8000f44:	480e      	ldr	r0, [pc, #56]	; (8000f80 <HAL_PCD_MspInit+0xdc>)
 8000f46:	f000 ff71 	bl	8001e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_PCD_MspInit+0xd8>)
 8000f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_PCD_MspInit+0xd8>)
 8000f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f54:	6353      	str	r3, [r2, #52]	; 0x34
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_PCD_MspInit+0xd8>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_PCD_MspInit+0xd8>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_PCD_MspInit+0xd8>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f72:	bf00      	nop
 8000f74:	3780      	adds	r7, #128	; 0x80
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f960 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	key_pressed = 1;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <EXTI4_IRQHandler+0x3c>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]

	if (__HAL_GPIO_EXTI_GET_FLAG(COL0_Pin)){
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <EXTI4_IRQHandler+0x40>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00a      	beq.n	8001004 <EXTI4_IRQHandler+0x2c>
		current_col  = 0;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <EXTI4_IRQHandler+0x44>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]

	    while (HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin)){}
 8000ff4:	bf00      	nop
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4809      	ldr	r0, [pc, #36]	; (8001020 <EXTI4_IRQHandler+0x48>)
 8000ffa:	f001 f8ab 	bl	8002154 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f8      	bne.n	8000ff6 <EXTI4_IRQHandler+0x1e>
	 }

	 HAL_GPIO_EXTI_IRQHandler(COL0_Pin);
 8001004:	2010      	movs	r0, #16
 8001006:	f001 f8d7 	bl	80021b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL0_Pin);
 800100a:	2010      	movs	r0, #16
 800100c:	f001 f8d4 	bl	80021b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000685 	.word	0x20000685
 8001018:	40013c00 	.word	0x40013c00
 800101c:	20000001 	.word	0x20000001
 8001020:	40020c00 	.word	0x40020c00

08001024 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <DMA1_Stream5_IRQHandler+0x10>)
 800102a:	f000 fcc3 	bl	80019b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000044 	.word	0x20000044

08001038 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	key_pressed = 1;
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <EXTI9_5_IRQHandler+0x8c>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]

	if (__HAL_GPIO_EXTI_GET_FLAG(COL1_Pin)){
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <EXTI9_5_IRQHandler+0x90>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f003 0320 	and.w	r3, r3, #32
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <EXTI9_5_IRQHandler+0x2e>
		current_col  = 1;
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <EXTI9_5_IRQHandler+0x94>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]

		while (HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin)){}
 8001054:	bf00      	nop
 8001056:	2120      	movs	r1, #32
 8001058:	481d      	ldr	r0, [pc, #116]	; (80010d0 <EXTI9_5_IRQHandler+0x98>)
 800105a:	f001 f87b 	bl	8002154 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f8      	bne.n	8001056 <EXTI9_5_IRQHandler+0x1e>
 8001064:	e022      	b.n	80010ac <EXTI9_5_IRQHandler+0x74>
	}else if (__HAL_GPIO_EXTI_GET_FLAG(COL2_Pin)){
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <EXTI9_5_IRQHandler+0x90>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <EXTI9_5_IRQHandler+0x52>
		current_col  = 2;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <EXTI9_5_IRQHandler+0x94>)
 8001074:	2202      	movs	r2, #2
 8001076:	701a      	strb	r2, [r3, #0]

	    while (HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin)){}
 8001078:	bf00      	nop
 800107a:	2140      	movs	r1, #64	; 0x40
 800107c:	4814      	ldr	r0, [pc, #80]	; (80010d0 <EXTI9_5_IRQHandler+0x98>)
 800107e:	f001 f869 	bl	8002154 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f8      	bne.n	800107a <EXTI9_5_IRQHandler+0x42>
 8001088:	e010      	b.n	80010ac <EXTI9_5_IRQHandler+0x74>
	  }else if (__HAL_GPIO_EXTI_GET_FLAG(COL3_Pin)){
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <EXTI9_5_IRQHandler+0x90>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00a      	beq.n	80010ac <EXTI9_5_IRQHandler+0x74>
		  current_col  = 3;
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <EXTI9_5_IRQHandler+0x94>)
 8001098:	2203      	movs	r2, #3
 800109a:	701a      	strb	r2, [r3, #0]

		  while (HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin)){}
 800109c:	bf00      	nop
 800109e:	2180      	movs	r1, #128	; 0x80
 80010a0:	480b      	ldr	r0, [pc, #44]	; (80010d0 <EXTI9_5_IRQHandler+0x98>)
 80010a2:	f001 f857 	bl	8002154 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1f8      	bne.n	800109e <EXTI9_5_IRQHandler+0x66>
	  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL1_Pin);
 80010ac:	2020      	movs	r0, #32
 80010ae:	f001 f883 	bl	80021b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL2_Pin);
 80010b2:	2040      	movs	r0, #64	; 0x40
 80010b4:	f001 f880 	bl	80021b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL3_Pin);
 80010b8:	2080      	movs	r0, #128	; 0x80
 80010ba:	f001 f87d 	bl	80021b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000685 	.word	0x20000685
 80010c8:	40013c00 	.word	0x40013c00
 80010cc:	20000001 	.word	0x20000001
 80010d0:	40020c00 	.word	0x40020c00

080010d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (HAL_GetTick() - dead_time >= 50){
 80010d8:	f000 f8f0 	bl	80012bc <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <EXTI15_10_IRQHandler+0x54>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b31      	cmp	r3, #49	; 0x31
 80010e6:	d90f      	bls.n	8001108 <EXTI15_10_IRQHandler+0x34>
	    if (__HAL_GPIO_EXTI_GET_FLAG(USER_Btn_Pin)) {
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <EXTI15_10_IRQHandler+0x58>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d009      	beq.n	8001108 <EXTI15_10_IRQHandler+0x34>
	      // Your code here
	    	filter_en = !filter_en;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <EXTI15_10_IRQHandler+0x5c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf0c      	ite	eq
 80010fc:	2301      	moveq	r3, #1
 80010fe:	2300      	movne	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <EXTI15_10_IRQHandler+0x5c>)
 8001106:	701a      	strb	r2, [r3, #0]
	    }
	  }

	HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001108:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800110c:	f001 f854 	bl	80021b8 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001110:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001114:	f001 f850 	bl	80021b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  dead_time = HAL_GetTick();
 8001118:	f000 f8d0 	bl	80012bc <HAL_GetTick>
 800111c:	4603      	mov	r3, r0
 800111e:	4a02      	ldr	r2, [pc, #8]	; (8001128 <EXTI15_10_IRQHandler+0x54>)
 8001120:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200007bc 	.word	0x200007bc
 800112c:	40013c00 	.word	0x40013c00
 8001130:	20000686 	.word	0x20000686

08001134 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	keypad_poll = 1;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <TIM6_DAC_IRQHandler+0x1c>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <TIM6_DAC_IRQHandler+0x20>)
 8001140:	f000 fa71 	bl	8001626 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <TIM6_DAC_IRQHandler+0x24>)
 8001146:	f002 fb75 	bl	8003834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000684 	.word	0x20000684
 8001154:	20000030 	.word	0x20000030
 8001158:	200000a4 	.word	0x200000a4

0800115c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	new_sample = 1;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <TIM7_IRQHandler+0x14>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001166:	4803      	ldr	r0, [pc, #12]	; (8001174 <TIM7_IRQHandler+0x18>)
 8001168:	f002 fb64 	bl	8003834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000687 	.word	0x20000687
 8001174:	200000ec 	.word	0x200000ec

08001178 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <SystemInit+0x20>)
 800117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <SystemInit+0x20>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800119c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011a2:	490e      	ldr	r1, [pc, #56]	; (80011dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011b8:	4c0b      	ldr	r4, [pc, #44]	; (80011e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011c6:	f7ff ffd7 	bl	8001178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ca:	f003 fdeb 	bl	8004da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ce:	f7ff f99b 	bl	8000508 <main>
  bx  lr    
 80011d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80011e0:	08004f78 	.word	0x08004f78
  ldr r2, =_sbss
 80011e4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80011e8:	200007c4 	.word	0x200007c4

080011ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC_IRQHandler>
	...

080011f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <HAL_Init+0x40>)
 80011fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_Init+0x40>)
 8001206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_Init+0x40>)
 8001212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f94f 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f808 	bl	8001234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001224:	f7ff fd06 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023c00 	.word	0x40023c00

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x54>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x58>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f967 	bl	8001526 <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 f92f 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_InitTick+0x5c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000008 	.word	0x20000008
 800128c:	20000010 	.word	0x20000010
 8001290:	2000000c 	.word	0x2000000c

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000010 	.word	0x20000010
 80012b8:	200007c0 	.word	0x200007c0

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200007c0 	.word	0x200007c0

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_Delay+0x44>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000010 	.word	0x20000010

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff29 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff3e 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff8e 	bl	8001410 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5d 	bl	80013bc <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff31 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e014      	b.n	800157a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	791b      	ldrb	r3, [r3, #4]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d105      	bne.n	8001566 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fb8f 	bl	8000c84 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2202      	movs	r2, #2
 800156a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	795b      	ldrb	r3, [r3, #5]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_DAC_Start+0x16>
 8001594:	2302      	movs	r3, #2
 8001596:	e040      	b.n	800161a <HAL_DAC_Start+0x98>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2202      	movs	r2, #2
 80015a2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6819      	ldr	r1, [r3, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	2201      	movs	r2, #1
 80015b2:	409a      	lsls	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10f      	bne.n	80015e2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80015cc:	2b3c      	cmp	r3, #60	; 0x3c
 80015ce:	d11d      	bne.n	800160c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	e014      	b.n	800160c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	213c      	movs	r1, #60	; 0x3c
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d107      	bne.n	800160c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0202 	orr.w	r2, r2, #2
 800160a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800163c:	d120      	bne.n	8001680 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800164c:	d118      	bne.n	8001680 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2204      	movs	r2, #4
 8001652:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	f043 0201 	orr.w	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001668:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001678:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f852 	bl	8001724 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800168a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800168e:	d120      	bne.n	80016d2 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800169a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800169e:	d118      	bne.n	80016d2 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2204      	movs	r2, #4
 80016a4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	f043 0202 	orr.w	r2, r3, #2
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80016ca:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f8b9 	bl	8001844 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80016da:	b480      	push	{r7}
 80016dc:	b087      	sub	sp, #28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	3308      	adds	r3, #8
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	e004      	b.n	800170e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	3314      	adds	r3, #20
 800170c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	461a      	mov	r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	795b      	ldrb	r3, [r3, #5]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_DAC_ConfigChannel+0x18>
 800174c:	2302      	movs	r3, #2
 800174e:	e03c      	b.n	80017ca <HAL_DAC_ConfigChannel+0x92>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2201      	movs	r2, #1
 8001754:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2202      	movs	r2, #2
 800175a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	4013      	ands	r3, r2
 8001778:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4313      	orrs	r3, r2
 8001796:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6819      	ldr	r1, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	22c0      	movs	r2, #192	; 0xc0
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	400a      	ands	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2201      	movs	r2, #1
 80017c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	371c      	adds	r7, #28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	795b      	ldrb	r3, [r3, #5]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_DACEx_NoiseWaveGenerate+0x18>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e024      	b.n	8001838 <HAL_DACEx_NoiseWaveGenerate+0x62>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2201      	movs	r2, #1
 80017f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2202      	movs	r2, #2
 80017f8:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	ea02 0103 	and.w	r1, r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	409a      	lsls	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2201      	movs	r2, #1
 800182e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff fd2a 	bl	80012bc <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e099      	b.n	80019a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001894:	e00f      	b.n	80018b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001896:	f7ff fd11 	bl	80012bc <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d908      	bls.n	80018b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2220      	movs	r2, #32
 80018a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2203      	movs	r2, #3
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e078      	b.n	80019a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1e8      	bne.n	8001896 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <HAL_DMA_Init+0x158>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	2b04      	cmp	r3, #4
 800190e:	d107      	bne.n	8001920 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	4313      	orrs	r3, r2
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	4313      	orrs	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f023 0307 	bic.w	r3, r3, #7
 8001936:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	4313      	orrs	r3, r2
 8001940:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	2b04      	cmp	r3, #4
 8001948:	d117      	bne.n	800197a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4313      	orrs	r3, r2
 8001952:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00e      	beq.n	800197a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f9e9 	bl	8001d34 <DMA_CheckFifoParam>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2240      	movs	r2, #64	; 0x40
 800196c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001976:	2301      	movs	r3, #1
 8001978:	e016      	b.n	80019a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f9a0 	bl	8001cc8 <DMA_CalcBaseAndBitshift>
 8001988:	4603      	mov	r3, r0
 800198a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	223f      	movs	r2, #63	; 0x3f
 8001992:	409a      	lsls	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	f010803f 	.word	0xf010803f

080019b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019c0:	4b8e      	ldr	r3, [pc, #568]	; (8001bfc <HAL_DMA_IRQHandler+0x248>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a8e      	ldr	r2, [pc, #568]	; (8001c00 <HAL_DMA_IRQHandler+0x24c>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0a9b      	lsrs	r3, r3, #10
 80019cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2208      	movs	r2, #8
 80019e0:	409a      	lsls	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d01a      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d013      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0204 	bic.w	r2, r2, #4
 8001a06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a24:	2201      	movs	r2, #1
 8001a26:	409a      	lsls	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d012      	beq.n	8001a56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a42:	2201      	movs	r2, #1
 8001a44:	409a      	lsls	r2, r3
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4e:	f043 0202 	orr.w	r2, r3, #2
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d012      	beq.n	8001a8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00b      	beq.n	8001a8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a78:	2204      	movs	r2, #4
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a84:	f043 0204 	orr.w	r2, r3, #4
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	2210      	movs	r2, #16
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d043      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d03c      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aae:	2210      	movs	r2, #16
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d018      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d108      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d024      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4798      	blx	r3
 8001ae2:	e01f      	b.n	8001b24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d01b      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
 8001af4:	e016      	b.n	8001b24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d107      	bne.n	8001b14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0208 	bic.w	r2, r2, #8
 8001b12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	2220      	movs	r2, #32
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 808f 	beq.w	8001c54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 8087 	beq.w	8001c54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b05      	cmp	r3, #5
 8001b5c:	d136      	bne.n	8001bcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0216 	bic.w	r2, r2, #22
 8001b6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d103      	bne.n	8001b8e <HAL_DMA_IRQHandler+0x1da>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0208 	bic.w	r2, r2, #8
 8001b9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba2:	223f      	movs	r2, #63	; 0x3f
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d07e      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
        }
        return;
 8001bca:	e079      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d01d      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10d      	bne.n	8001c04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d031      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
 8001bf8:	e02c      	b.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
 8001bfa:	bf00      	nop
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d023      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
 8001c14:	e01e      	b.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10f      	bne.n	8001c44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0210 	bic.w	r2, r2, #16
 8001c32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d032      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d022      	beq.n	8001cae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2205      	movs	r2, #5
 8001c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	3301      	adds	r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d307      	bcc.n	8001c9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f2      	bne.n	8001c80 <HAL_DMA_IRQHandler+0x2cc>
 8001c9a:	e000      	b.n	8001c9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
 8001cbe:	e000      	b.n	8001cc2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cc0:	bf00      	nop
    }
  }
}
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	3b10      	subs	r3, #16
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <DMA_CalcBaseAndBitshift+0x64>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	091b      	lsrs	r3, r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ce2:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <DMA_CalcBaseAndBitshift+0x68>)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d909      	bls.n	8001d0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cfe:	f023 0303 	bic.w	r3, r3, #3
 8001d02:	1d1a      	adds	r2, r3, #4
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	659a      	str	r2, [r3, #88]	; 0x58
 8001d08:	e007      	b.n	8001d1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d12:	f023 0303 	bic.w	r3, r3, #3
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	aaaaaaab 	.word	0xaaaaaaab
 8001d30:	08004f60 	.word	0x08004f60

08001d34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d11f      	bne.n	8001d8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d856      	bhi.n	8001e02 <DMA_CheckFifoParam+0xce>
 8001d54:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <DMA_CheckFifoParam+0x28>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d7f 	.word	0x08001d7f
 8001d64:	08001d6d 	.word	0x08001d6d
 8001d68:	08001e03 	.word	0x08001e03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d046      	beq.n	8001e06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d7c:	e043      	b.n	8001e06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d86:	d140      	bne.n	8001e0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d8c:	e03d      	b.n	8001e0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d96:	d121      	bne.n	8001ddc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d837      	bhi.n	8001e0e <DMA_CheckFifoParam+0xda>
 8001d9e:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <DMA_CheckFifoParam+0x70>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001db5 	.word	0x08001db5
 8001da8:	08001dbb 	.word	0x08001dbb
 8001dac:	08001db5 	.word	0x08001db5
 8001db0:	08001dcd 	.word	0x08001dcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
      break;
 8001db8:	e030      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d025      	beq.n	8001e12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dca:	e022      	b.n	8001e12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dd4:	d11f      	bne.n	8001e16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dda:	e01c      	b.n	8001e16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d903      	bls.n	8001dea <DMA_CheckFifoParam+0xb6>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d003      	beq.n	8001df0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001de8:	e018      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
      break;
 8001dee:	e015      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00e      	beq.n	8001e1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001e00:	e00b      	b.n	8001e1a <DMA_CheckFifoParam+0xe6>
      break;
 8001e02:	bf00      	nop
 8001e04:	e00a      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e06:	bf00      	nop
 8001e08:	e008      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e0a:	bf00      	nop
 8001e0c:	e006      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e0e:	bf00      	nop
 8001e10:	e004      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e12:	bf00      	nop
 8001e14:	e002      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e16:	bf00      	nop
 8001e18:	e000      	b.n	8001e1c <DMA_CheckFifoParam+0xe8>
      break;
 8001e1a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e165      	b.n	8002114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 8154 	bne.w	800210e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d005      	beq.n	8001e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d130      	bne.n	8001ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 0201 	and.w	r2, r3, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d017      	beq.n	8001f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d123      	bne.n	8001f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80ae 	beq.w	800210e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b5d      	ldr	r3, [pc, #372]	; (800212c <HAL_GPIO_Init+0x300>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a5c      	ldr	r2, [pc, #368]	; (800212c <HAL_GPIO_Init+0x300>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b5a      	ldr	r3, [pc, #360]	; (800212c <HAL_GPIO_Init+0x300>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fce:	4a58      	ldr	r2, [pc, #352]	; (8002130 <HAL_GPIO_Init+0x304>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4f      	ldr	r2, [pc, #316]	; (8002134 <HAL_GPIO_Init+0x308>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d025      	beq.n	8002046 <HAL_GPIO_Init+0x21a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4e      	ldr	r2, [pc, #312]	; (8002138 <HAL_GPIO_Init+0x30c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01f      	beq.n	8002042 <HAL_GPIO_Init+0x216>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4d      	ldr	r2, [pc, #308]	; (800213c <HAL_GPIO_Init+0x310>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d019      	beq.n	800203e <HAL_GPIO_Init+0x212>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <HAL_GPIO_Init+0x314>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0x20e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4b      	ldr	r2, [pc, #300]	; (8002144 <HAL_GPIO_Init+0x318>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00d      	beq.n	8002036 <HAL_GPIO_Init+0x20a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4a      	ldr	r2, [pc, #296]	; (8002148 <HAL_GPIO_Init+0x31c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <HAL_GPIO_Init+0x206>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a49      	ldr	r2, [pc, #292]	; (800214c <HAL_GPIO_Init+0x320>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_GPIO_Init+0x202>
 800202a:	2306      	movs	r3, #6
 800202c:	e00c      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 800202e:	2307      	movs	r3, #7
 8002030:	e00a      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 8002032:	2305      	movs	r3, #5
 8002034:	e008      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 8002036:	2304      	movs	r3, #4
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 800203a:	2303      	movs	r3, #3
 800203c:	e004      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 800203e:	2302      	movs	r3, #2
 8002040:	e002      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 8002046:	2300      	movs	r3, #0
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	f002 0203 	and.w	r2, r2, #3
 800204e:	0092      	lsls	r2, r2, #2
 8002050:	4093      	lsls	r3, r2
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002058:	4935      	ldr	r1, [pc, #212]	; (8002130 <HAL_GPIO_Init+0x304>)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002066:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <HAL_GPIO_Init+0x324>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800208a:	4a31      	ldr	r2, [pc, #196]	; (8002150 <HAL_GPIO_Init+0x324>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002090:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <HAL_GPIO_Init+0x324>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b4:	4a26      	ldr	r2, [pc, #152]	; (8002150 <HAL_GPIO_Init+0x324>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ba:	4b25      	ldr	r3, [pc, #148]	; (8002150 <HAL_GPIO_Init+0x324>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020de:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <HAL_GPIO_Init+0x324>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <HAL_GPIO_Init+0x324>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002108:	4a11      	ldr	r2, [pc, #68]	; (8002150 <HAL_GPIO_Init+0x324>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3301      	adds	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2b0f      	cmp	r3, #15
 8002118:	f67f ae96 	bls.w	8001e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	40013800 	.word	0x40013800
 8002134:	40020000 	.word	0x40020000
 8002138:	40020400 	.word	0x40020400
 800213c:	40020800 	.word	0x40020800
 8002140:	40020c00 	.word	0x40020c00
 8002144:	40021000 	.word	0x40021000
 8002148:	40021400 	.word	0x40021400
 800214c:	40021800 	.word	0x40021800
 8002150:	40013c00 	.word	0x40013c00

08002154 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e001      	b.n	8002176 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
 8002190:	4613      	mov	r3, r2
 8002192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002194:	787b      	ldrb	r3, [r7, #1]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a0:	e003      	b.n	80021aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021a2:	887b      	ldrh	r3, [r7, #2]
 80021a4:	041a      	lsls	r2, r3, #16
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	619a      	str	r2, [r3, #24]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ce:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f806 	bl	80021e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40013c00 	.word	0x40013c00

080021e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002200:	b08f      	sub	sp, #60	; 0x3c
 8002202:	af0a      	add	r7, sp, #40	; 0x28
 8002204:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e116      	b.n	800243e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fe3a 	bl	8000ea4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2203      	movs	r2, #3
 8002234:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f002 f87d 	bl	800434e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	687e      	ldr	r6, [r7, #4]
 800225c:	466d      	mov	r5, sp
 800225e:	f106 0410 	add.w	r4, r6, #16
 8002262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800226e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002272:	1d33      	adds	r3, r6, #4
 8002274:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002276:	6838      	ldr	r0, [r7, #0]
 8002278:	f002 f808 	bl	800428c <USB_CoreInit>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2202      	movs	r2, #2
 8002286:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0d7      	b.n	800243e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f002 f86b 	bl	8004370 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229a:	2300      	movs	r3, #0
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	e04a      	b.n	8002336 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	333d      	adds	r3, #61	; 0x3d
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	333c      	adds	r3, #60	; 0x3c
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	b298      	uxth	r0, r3
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	3344      	adds	r3, #68	; 0x44
 80022dc:	4602      	mov	r2, r0
 80022de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3340      	adds	r3, #64	; 0x40
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	3348      	adds	r3, #72	; 0x48
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	334c      	adds	r3, #76	; 0x4c
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	3354      	adds	r3, #84	; 0x54
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	3301      	adds	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	429a      	cmp	r2, r3
 800233e:	d3af      	bcc.n	80022a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	e044      	b.n	80023d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	3301      	adds	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d3b5      	bcc.n	8002346 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	687e      	ldr	r6, [r7, #4]
 80023e2:	466d      	mov	r5, sp
 80023e4:	f106 0410 	add.w	r4, r6, #16
 80023e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80023f8:	1d33      	adds	r3, r6, #4
 80023fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023fc:	6838      	ldr	r0, [r7, #0]
 80023fe:	f002 f803 	bl	8004408 <USB_DevInit>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e014      	b.n	800243e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	2b01      	cmp	r3, #1
 800242a:	d102      	bne.n	8002432 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f80a 	bl	8002446 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f002 f9c1 	bl	80047be <USB_DevDisconnect>

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002446 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002478:	f043 0303 	orr.w	r3, r3, #3
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0cc      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b68      	ldr	r3, [pc, #416]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d90c      	bls.n	80024cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b65      	ldr	r3, [pc, #404]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b63      	ldr	r3, [pc, #396]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0b8      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e4:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a58      	ldr	r2, [pc, #352]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024fc:	4b53      	ldr	r3, [pc, #332]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a52      	ldr	r2, [pc, #328]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b50      	ldr	r3, [pc, #320]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	494d      	ldr	r1, [pc, #308]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d044      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d119      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e07f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d003      	beq.n	800254e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254a:	2b03      	cmp	r3, #3
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254e:	4b3f      	ldr	r3, [pc, #252]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e06f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255e:	4b3b      	ldr	r3, [pc, #236]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e067      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f023 0203 	bic.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4934      	ldr	r1, [pc, #208]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002580:	f7fe fe9c 	bl	80012bc <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	e00a      	b.n	800259e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002588:	f7fe fe98 	bl	80012bc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e04f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 020c 	and.w	r2, r3, #12
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d1eb      	bne.n	8002588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025b0:	4b25      	ldr	r3, [pc, #148]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d20c      	bcs.n	80025d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e032      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4916      	ldr	r1, [pc, #88]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	490e      	ldr	r1, [pc, #56]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002616:	f000 fb7f 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 800261a:	4602      	mov	r2, r0
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	490a      	ldr	r1, [pc, #40]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	5ccb      	ldrb	r3, [r1, r3]
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fdfc 	bl	8001234 <HAL_InitTick>

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023c00 	.word	0x40023c00
 800264c:	40023800 	.word	0x40023800
 8002650:	08004f48 	.word	0x08004f48
 8002654:	20000008 	.word	0x20000008
 8002658:	2000000c 	.word	0x2000000c

0800265c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <HAL_RCC_GetHCLKFreq+0x14>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000008 	.word	0x20000008

08002674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002678:	f7ff fff0 	bl	800265c <HAL_RCC_GetHCLKFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	0a9b      	lsrs	r3, r3, #10
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	4903      	ldr	r1, [pc, #12]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40023800 	.word	0x40023800
 8002698:	08004f58 	.word	0x08004f58

0800269c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026a0:	f7ff ffdc 	bl	800265c <HAL_RCC_GetHCLKFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	0b5b      	lsrs	r3, r3, #13
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	4903      	ldr	r1, [pc, #12]	; (80026c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40023800 	.word	0x40023800
 80026c0:	08004f58 	.word	0x08004f58

080026c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d010      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80026fc:	4b6f      	ldr	r3, [pc, #444]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002702:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	496c      	ldr	r1, [pc, #432]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800271a:	2301      	movs	r3, #1
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d010      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800272a:	4b64      	ldr	r3, [pc, #400]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800272c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002730:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	4960      	ldr	r1, [pc, #384]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002748:	2301      	movs	r3, #1
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d017      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002758:	4b58      	ldr	r3, [pc, #352]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800275a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800275e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4955      	ldr	r1, [pc, #340]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002776:	d101      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002778:	2301      	movs	r3, #1
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002784:	2301      	movs	r3, #1
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d017      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002794:	4b49      	ldr	r3, [pc, #292]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800279a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a2:	4946      	ldr	r1, [pc, #280]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b2:	d101      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80027b4:	2301      	movs	r3, #1
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80027c0:	2301      	movs	r3, #1
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0320 	and.w	r3, r3, #32
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 808a 	beq.w	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	4b39      	ldr	r3, [pc, #228]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a38      	ldr	r2, [pc, #224]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
 80027e2:	4b36      	ldr	r3, [pc, #216]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80027ee:	4b34      	ldr	r3, [pc, #208]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a33      	ldr	r2, [pc, #204]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027fa:	f7fe fd5f 	bl	80012bc <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe fd5b 	bl	80012bc <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e278      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002814:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002820:	4b26      	ldr	r3, [pc, #152]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002828:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d02f      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002838:	6a3a      	ldr	r2, [r7, #32]
 800283a:	429a      	cmp	r2, r3
 800283c:	d028      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002846:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002848:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002854:	4a19      	ldr	r2, [pc, #100]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d114      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002866:	f7fe fd29 	bl	80012bc <HAL_GetTick>
 800286a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286c:	e00a      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe fd25 	bl	80012bc <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e240      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ee      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800289c:	d114      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80028ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b2:	4902      	ldr	r1, [pc, #8]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]
 80028b8:	e00c      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40007000 	.word	0x40007000
 80028c4:	42470e40 	.word	0x42470e40
 80028c8:	4b4a      	ldr	r3, [pc, #296]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a49      	ldr	r2, [pc, #292]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028d2:	6093      	str	r3, [r2, #8]
 80028d4:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e0:	4944      	ldr	r1, [pc, #272]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d004      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80028f8:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80028fa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002908:	4b3a      	ldr	r3, [pc, #232]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800290a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	4937      	ldr	r1, [pc, #220]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800292a:	4b32      	ldr	r3, [pc, #200]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800292c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002930:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002938:	492e      	ldr	r1, [pc, #184]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d011      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800294c:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800294e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002952:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295a:	4926      	ldr	r1, [pc, #152]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800296a:	d101      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800296c:	2301      	movs	r3, #1
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800297c:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800297e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002982:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	491a      	ldr	r1, [pc, #104]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299a:	2b00      	cmp	r3, #0
 800299c:	d011      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ac:	4911      	ldr	r1, [pc, #68]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029bc:	d101      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80029be:	2301      	movs	r3, #1
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d005      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d0:	f040 80ff 	bne.w	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029da:	f7fe fc6f 	bl	80012bc <HAL_GetTick>
 80029de:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029e0:	e00e      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029e2:	f7fe fc6b 	bl	80012bc <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d907      	bls.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e188      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80029f4:	40023800 	.word	0x40023800
 80029f8:	424711e0 	.word	0x424711e0
 80029fc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a00:	4b7e      	ldr	r3, [pc, #504]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ea      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d028      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d124      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a34:	4b71      	ldr	r3, [pc, #452]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3a:	0c1b      	lsrs	r3, r3, #16
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	3301      	adds	r3, #1
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a46:	4b6d      	ldr	r3, [pc, #436]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4c:	0e1b      	lsrs	r3, r3, #24
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	019b      	lsls	r3, r3, #6
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	3b01      	subs	r3, #1
 8002a66:	041b      	lsls	r3, r3, #16
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	071b      	lsls	r3, r3, #28
 8002a76:	4961      	ldr	r1, [pc, #388]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d035      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aa8:	d130      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002aaa:	4b54      	ldr	r3, [pc, #336]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002abc:	4b4f      	ldr	r3, [pc, #316]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac2:	0f1b      	lsrs	r3, r3, #28
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	019b      	lsls	r3, r3, #6
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	3b01      	subs	r3, #1
 8002adc:	041b      	lsls	r3, r3, #16
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	061b      	lsls	r3, r3, #24
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	071b      	lsls	r3, r3, #28
 8002aec:	4943      	ldr	r1, [pc, #268]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002af4:	4b41      	ldr	r3, [pc, #260]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002afa:	f023 021f 	bic.w	r2, r3, #31
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	3b01      	subs	r3, #1
 8002b04:	493d      	ldr	r1, [pc, #244]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d029      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b20:	d124      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b22:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b34:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b3a:	0f1b      	lsrs	r3, r3, #28
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	019b      	lsls	r3, r3, #6
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	3b01      	subs	r3, #1
 8002b56:	041b      	lsls	r3, r3, #16
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	071b      	lsls	r3, r3, #28
 8002b64:	4925      	ldr	r1, [pc, #148]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d016      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	019b      	lsls	r3, r3, #6
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	085b      	lsrs	r3, r3, #1
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	041b      	lsls	r3, r3, #16
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	061b      	lsls	r3, r3, #24
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	071b      	lsls	r3, r3, #28
 8002b9e:	4917      	ldr	r1, [pc, #92]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ba6:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bac:	f7fe fb86 	bl	80012bc <HAL_GetTick>
 8002bb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bb4:	f7fe fb82 	bl	80012bc <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e09f      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	f040 8095 	bne.w	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002be0:	f7fe fb6c 	bl	80012bc <HAL_GetTick>
 8002be4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002be6:	e00f      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002be8:	f7fe fb68 	bl	80012bc <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d908      	bls.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e085      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	42470068 	.word	0x42470068
 8002c04:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c08:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c14:	d0e8      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d02b      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d127      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002c3e:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	019b      	lsls	r3, r3, #6
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	085b      	lsrs	r3, r3, #1
 8002c60:	3b01      	subs	r3, #1
 8002c62:	041b      	lsls	r3, r3, #16
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	061b      	lsls	r3, r3, #24
 8002c6c:	4928      	ldr	r1, [pc, #160]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c74:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c7a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	3b01      	subs	r3, #1
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	4922      	ldr	r1, [pc, #136]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01d      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca2:	d118      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	0e1b      	lsrs	r3, r3, #24
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	019b      	lsls	r3, r3, #6
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	061b      	lsls	r3, r3, #24
 8002cce:	4910      	ldr	r1, [pc, #64]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cdc:	f7fe faee 	bl	80012bc <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002ce4:	f7fe faea 	bl	80012bc <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e007      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d02:	d1ef      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3730      	adds	r7, #48	; 0x30
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	42470070 	.word	0x42470070

08002d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d1c:	b0ae      	sub	sp, #184	; 0xb8
 8002d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d3e:	4bcb      	ldr	r3, [pc, #812]	; (800306c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	f200 8206 	bhi.w	8003158 <HAL_RCC_GetSysClockFreq+0x440>
 8002d4c:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d89 	.word	0x08002d89
 8002d58:	08003159 	.word	0x08003159
 8002d5c:	08003159 	.word	0x08003159
 8002d60:	08003159 	.word	0x08003159
 8002d64:	08002d91 	.word	0x08002d91
 8002d68:	08003159 	.word	0x08003159
 8002d6c:	08003159 	.word	0x08003159
 8002d70:	08003159 	.word	0x08003159
 8002d74:	08002d99 	.word	0x08002d99
 8002d78:	08003159 	.word	0x08003159
 8002d7c:	08003159 	.word	0x08003159
 8002d80:	08003159 	.word	0x08003159
 8002d84:	08002f89 	.word	0x08002f89
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d88:	4bb9      	ldr	r3, [pc, #740]	; (8003070 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d8e:	e1e7      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d90:	4bb8      	ldr	r3, [pc, #736]	; (8003074 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d96:	e1e3      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d98:	4bb4      	ldr	r3, [pc, #720]	; (800306c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002da4:	4bb1      	ldr	r3, [pc, #708]	; (800306c <HAL_RCC_GetSysClockFreq+0x354>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d071      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db0:	4bae      	ldr	r3, [pc, #696]	; (800306c <HAL_RCC_GetSysClockFreq+0x354>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dbc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dd6:	4622      	mov	r2, r4
 8002dd8:	462b      	mov	r3, r5
 8002dda:	f04f 0000 	mov.w	r0, #0
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	0159      	lsls	r1, r3, #5
 8002de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de8:	0150      	lsls	r0, r2, #5
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4621      	mov	r1, r4
 8002df0:	1a51      	subs	r1, r2, r1
 8002df2:	6439      	str	r1, [r7, #64]	; 0x40
 8002df4:	4629      	mov	r1, r5
 8002df6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e08:	4649      	mov	r1, r9
 8002e0a:	018b      	lsls	r3, r1, #6
 8002e0c:	4641      	mov	r1, r8
 8002e0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e12:	4641      	mov	r1, r8
 8002e14:	018a      	lsls	r2, r1, #6
 8002e16:	4641      	mov	r1, r8
 8002e18:	1a51      	subs	r1, r2, r1
 8002e1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e30:	4649      	mov	r1, r9
 8002e32:	00cb      	lsls	r3, r1, #3
 8002e34:	4641      	mov	r1, r8
 8002e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e3a:	4641      	mov	r1, r8
 8002e3c:	00ca      	lsls	r2, r1, #3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	4622      	mov	r2, r4
 8002e46:	189b      	adds	r3, r3, r2
 8002e48:	633b      	str	r3, [r7, #48]	; 0x30
 8002e4a:	462b      	mov	r3, r5
 8002e4c:	460a      	mov	r2, r1
 8002e4e:	eb42 0303 	adc.w	r3, r2, r3
 8002e52:	637b      	str	r3, [r7, #52]	; 0x34
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e60:	4629      	mov	r1, r5
 8002e62:	024b      	lsls	r3, r1, #9
 8002e64:	4621      	mov	r1, r4
 8002e66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	024a      	lsls	r2, r1, #9
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e80:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e84:	f7fd f9be 	bl	8000204 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e92:	e067      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e94:	4b75      	ldr	r3, [pc, #468]	; (800306c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ea0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eac:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eae:	2300      	movs	r3, #0
 8002eb0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002eb2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	462b      	mov	r3, r5
 8002eba:	f04f 0000 	mov.w	r0, #0
 8002ebe:	f04f 0100 	mov.w	r1, #0
 8002ec2:	0159      	lsls	r1, r3, #5
 8002ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec8:	0150      	lsls	r0, r2, #5
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4621      	mov	r1, r4
 8002ed0:	1a51      	subs	r1, r2, r1
 8002ed2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ee8:	4649      	mov	r1, r9
 8002eea:	018b      	lsls	r3, r1, #6
 8002eec:	4641      	mov	r1, r8
 8002eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ef2:	4641      	mov	r1, r8
 8002ef4:	018a      	lsls	r2, r1, #6
 8002ef6:	4641      	mov	r1, r8
 8002ef8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002efc:	4649      	mov	r1, r9
 8002efe:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f0e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f16:	4692      	mov	sl, r2
 8002f18:	469b      	mov	fp, r3
 8002f1a:	4623      	mov	r3, r4
 8002f1c:	eb1a 0303 	adds.w	r3, sl, r3
 8002f20:	623b      	str	r3, [r7, #32]
 8002f22:	462b      	mov	r3, r5
 8002f24:	eb4b 0303 	adc.w	r3, fp, r3
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f36:	4629      	mov	r1, r5
 8002f38:	028b      	lsls	r3, r1, #10
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f40:	4621      	mov	r1, r4
 8002f42:	028a      	lsls	r2, r1, #10
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	673b      	str	r3, [r7, #112]	; 0x70
 8002f50:	677a      	str	r2, [r7, #116]	; 0x74
 8002f52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f56:	f7fd f955 	bl	8000204 <__aeabi_uldivmod>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4613      	mov	r3, r2
 8002f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f64:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f86:	e0eb      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f88:	4b38      	ldr	r3, [pc, #224]	; (800306c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f94:	4b35      	ldr	r3, [pc, #212]	; (800306c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d06b      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa0:	4b32      	ldr	r3, [pc, #200]	; (800306c <HAL_RCC_GetSysClockFreq+0x354>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002faa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb2:	663b      	str	r3, [r7, #96]	; 0x60
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	667b      	str	r3, [r7, #100]	; 0x64
 8002fb8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	462b      	mov	r3, r5
 8002fc0:	f04f 0000 	mov.w	r0, #0
 8002fc4:	f04f 0100 	mov.w	r1, #0
 8002fc8:	0159      	lsls	r1, r3, #5
 8002fca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fce:	0150      	lsls	r0, r2, #5
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	1a51      	subs	r1, r2, r1
 8002fd8:	61b9      	str	r1, [r7, #24]
 8002fda:	4629      	mov	r1, r5
 8002fdc:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fee:	4659      	mov	r1, fp
 8002ff0:	018b      	lsls	r3, r1, #6
 8002ff2:	4651      	mov	r1, sl
 8002ff4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ff8:	4651      	mov	r1, sl
 8002ffa:	018a      	lsls	r2, r1, #6
 8002ffc:	4651      	mov	r1, sl
 8002ffe:	ebb2 0801 	subs.w	r8, r2, r1
 8003002:	4659      	mov	r1, fp
 8003004:	eb63 0901 	sbc.w	r9, r3, r1
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003014:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003018:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800301c:	4690      	mov	r8, r2
 800301e:	4699      	mov	r9, r3
 8003020:	4623      	mov	r3, r4
 8003022:	eb18 0303 	adds.w	r3, r8, r3
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	462b      	mov	r3, r5
 800302a:	eb49 0303 	adc.w	r3, r9, r3
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800303c:	4629      	mov	r1, r5
 800303e:	024b      	lsls	r3, r1, #9
 8003040:	4621      	mov	r1, r4
 8003042:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003046:	4621      	mov	r1, r4
 8003048:	024a      	lsls	r2, r1, #9
 800304a:	4610      	mov	r0, r2
 800304c:	4619      	mov	r1, r3
 800304e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003052:	2200      	movs	r2, #0
 8003054:	65bb      	str	r3, [r7, #88]	; 0x58
 8003056:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003058:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800305c:	f7fd f8d2 	bl	8000204 <__aeabi_uldivmod>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4613      	mov	r3, r2
 8003066:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800306a:	e065      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x420>
 800306c:	40023800 	.word	0x40023800
 8003070:	00f42400 	.word	0x00f42400
 8003074:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003078:	4b3d      	ldr	r3, [pc, #244]	; (8003170 <HAL_RCC_GetSysClockFreq+0x458>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	2200      	movs	r2, #0
 8003080:	4618      	mov	r0, r3
 8003082:	4611      	mov	r1, r2
 8003084:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003088:	653b      	str	r3, [r7, #80]	; 0x50
 800308a:	2300      	movs	r3, #0
 800308c:	657b      	str	r3, [r7, #84]	; 0x54
 800308e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003092:	4642      	mov	r2, r8
 8003094:	464b      	mov	r3, r9
 8003096:	f04f 0000 	mov.w	r0, #0
 800309a:	f04f 0100 	mov.w	r1, #0
 800309e:	0159      	lsls	r1, r3, #5
 80030a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a4:	0150      	lsls	r0, r2, #5
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4641      	mov	r1, r8
 80030ac:	1a51      	subs	r1, r2, r1
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	4649      	mov	r1, r9
 80030b2:	eb63 0301 	sbc.w	r3, r3, r1
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030c4:	4659      	mov	r1, fp
 80030c6:	018b      	lsls	r3, r1, #6
 80030c8:	4651      	mov	r1, sl
 80030ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ce:	4651      	mov	r1, sl
 80030d0:	018a      	lsls	r2, r1, #6
 80030d2:	4651      	mov	r1, sl
 80030d4:	1a54      	subs	r4, r2, r1
 80030d6:	4659      	mov	r1, fp
 80030d8:	eb63 0501 	sbc.w	r5, r3, r1
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	00eb      	lsls	r3, r5, #3
 80030e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ea:	00e2      	lsls	r2, r4, #3
 80030ec:	4614      	mov	r4, r2
 80030ee:	461d      	mov	r5, r3
 80030f0:	4643      	mov	r3, r8
 80030f2:	18e3      	adds	r3, r4, r3
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	464b      	mov	r3, r9
 80030f8:	eb45 0303 	adc.w	r3, r5, r3
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800310a:	4629      	mov	r1, r5
 800310c:	028b      	lsls	r3, r1, #10
 800310e:	4621      	mov	r1, r4
 8003110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003114:	4621      	mov	r1, r4
 8003116:	028a      	lsls	r2, r1, #10
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003120:	2200      	movs	r2, #0
 8003122:	64bb      	str	r3, [r7, #72]	; 0x48
 8003124:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003126:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800312a:	f7fd f86b 	bl	8000204 <__aeabi_uldivmod>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4613      	mov	r3, r2
 8003134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003138:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <HAL_RCC_GetSysClockFreq+0x458>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	0f1b      	lsrs	r3, r3, #28
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800314a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003156:	e003      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RCC_GetSysClockFreq+0x45c>)
 800315a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800315e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003160:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003164:	4618      	mov	r0, r3
 8003166:	37b8      	adds	r7, #184	; 0xb8
 8003168:	46bd      	mov	sp, r7
 800316a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	00f42400 	.word	0x00f42400

08003178 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e28d      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8083 	beq.w	800329e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003198:	4b94      	ldr	r3, [pc, #592]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d019      	beq.n	80031d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031a4:	4b91      	ldr	r3, [pc, #580]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d106      	bne.n	80031be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031b0:	4b8e      	ldr	r3, [pc, #568]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031bc:	d00c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031be:	4b8b      	ldr	r3, [pc, #556]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d112      	bne.n	80031f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ca:	4b88      	ldr	r3, [pc, #544]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d6:	d10b      	bne.n	80031f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	4b84      	ldr	r3, [pc, #528]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d05b      	beq.n	800329c <HAL_RCC_OscConfig+0x124>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d157      	bne.n	800329c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e25a      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d106      	bne.n	8003208 <HAL_RCC_OscConfig+0x90>
 80031fa:	4b7c      	ldr	r3, [pc, #496]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7b      	ldr	r2, [pc, #492]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e01d      	b.n	8003244 <HAL_RCC_OscConfig+0xcc>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003210:	d10c      	bne.n	800322c <HAL_RCC_OscConfig+0xb4>
 8003212:	4b76      	ldr	r3, [pc, #472]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a75      	ldr	r2, [pc, #468]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 8003218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	4b73      	ldr	r3, [pc, #460]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a72      	ldr	r2, [pc, #456]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e00b      	b.n	8003244 <HAL_RCC_OscConfig+0xcc>
 800322c:	4b6f      	ldr	r3, [pc, #444]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a6e      	ldr	r2, [pc, #440]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 8003232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	4b6c      	ldr	r3, [pc, #432]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a6b      	ldr	r2, [pc, #428]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 800323e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d013      	beq.n	8003274 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fe f836 	bl	80012bc <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003254:	f7fe f832 	bl	80012bc <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	; 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e21f      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	4b61      	ldr	r3, [pc, #388]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0xdc>
 8003272:	e014      	b.n	800329e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe f822 	bl	80012bc <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800327c:	f7fe f81e 	bl	80012bc <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e20b      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328e:	4b57      	ldr	r3, [pc, #348]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x104>
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d06f      	beq.n	800338a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032aa:	4b50      	ldr	r3, [pc, #320]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d017      	beq.n	80032e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032b6:	4b4d      	ldr	r3, [pc, #308]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d105      	bne.n	80032ce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032c2:	4b4a      	ldr	r3, [pc, #296]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ce:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032d6:	2b0c      	cmp	r3, #12
 80032d8:	d11c      	bne.n	8003314 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032da:	4b44      	ldr	r3, [pc, #272]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d116      	bne.n	8003314 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e6:	4b41      	ldr	r3, [pc, #260]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <HAL_RCC_OscConfig+0x186>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e1d3      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fe:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4937      	ldr	r1, [pc, #220]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	e03a      	b.n	800338a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d020      	beq.n	800335e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800331c:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <HAL_RCC_OscConfig+0x278>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fd ffcb 	bl	80012bc <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800332a:	f7fd ffc7 	bl	80012bc <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e1b4      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003348:	4b28      	ldr	r3, [pc, #160]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4925      	ldr	r1, [pc, #148]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]
 800335c:	e015      	b.n	800338a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335e:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <HAL_RCC_OscConfig+0x278>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fd ffaa 	bl	80012bc <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800336c:	f7fd ffa6 	bl	80012bc <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e193      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d036      	beq.n	8003404 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d016      	beq.n	80033cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fd ff8a 	bl	80012bc <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ac:	f7fd ff86 	bl	80012bc <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e173      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80033c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x234>
 80033ca:	e01b      	b.n	8003404 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HAL_RCC_OscConfig+0x27c>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d2:	f7fd ff73 	bl	80012bc <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	e00e      	b.n	80033f8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033da:	f7fd ff6f 	bl	80012bc <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d907      	bls.n	80033f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e15c      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
 80033ec:	40023800 	.word	0x40023800
 80033f0:	42470000 	.word	0x42470000
 80033f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f8:	4b8a      	ldr	r3, [pc, #552]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 80033fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1ea      	bne.n	80033da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8097 	beq.w	8003540 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003412:	2300      	movs	r3, #0
 8003414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003416:	4b83      	ldr	r3, [pc, #524]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10f      	bne.n	8003442 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	4b7f      	ldr	r3, [pc, #508]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	4a7e      	ldr	r2, [pc, #504]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 800342c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003430:	6413      	str	r3, [r2, #64]	; 0x40
 8003432:	4b7c      	ldr	r3, [pc, #496]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343e:	2301      	movs	r3, #1
 8003440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003442:	4b79      	ldr	r3, [pc, #484]	; (8003628 <HAL_RCC_OscConfig+0x4b0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d118      	bne.n	8003480 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344e:	4b76      	ldr	r3, [pc, #472]	; (8003628 <HAL_RCC_OscConfig+0x4b0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a75      	ldr	r2, [pc, #468]	; (8003628 <HAL_RCC_OscConfig+0x4b0>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345a:	f7fd ff2f 	bl	80012bc <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003462:	f7fd ff2b 	bl	80012bc <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e118      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	4b6c      	ldr	r3, [pc, #432]	; (8003628 <HAL_RCC_OscConfig+0x4b0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d106      	bne.n	8003496 <HAL_RCC_OscConfig+0x31e>
 8003488:	4b66      	ldr	r3, [pc, #408]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	4a65      	ldr	r2, [pc, #404]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	6713      	str	r3, [r2, #112]	; 0x70
 8003494:	e01c      	b.n	80034d0 <HAL_RCC_OscConfig+0x358>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b05      	cmp	r3, #5
 800349c:	d10c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x340>
 800349e:	4b61      	ldr	r3, [pc, #388]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	4a60      	ldr	r2, [pc, #384]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 80034a4:	f043 0304 	orr.w	r3, r3, #4
 80034a8:	6713      	str	r3, [r2, #112]	; 0x70
 80034aa:	4b5e      	ldr	r3, [pc, #376]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	4a5d      	ldr	r2, [pc, #372]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6713      	str	r3, [r2, #112]	; 0x70
 80034b6:	e00b      	b.n	80034d0 <HAL_RCC_OscConfig+0x358>
 80034b8:	4b5a      	ldr	r3, [pc, #360]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	4a59      	ldr	r2, [pc, #356]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	6713      	str	r3, [r2, #112]	; 0x70
 80034c4:	4b57      	ldr	r3, [pc, #348]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c8:	4a56      	ldr	r2, [pc, #344]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 80034ca:	f023 0304 	bic.w	r3, r3, #4
 80034ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d015      	beq.n	8003504 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d8:	f7fd fef0 	bl	80012bc <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e0:	f7fd feec 	bl	80012bc <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e0d7      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f6:	4b4b      	ldr	r3, [pc, #300]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0ee      	beq.n	80034e0 <HAL_RCC_OscConfig+0x368>
 8003502:	e014      	b.n	800352e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fd feda 	bl	80012bc <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350a:	e00a      	b.n	8003522 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fd fed6 	bl	80012bc <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e0c1      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003522:	4b40      	ldr	r3, [pc, #256]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1ee      	bne.n	800350c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d105      	bne.n	8003540 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003534:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	4a3a      	ldr	r2, [pc, #232]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 800353a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80ad 	beq.w	80036a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800354a:	4b36      	ldr	r3, [pc, #216]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b08      	cmp	r3, #8
 8003554:	d060      	beq.n	8003618 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d145      	bne.n	80035ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355e:	4b33      	ldr	r3, [pc, #204]	; (800362c <HAL_RCC_OscConfig+0x4b4>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fd feaa 	bl	80012bc <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356c:	f7fd fea6 	bl	80012bc <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e093      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	4b29      	ldr	r3, [pc, #164]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	019b      	lsls	r3, r3, #6
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	3b01      	subs	r3, #1
 80035a4:	041b      	lsls	r3, r3, #16
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	061b      	lsls	r3, r3, #24
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	071b      	lsls	r3, r3, #28
 80035b6:	491b      	ldr	r1, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x4b4>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c2:	f7fd fe7b 	bl	80012bc <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fd fe77 	bl	80012bc <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e064      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x452>
 80035e8:	e05c      	b.n	80036a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_RCC_OscConfig+0x4b4>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fd fe64 	bl	80012bc <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f8:	f7fd fe60 	bl	80012bc <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e04d      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_OscConfig+0x4ac>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x480>
 8003616:	e045      	b.n	80036a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e040      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
 8003624:	40023800 	.word	0x40023800
 8003628:	40007000 	.word	0x40007000
 800362c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003630:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <HAL_RCC_OscConfig+0x538>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d030      	beq.n	80036a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d129      	bne.n	80036a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d122      	bne.n	80036a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003666:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003668:	4293      	cmp	r3, r2
 800366a:	d119      	bne.n	80036a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	3b01      	subs	r3, #1
 800367a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d10f      	bne.n	80036a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800

080036b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e041      	b.n	800374a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd fb54 	bl	8000d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	4619      	mov	r1, r3
 80036f2:	4610      	mov	r0, r2
 80036f4:	f000 f9d8 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d001      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e04e      	b.n	800380a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a23      	ldr	r2, [pc, #140]	; (8003818 <HAL_TIM_Base_Start_IT+0xc4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d022      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x80>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003796:	d01d      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x80>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1f      	ldr	r2, [pc, #124]	; (800381c <HAL_TIM_Base_Start_IT+0xc8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d018      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x80>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <HAL_TIM_Base_Start_IT+0xcc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d013      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x80>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1c      	ldr	r2, [pc, #112]	; (8003824 <HAL_TIM_Base_Start_IT+0xd0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00e      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x80>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <HAL_TIM_Base_Start_IT+0xd4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d009      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x80>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a19      	ldr	r2, [pc, #100]	; (800382c <HAL_TIM_Base_Start_IT+0xd8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x80>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_TIM_Base_Start_IT+0xdc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d111      	bne.n	80037f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b06      	cmp	r3, #6
 80037e4:	d010      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0201 	orr.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f6:	e007      	b.n	8003808 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40010000 	.word	0x40010000
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800
 8003824:	40000c00 	.word	0x40000c00
 8003828:	40010400 	.word	0x40010400
 800382c:	40014000 	.word	0x40014000
 8003830:	40001800 	.word	0x40001800

08003834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b02      	cmp	r3, #2
 8003848:	d122      	bne.n	8003890 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b02      	cmp	r3, #2
 8003856:	d11b      	bne.n	8003890 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0202 	mvn.w	r2, #2
 8003860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8f8 	bl	8003a6c <HAL_TIM_IC_CaptureCallback>
 800387c:	e005      	b.n	800388a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f8ea 	bl	8003a58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f8fb 	bl	8003a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b04      	cmp	r3, #4
 800389c:	d122      	bne.n	80038e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d11b      	bne.n	80038e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0204 	mvn.w	r2, #4
 80038b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8ce 	bl	8003a6c <HAL_TIM_IC_CaptureCallback>
 80038d0:	e005      	b.n	80038de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f8c0 	bl	8003a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f8d1 	bl	8003a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d122      	bne.n	8003938 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d11b      	bne.n	8003938 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0208 	mvn.w	r2, #8
 8003908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2204      	movs	r2, #4
 800390e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f8a4 	bl	8003a6c <HAL_TIM_IC_CaptureCallback>
 8003924:	e005      	b.n	8003932 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f896 	bl	8003a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f8a7 	bl	8003a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b10      	cmp	r3, #16
 8003944:	d122      	bne.n	800398c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b10      	cmp	r3, #16
 8003952:	d11b      	bne.n	800398c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0210 	mvn.w	r2, #16
 800395c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2208      	movs	r2, #8
 8003962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f87a 	bl	8003a6c <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f86c 	bl	8003a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f87d 	bl	8003a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d107      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0201 	mvn.w	r2, #1
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f846 	bl	8003a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	2b80      	cmp	r3, #128	; 0x80
 80039c4:	d10e      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d0:	2b80      	cmp	r3, #128	; 0x80
 80039d2:	d107      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f988 	bl	8003cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ee:	2b40      	cmp	r3, #64	; 0x40
 80039f0:	d10e      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d107      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f842 	bl	8003a94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d10e      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d107      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0220 	mvn.w	r2, #32
 8003a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f952 	bl	8003ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a40      	ldr	r2, [pc, #256]	; (8003bbc <TIM_Base_SetConfig+0x114>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac6:	d00f      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a3d      	ldr	r2, [pc, #244]	; (8003bc0 <TIM_Base_SetConfig+0x118>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a3c      	ldr	r2, [pc, #240]	; (8003bc4 <TIM_Base_SetConfig+0x11c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a3b      	ldr	r2, [pc, #236]	; (8003bc8 <TIM_Base_SetConfig+0x120>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a3a      	ldr	r2, [pc, #232]	; (8003bcc <TIM_Base_SetConfig+0x124>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d108      	bne.n	8003afa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2f      	ldr	r2, [pc, #188]	; (8003bbc <TIM_Base_SetConfig+0x114>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d02b      	beq.n	8003b5a <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b08:	d027      	beq.n	8003b5a <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2c      	ldr	r2, [pc, #176]	; (8003bc0 <TIM_Base_SetConfig+0x118>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d023      	beq.n	8003b5a <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2b      	ldr	r2, [pc, #172]	; (8003bc4 <TIM_Base_SetConfig+0x11c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01f      	beq.n	8003b5a <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a2a      	ldr	r2, [pc, #168]	; (8003bc8 <TIM_Base_SetConfig+0x120>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01b      	beq.n	8003b5a <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a29      	ldr	r2, [pc, #164]	; (8003bcc <TIM_Base_SetConfig+0x124>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d017      	beq.n	8003b5a <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a28      	ldr	r2, [pc, #160]	; (8003bd0 <TIM_Base_SetConfig+0x128>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a27      	ldr	r2, [pc, #156]	; (8003bd4 <TIM_Base_SetConfig+0x12c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00f      	beq.n	8003b5a <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a26      	ldr	r2, [pc, #152]	; (8003bd8 <TIM_Base_SetConfig+0x130>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00b      	beq.n	8003b5a <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a25      	ldr	r2, [pc, #148]	; (8003bdc <TIM_Base_SetConfig+0x134>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d007      	beq.n	8003b5a <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <TIM_Base_SetConfig+0x138>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a23      	ldr	r2, [pc, #140]	; (8003be4 <TIM_Base_SetConfig+0x13c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d108      	bne.n	8003b6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <TIM_Base_SetConfig+0x114>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_Base_SetConfig+0xf8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a0c      	ldr	r2, [pc, #48]	; (8003bcc <TIM_Base_SetConfig+0x124>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d103      	bne.n	8003ba8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	615a      	str	r2, [r3, #20]
}
 8003bae:	bf00      	nop
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40010000 	.word	0x40010000
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	40000800 	.word	0x40000800
 8003bc8:	40000c00 	.word	0x40000c00
 8003bcc:	40010400 	.word	0x40010400
 8003bd0:	40014000 	.word	0x40014000
 8003bd4:	40014400 	.word	0x40014400
 8003bd8:	40014800 	.word	0x40014800
 8003bdc:	40001800 	.word	0x40001800
 8003be0:	40001c00 	.word	0x40001c00
 8003be4:	40002000 	.word	0x40002000

08003be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e05a      	b.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d022      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4c:	d01d      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d018      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1a      	ldr	r2, [pc, #104]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a17      	ldr	r2, [pc, #92]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a15      	ldr	r2, [pc, #84]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10c      	bne.n	8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40010400 	.word	0x40010400
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40001800 	.word	0x40001800

08003ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e03f      	b.n	8003d9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd f870 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2224      	movs	r2, #36	; 0x24
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f829 	bl	8003da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da8:	b0c0      	sub	sp, #256	; 0x100
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc0:	68d9      	ldr	r1, [r3, #12]
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	ea40 0301 	orr.w	r3, r0, r1
 8003dcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dfc:	f021 010c 	bic.w	r1, r1, #12
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1e:	6999      	ldr	r1, [r3, #24]
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	ea40 0301 	orr.w	r3, r0, r1
 8003e2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4b8f      	ldr	r3, [pc, #572]	; (8004070 <UART_SetConfig+0x2cc>)
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d005      	beq.n	8003e44 <UART_SetConfig+0xa0>
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b8d      	ldr	r3, [pc, #564]	; (8004074 <UART_SetConfig+0x2d0>)
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d104      	bne.n	8003e4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e44:	f7fe fc2a 	bl	800269c <HAL_RCC_GetPCLK2Freq>
 8003e48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e4c:	e003      	b.n	8003e56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e4e:	f7fe fc11 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 8003e52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e60:	f040 810c 	bne.w	800407c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e76:	4622      	mov	r2, r4
 8003e78:	462b      	mov	r3, r5
 8003e7a:	1891      	adds	r1, r2, r2
 8003e7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e7e:	415b      	adcs	r3, r3
 8003e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e86:	4621      	mov	r1, r4
 8003e88:	eb12 0801 	adds.w	r8, r2, r1
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	eb43 0901 	adc.w	r9, r3, r1
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ea6:	4690      	mov	r8, r2
 8003ea8:	4699      	mov	r9, r3
 8003eaa:	4623      	mov	r3, r4
 8003eac:	eb18 0303 	adds.w	r3, r8, r3
 8003eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003eb4:	462b      	mov	r3, r5
 8003eb6:	eb49 0303 	adc.w	r3, r9, r3
 8003eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003eca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ece:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	18db      	adds	r3, r3, r3
 8003ed6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ed8:	4613      	mov	r3, r2
 8003eda:	eb42 0303 	adc.w	r3, r2, r3
 8003ede:	657b      	str	r3, [r7, #84]	; 0x54
 8003ee0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ee4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ee8:	f7fc f98c 	bl	8000204 <__aeabi_uldivmod>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4b61      	ldr	r3, [pc, #388]	; (8004078 <UART_SetConfig+0x2d4>)
 8003ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	011c      	lsls	r4, r3, #4
 8003efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	464b      	mov	r3, r9
 8003f10:	1891      	adds	r1, r2, r2
 8003f12:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f14:	415b      	adcs	r3, r3
 8003f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f22:	4649      	mov	r1, r9
 8003f24:	eb43 0b01 	adc.w	fp, r3, r1
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f3c:	4692      	mov	sl, r2
 8003f3e:	469b      	mov	fp, r3
 8003f40:	4643      	mov	r3, r8
 8003f42:	eb1a 0303 	adds.w	r3, sl, r3
 8003f46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	18db      	adds	r3, r3, r3
 8003f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f6e:	4613      	mov	r3, r2
 8003f70:	eb42 0303 	adc.w	r3, r2, r3
 8003f74:	647b      	str	r3, [r7, #68]	; 0x44
 8003f76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f7e:	f7fc f941 	bl	8000204 <__aeabi_uldivmod>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <UART_SetConfig+0x2d4>)
 8003f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	2264      	movs	r2, #100	; 0x64
 8003f92:	fb02 f303 	mul.w	r3, r2, r3
 8003f96:	1acb      	subs	r3, r1, r3
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f9e:	4b36      	ldr	r3, [pc, #216]	; (8004078 <UART_SetConfig+0x2d4>)
 8003fa0:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fac:	441c      	add	r4, r3
 8003fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fc0:	4642      	mov	r2, r8
 8003fc2:	464b      	mov	r3, r9
 8003fc4:	1891      	adds	r1, r2, r2
 8003fc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fc8:	415b      	adcs	r3, r3
 8003fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fd0:	4641      	mov	r1, r8
 8003fd2:	1851      	adds	r1, r2, r1
 8003fd4:	6339      	str	r1, [r7, #48]	; 0x30
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	414b      	adcs	r3, r1
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fe8:	4659      	mov	r1, fp
 8003fea:	00cb      	lsls	r3, r1, #3
 8003fec:	4651      	mov	r1, sl
 8003fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ff2:	4651      	mov	r1, sl
 8003ff4:	00ca      	lsls	r2, r1, #3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	189b      	adds	r3, r3, r2
 8004000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004004:	464b      	mov	r3, r9
 8004006:	460a      	mov	r2, r1
 8004008:	eb42 0303 	adc.w	r3, r2, r3
 800400c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800401c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004020:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004024:	460b      	mov	r3, r1
 8004026:	18db      	adds	r3, r3, r3
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
 800402a:	4613      	mov	r3, r2
 800402c:	eb42 0303 	adc.w	r3, r2, r3
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004032:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004036:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800403a:	f7fc f8e3 	bl	8000204 <__aeabi_uldivmod>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <UART_SetConfig+0x2d4>)
 8004044:	fba3 1302 	umull	r1, r3, r3, r2
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	2164      	movs	r1, #100	; 0x64
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	3332      	adds	r3, #50	; 0x32
 8004056:	4a08      	ldr	r2, [pc, #32]	; (8004078 <UART_SetConfig+0x2d4>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	f003 0207 	and.w	r2, r3, #7
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4422      	add	r2, r4
 800406a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800406c:	e105      	b.n	800427a <UART_SetConfig+0x4d6>
 800406e:	bf00      	nop
 8004070:	40011000 	.word	0x40011000
 8004074:	40011400 	.word	0x40011400
 8004078:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800407c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004080:	2200      	movs	r2, #0
 8004082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004086:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800408a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800408e:	4642      	mov	r2, r8
 8004090:	464b      	mov	r3, r9
 8004092:	1891      	adds	r1, r2, r2
 8004094:	6239      	str	r1, [r7, #32]
 8004096:	415b      	adcs	r3, r3
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
 800409a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800409e:	4641      	mov	r1, r8
 80040a0:	1854      	adds	r4, r2, r1
 80040a2:	4649      	mov	r1, r9
 80040a4:	eb43 0501 	adc.w	r5, r3, r1
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	00eb      	lsls	r3, r5, #3
 80040b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b6:	00e2      	lsls	r2, r4, #3
 80040b8:	4614      	mov	r4, r2
 80040ba:	461d      	mov	r5, r3
 80040bc:	4643      	mov	r3, r8
 80040be:	18e3      	adds	r3, r4, r3
 80040c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040c4:	464b      	mov	r3, r9
 80040c6:	eb45 0303 	adc.w	r3, r5, r3
 80040ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040ea:	4629      	mov	r1, r5
 80040ec:	008b      	lsls	r3, r1, #2
 80040ee:	4621      	mov	r1, r4
 80040f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040f4:	4621      	mov	r1, r4
 80040f6:	008a      	lsls	r2, r1, #2
 80040f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040fc:	f7fc f882 	bl	8000204 <__aeabi_uldivmod>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4b60      	ldr	r3, [pc, #384]	; (8004288 <UART_SetConfig+0x4e4>)
 8004106:	fba3 2302 	umull	r2, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	011c      	lsls	r4, r3, #4
 800410e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004112:	2200      	movs	r2, #0
 8004114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004118:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800411c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004120:	4642      	mov	r2, r8
 8004122:	464b      	mov	r3, r9
 8004124:	1891      	adds	r1, r2, r2
 8004126:	61b9      	str	r1, [r7, #24]
 8004128:	415b      	adcs	r3, r3
 800412a:	61fb      	str	r3, [r7, #28]
 800412c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004130:	4641      	mov	r1, r8
 8004132:	1851      	adds	r1, r2, r1
 8004134:	6139      	str	r1, [r7, #16]
 8004136:	4649      	mov	r1, r9
 8004138:	414b      	adcs	r3, r1
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004148:	4659      	mov	r1, fp
 800414a:	00cb      	lsls	r3, r1, #3
 800414c:	4651      	mov	r1, sl
 800414e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004152:	4651      	mov	r1, sl
 8004154:	00ca      	lsls	r2, r1, #3
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	4603      	mov	r3, r0
 800415c:	4642      	mov	r2, r8
 800415e:	189b      	adds	r3, r3, r2
 8004160:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004164:	464b      	mov	r3, r9
 8004166:	460a      	mov	r2, r1
 8004168:	eb42 0303 	adc.w	r3, r2, r3
 800416c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	67bb      	str	r3, [r7, #120]	; 0x78
 800417a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004188:	4649      	mov	r1, r9
 800418a:	008b      	lsls	r3, r1, #2
 800418c:	4641      	mov	r1, r8
 800418e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004192:	4641      	mov	r1, r8
 8004194:	008a      	lsls	r2, r1, #2
 8004196:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800419a:	f7fc f833 	bl	8000204 <__aeabi_uldivmod>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4b39      	ldr	r3, [pc, #228]	; (8004288 <UART_SetConfig+0x4e4>)
 80041a4:	fba3 1302 	umull	r1, r3, r3, r2
 80041a8:	095b      	lsrs	r3, r3, #5
 80041aa:	2164      	movs	r1, #100	; 0x64
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	3332      	adds	r3, #50	; 0x32
 80041b6:	4a34      	ldr	r2, [pc, #208]	; (8004288 <UART_SetConfig+0x4e4>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c2:	441c      	add	r4, r3
 80041c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c8:	2200      	movs	r2, #0
 80041ca:	673b      	str	r3, [r7, #112]	; 0x70
 80041cc:	677a      	str	r2, [r7, #116]	; 0x74
 80041ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041d2:	4642      	mov	r2, r8
 80041d4:	464b      	mov	r3, r9
 80041d6:	1891      	adds	r1, r2, r2
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	415b      	adcs	r3, r3
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041e2:	4641      	mov	r1, r8
 80041e4:	1851      	adds	r1, r2, r1
 80041e6:	6039      	str	r1, [r7, #0]
 80041e8:	4649      	mov	r1, r9
 80041ea:	414b      	adcs	r3, r1
 80041ec:	607b      	str	r3, [r7, #4]
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041fa:	4659      	mov	r1, fp
 80041fc:	00cb      	lsls	r3, r1, #3
 80041fe:	4651      	mov	r1, sl
 8004200:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004204:	4651      	mov	r1, sl
 8004206:	00ca      	lsls	r2, r1, #3
 8004208:	4610      	mov	r0, r2
 800420a:	4619      	mov	r1, r3
 800420c:	4603      	mov	r3, r0
 800420e:	4642      	mov	r2, r8
 8004210:	189b      	adds	r3, r3, r2
 8004212:	66bb      	str	r3, [r7, #104]	; 0x68
 8004214:	464b      	mov	r3, r9
 8004216:	460a      	mov	r2, r1
 8004218:	eb42 0303 	adc.w	r3, r2, r3
 800421c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	663b      	str	r3, [r7, #96]	; 0x60
 8004228:	667a      	str	r2, [r7, #100]	; 0x64
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004236:	4649      	mov	r1, r9
 8004238:	008b      	lsls	r3, r1, #2
 800423a:	4641      	mov	r1, r8
 800423c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004240:	4641      	mov	r1, r8
 8004242:	008a      	lsls	r2, r1, #2
 8004244:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004248:	f7fb ffdc 	bl	8000204 <__aeabi_uldivmod>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <UART_SetConfig+0x4e4>)
 8004252:	fba3 1302 	umull	r1, r3, r3, r2
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	2164      	movs	r1, #100	; 0x64
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	3332      	adds	r3, #50	; 0x32
 8004264:	4a08      	ldr	r2, [pc, #32]	; (8004288 <UART_SetConfig+0x4e4>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	f003 020f 	and.w	r2, r3, #15
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4422      	add	r2, r4
 8004278:	609a      	str	r2, [r3, #8]
}
 800427a:	bf00      	nop
 800427c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004280:	46bd      	mov	sp, r7
 8004282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004286:	bf00      	nop
 8004288:	51eb851f 	.word	0x51eb851f

0800428c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800428c:	b084      	sub	sp, #16
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	f107 001c 	add.w	r0, r7, #28
 800429a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d122      	bne.n	80042ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80042b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d105      	bne.n	80042de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fa9c 	bl	800481c <USB_CoreReset>
 80042e4:	4603      	mov	r3, r0
 80042e6:	73fb      	strb	r3, [r7, #15]
 80042e8:	e01a      	b.n	8004320 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fa90 	bl	800481c <USB_CoreReset>
 80042fc:	4603      	mov	r3, r0
 80042fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	639a      	str	r2, [r3, #56]	; 0x38
 8004312:	e005      	b.n	8004320 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	2b01      	cmp	r3, #1
 8004324:	d10b      	bne.n	800433e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f043 0206 	orr.w	r2, r3, #6
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800433e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800434a:	b004      	add	sp, #16
 800434c:	4770      	bx	lr

0800434e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f023 0201 	bic.w	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d115      	bne.n	80043be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800439e:	2001      	movs	r0, #1
 80043a0:	f7fc ff98 	bl	80012d4 <HAL_Delay>
      ms++;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3301      	adds	r3, #1
 80043a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fa28 	bl	8004800 <USB_GetMode>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d01e      	beq.n	80043f4 <USB_SetCurrentMode+0x84>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b31      	cmp	r3, #49	; 0x31
 80043ba:	d9f0      	bls.n	800439e <USB_SetCurrentMode+0x2e>
 80043bc:	e01a      	b.n	80043f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d115      	bne.n	80043f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043d0:	2001      	movs	r0, #1
 80043d2:	f7fc ff7f 	bl	80012d4 <HAL_Delay>
      ms++;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3301      	adds	r3, #1
 80043da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fa0f 	bl	8004800 <USB_GetMode>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <USB_SetCurrentMode+0x84>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b31      	cmp	r3, #49	; 0x31
 80043ec:	d9f0      	bls.n	80043d0 <USB_SetCurrentMode+0x60>
 80043ee:	e001      	b.n	80043f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e005      	b.n	8004400 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b32      	cmp	r3, #50	; 0x32
 80043f8:	d101      	bne.n	80043fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004408:	b084      	sub	sp, #16
 800440a:	b580      	push	{r7, lr}
 800440c:	b086      	sub	sp, #24
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004422:	2300      	movs	r3, #0
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	e009      	b.n	800443c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	3340      	adds	r3, #64	; 0x40
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	2200      	movs	r2, #0
 8004434:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	3301      	adds	r3, #1
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b0e      	cmp	r3, #14
 8004440:	d9f2      	bls.n	8004428 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d11c      	bne.n	8004482 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004456:	f043 0302 	orr.w	r3, r3, #2
 800445a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e005      	b.n	800448e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004494:	461a      	mov	r2, r3
 8004496:	2300      	movs	r3, #0
 8004498:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a0:	4619      	mov	r1, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a8:	461a      	mov	r2, r3
 80044aa:	680b      	ldr	r3, [r1, #0]
 80044ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d10c      	bne.n	80044ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d104      	bne.n	80044c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044ba:	2100      	movs	r1, #0
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f965 	bl	800478c <USB_SetDevSpeed>
 80044c2:	e008      	b.n	80044d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044c4:	2101      	movs	r1, #1
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f960 	bl	800478c <USB_SetDevSpeed>
 80044cc:	e003      	b.n	80044d6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044ce:	2103      	movs	r1, #3
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f95b 	bl	800478c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044d6:	2110      	movs	r1, #16
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f8f3 	bl	80046c4 <USB_FlushTxFifo>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f91f 	bl	800472c <USB_FlushRxFifo>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fe:	461a      	mov	r2, r3
 8004500:	2300      	movs	r3, #0
 8004502:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450a:	461a      	mov	r2, r3
 800450c:	2300      	movs	r3, #0
 800450e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004516:	461a      	mov	r2, r3
 8004518:	2300      	movs	r3, #0
 800451a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800451c:	2300      	movs	r3, #0
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	e043      	b.n	80045aa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004538:	d118      	bne.n	800456c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454c:	461a      	mov	r2, r3
 800454e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	e013      	b.n	800457e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004562:	461a      	mov	r2, r3
 8004564:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e008      	b.n	800457e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004578:	461a      	mov	r2, r3
 800457a:	2300      	movs	r3, #0
 800457c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	461a      	mov	r2, r3
 800458c:	2300      	movs	r3, #0
 800458e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459c:	461a      	mov	r2, r3
 800459e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	3301      	adds	r3, #1
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d3b7      	bcc.n	8004522 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	e043      	b.n	8004640 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045ce:	d118      	bne.n	8004602 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e2:	461a      	mov	r2, r3
 80045e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e013      	b.n	8004614 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f8:	461a      	mov	r2, r3
 80045fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	e008      	b.n	8004614 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460e:	461a      	mov	r2, r3
 8004610:	2300      	movs	r3, #0
 8004612:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004620:	461a      	mov	r2, r3
 8004622:	2300      	movs	r3, #0
 8004624:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004632:	461a      	mov	r2, r3
 8004634:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004638:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	3301      	adds	r3, #1
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	429a      	cmp	r2, r3
 8004646:	d3b7      	bcc.n	80045b8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800465a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004668:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	2b00      	cmp	r3, #0
 800466e:	d105      	bne.n	800467c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f043 0210 	orr.w	r2, r3, #16
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699a      	ldr	r2, [r3, #24]
 8004680:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <USB_DevInit+0x2b8>)
 8004682:	4313      	orrs	r3, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f043 0208 	orr.w	r2, r3, #8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800469a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d107      	bne.n	80046b0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046a8:	f043 0304 	orr.w	r3, r3, #4
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046bc:	b004      	add	sp, #16
 80046be:	4770      	bx	lr
 80046c0:	803c3800 	.word	0x803c3800

080046c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3301      	adds	r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4a13      	ldr	r2, [pc, #76]	; (8004728 <USB_FlushTxFifo+0x64>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d901      	bls.n	80046e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e01b      	b.n	800471c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	daf2      	bge.n	80046d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	019b      	lsls	r3, r3, #6
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3301      	adds	r3, #1
 8004700:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a08      	ldr	r2, [pc, #32]	; (8004728 <USB_FlushTxFifo+0x64>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e006      	b.n	800471c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b20      	cmp	r3, #32
 8004718:	d0f0      	beq.n	80046fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	00030d40 	.word	0x00030d40

0800472c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3301      	adds	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a11      	ldr	r2, [pc, #68]	; (8004788 <USB_FlushRxFifo+0x5c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e018      	b.n	800477c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	daf2      	bge.n	8004738 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2210      	movs	r2, #16
 800475a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3301      	adds	r3, #1
 8004760:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4a08      	ldr	r2, [pc, #32]	; (8004788 <USB_FlushRxFifo+0x5c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e006      	b.n	800477c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	2b10      	cmp	r3, #16
 8004778:	d0f0      	beq.n	800475c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	00030d40 	.word	0x00030d40

0800478c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	68f9      	ldr	r1, [r7, #12]
 80047a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047be:	b480      	push	{r7}
 80047c0:	b085      	sub	sp, #20
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047d8:	f023 0303 	bic.w	r3, r3, #3
 80047dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ec:	f043 0302 	orr.w	r3, r3, #2
 80047f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	f003 0301 	and.w	r3, r3, #1
}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3301      	adds	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4a13      	ldr	r2, [pc, #76]	; (8004880 <USB_CoreReset+0x64>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e01b      	b.n	8004872 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	daf2      	bge.n	8004828 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f043 0201 	orr.w	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3301      	adds	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4a09      	ldr	r2, [pc, #36]	; (8004880 <USB_CoreReset+0x64>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d901      	bls.n	8004864 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e006      	b.n	8004872 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b01      	cmp	r3, #1
 800486e:	d0f0      	beq.n	8004852 <USB_CoreReset+0x36>

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	00030d40 	.word	0x00030d40

08004884 <arm_fir_init_f32>:
 8004884:	b538      	push	{r3, r4, r5, lr}
 8004886:	9c04      	ldr	r4, [sp, #16]
 8004888:	6082      	str	r2, [r0, #8]
 800488a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800488e:	3c01      	subs	r4, #1
 8004890:	440c      	add	r4, r1
 8004892:	8001      	strh	r1, [r0, #0]
 8004894:	4605      	mov	r5, r0
 8004896:	00a2      	lsls	r2, r4, #2
 8004898:	4618      	mov	r0, r3
 800489a:	2100      	movs	r1, #0
 800489c:	f000 faa6 	bl	8004dec <memset>
 80048a0:	6068      	str	r0, [r5, #4]
 80048a2:	bd38      	pop	{r3, r4, r5, pc}

080048a4 <arm_fir_f32>:
 80048a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a8:	ed2d 8b10 	vpush	{d8-d15}
 80048ac:	b08b      	sub	sp, #44	; 0x2c
 80048ae:	f8b0 8000 	ldrh.w	r8, [r0]
 80048b2:	9003      	str	r0, [sp, #12]
 80048b4:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 80048b8:	461e      	mov	r6, r3
 80048ba:	9304      	str	r3, [sp, #16]
 80048bc:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
 80048c0:	3b01      	subs	r3, #1
 80048c2:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 80048c6:	08f3      	lsrs	r3, r6, #3
 80048c8:	9002      	str	r0, [sp, #8]
 80048ca:	9500      	str	r5, [sp, #0]
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	f000 81f1 	beq.w	8004cb4 <arm_fir_f32+0x410>
 80048d2:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 80048d6:	f100 0620 	add.w	r6, r0, #32
 80048da:	9405      	str	r4, [sp, #20]
 80048dc:	0164      	lsls	r4, r4, #5
 80048de:	4420      	add	r0, r4
 80048e0:	f008 0a07 	and.w	sl, r8, #7
 80048e4:	9607      	str	r6, [sp, #28]
 80048e6:	9006      	str	r0, [sp, #24]
 80048e8:	469c      	mov	ip, r3
 80048ea:	4650      	mov	r0, sl
 80048ec:	4623      	mov	r3, r4
 80048ee:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80048f2:	f8cd 8020 	str.w	r8, [sp, #32]
 80048f6:	1937      	adds	r7, r6, r4
 80048f8:	f109 0b1c 	add.w	fp, r9, #28
 80048fc:	f8dd e014 	ldr.w	lr, [sp, #20]
 8004900:	9209      	str	r2, [sp, #36]	; 0x24
 8004902:	f8cd 9014 	str.w	r9, [sp, #20]
 8004906:	f101 0620 	add.w	r6, r1, #32
 800490a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800490e:	9106      	str	r1, [sp, #24]
 8004910:	3520      	adds	r5, #32
 8004912:	f102 0420 	add.w	r4, r2, #32
 8004916:	4698      	mov	r8, r3
 8004918:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800491c:	f845 3c20 	str.w	r3, [r5, #-32]
 8004920:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8004924:	f845 3c1c 	str.w	r3, [r5, #-28]
 8004928:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800492c:	f845 3c18 	str.w	r3, [r5, #-24]
 8004930:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8004934:	f845 3c14 	str.w	r3, [r5, #-20]
 8004938:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800493c:	f845 3c10 	str.w	r3, [r5, #-16]
 8004940:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8004944:	f845 3c0c 	str.w	r3, [r5, #-12]
 8004948:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800494c:	f845 3c08 	str.w	r3, [r5, #-8]
 8004950:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004954:	f845 3c04 	str.w	r3, [r5, #-4]
 8004958:	ed1b 2a07 	vldr	s4, [fp, #-28]	; 0xffffffe4
 800495c:	ed5b 1a06 	vldr	s3, [fp, #-24]	; 0xffffffe8
 8004960:	ed1b 1a05 	vldr	s2, [fp, #-20]	; 0xffffffec
 8004964:	ed5b 0a04 	vldr	s1, [fp, #-16]
 8004968:	ed1b 0a03 	vldr	s0, [fp, #-12]
 800496c:	ed1b 8a02 	vldr	s16, [fp, #-8]
 8004970:	ed5b 8a01 	vldr	s17, [fp, #-4]
 8004974:	eddf 6af5 	vldr	s13, [pc, #980]	; 8004d4c <arm_fir_f32+0x4a8>
 8004978:	465a      	mov	r2, fp
 800497a:	f1be 0f00 	cmp.w	lr, #0
 800497e:	f000 81fe 	beq.w	8004d7e <arm_fir_f32+0x4da>
 8004982:	f10b 0120 	add.w	r1, fp, #32
 8004986:	eef0 ba66 	vmov.f32	s23, s13
 800498a:	eeb0 6a66 	vmov.f32	s12, s13
 800498e:	eeb0 9a66 	vmov.f32	s18, s13
 8004992:	eef0 9a66 	vmov.f32	s19, s13
 8004996:	eeb0 aa66 	vmov.f32	s20, s13
 800499a:	eef0 aa66 	vmov.f32	s21, s13
 800499e:	eeb0 ba66 	vmov.f32	s22, s13
 80049a2:	460a      	mov	r2, r1
 80049a4:	4653      	mov	r3, sl
 80049a6:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 80049aa:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 80049ae:	ed53 ea07 	vldr	s29, [r3, #-28]	; 0xffffffe4
 80049b2:	ed13 ea06 	vldr	s28, [r3, #-24]	; 0xffffffe8
 80049b6:	ed53 da05 	vldr	s27, [r3, #-20]	; 0xffffffec
 80049ba:	ed53 ca04 	vldr	s25, [r3, #-16]
 80049be:	ed53 2a03 	vldr	s5, [r3, #-12]
 80049c2:	ed13 4a02 	vldr	s8, [r3, #-8]
 80049c6:	ed13 5a01 	vldr	s10, [r3, #-4]
 80049ca:	ee67 fa02 	vmul.f32	s31, s14, s4
 80049ce:	ee27 da21 	vmul.f32	s26, s14, s3
 80049d2:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
 80049d6:	ee27 ca01 	vmul.f32	s24, s14, s2
 80049da:	ee27 3a20 	vmul.f32	s6, s14, s1
 80049de:	ee67 3a00 	vmul.f32	s7, s14, s0
 80049e2:	ee67 5a08 	vmul.f32	s11, s14, s16
 80049e6:	ee27 fa28 	vmul.f32	s30, s14, s17
 80049ea:	ee67 7a24 	vmul.f32	s15, s14, s9
 80049ee:	ee3f ba8b 	vadd.f32	s22, s31, s22
 80049f2:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80049f6:	ee6e faa1 	vmul.f32	s31, s29, s3
 80049fa:	ee2e da81 	vmul.f32	s26, s29, s2
 80049fe:	ed52 1a06 	vldr	s3, [r2, #-24]	; 0xffffffe8
 8004a02:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004a06:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004a0a:	ee2e caa0 	vmul.f32	s24, s29, s1
 8004a0e:	ee2e 3a80 	vmul.f32	s6, s29, s0
 8004a12:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004a16:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004a1a:	ee6e 3a88 	vmul.f32	s7, s29, s16
 8004a1e:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 8004a22:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2a:	ee24 faae 	vmul.f32	s30, s9, s29
 8004a2e:	ee6e ea82 	vmul.f32	s29, s29, s4
 8004a32:	ee2e 7a01 	vmul.f32	s14, s28, s2
 8004a36:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8004a3a:	ed12 1a05 	vldr	s2, [r2, #-20]	; 0xffffffec
 8004a3e:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8004a42:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004a46:	ee2e da20 	vmul.f32	s26, s28, s1
 8004a4a:	ee2e ca00 	vmul.f32	s24, s28, s0
 8004a4e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004a52:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004a56:	ee2e 3a08 	vmul.f32	s6, s28, s16
 8004a5a:	ee6e 3a28 	vmul.f32	s7, s28, s17
 8004a5e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004a62:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004a66:	ee64 5a8e 	vmul.f32	s11, s9, s28
 8004a6a:	ee22 fa0e 	vmul.f32	s30, s4, s28
 8004a6e:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8004a72:	ee2e ea21 	vmul.f32	s28, s28, s3
 8004a76:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 8004a7a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8004a7e:	ed52 0a04 	vldr	s1, [r2, #-16]
 8004a82:	ee2d da80 	vmul.f32	s26, s27, s0
 8004a86:	ee37 ba0b 	vadd.f32	s22, s14, s22
 8004a8a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004a8e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004a92:	ee2d ca88 	vmul.f32	s24, s27, s16
 8004a96:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 8004a9a:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004a9e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004aa2:	ee64 3aad 	vmul.f32	s7, s9, s27
 8004aa6:	ee62 5a2d 	vmul.f32	s11, s4, s27
 8004aaa:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004aae:	ee7e 7a27 	vadd.f32	s15, s28, s15
 8004ab2:	ee21 faad 	vmul.f32	s30, s3, s27
 8004ab6:	ee6d da81 	vmul.f32	s27, s27, s2
 8004aba:	ee6c fa80 	vmul.f32	s31, s25, s0
 8004abe:	ee36 ba8b 	vadd.f32	s22, s13, s22
 8004ac2:	ed12 0a03 	vldr	s0, [r2, #-12]
 8004ac6:	ee3d da2a 	vadd.f32	s26, s26, s21
 8004aca:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004ace:	ee6c aa88 	vmul.f32	s21, s25, s16
 8004ad2:	ee2c caa8 	vmul.f32	s24, s25, s17
 8004ad6:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004ada:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004ade:	ee24 3aac 	vmul.f32	s6, s9, s25
 8004ae2:	ee62 3a2c 	vmul.f32	s7, s4, s25
 8004ae6:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004aea:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004aee:	ee61 5aac 	vmul.f32	s11, s3, s25
 8004af2:	ee21 fa2c 	vmul.f32	s30, s2, s25
 8004af6:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8004afa:	ee6c caa0 	vmul.f32	s25, s25, s1
 8004afe:	ee62 ea88 	vmul.f32	s29, s5, s16
 8004b02:	ee3a da8d 	vadd.f32	s26, s21, s26
 8004b06:	ed12 8a02 	vldr	s16, [r2, #-8]
 8004b0a:	ee62 aaa8 	vmul.f32	s21, s5, s17
 8004b0e:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8004b12:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004b16:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004b1a:	ee24 caa2 	vmul.f32	s24, s9, s5
 8004b1e:	ee22 3a22 	vmul.f32	s6, s4, s5
 8004b22:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004b26:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004b2a:	ee61 3aa2 	vmul.f32	s7, s3, s5
 8004b2e:	ee61 5a22 	vmul.f32	s11, s2, s5
 8004b32:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004b36:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8004b3a:	ee20 faa2 	vmul.f32	s30, s1, s5
 8004b3e:	ee62 2a80 	vmul.f32	s5, s5, s0
 8004b42:	ee7e fa8b 	vadd.f32	s31, s29, s22
 8004b46:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8004b4a:	ee24 ba28 	vmul.f32	s22, s8, s17
 8004b4e:	ee7a aa8d 	vadd.f32	s21, s21, s26
 8004b52:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004b56:	ee24 da84 	vmul.f32	s26, s9, s8
 8004b5a:	ee22 ca04 	vmul.f32	s24, s4, s8
 8004b5e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004b62:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004b66:	ee21 3a84 	vmul.f32	s6, s3, s8
 8004b6a:	ee61 3a04 	vmul.f32	s7, s2, s8
 8004b6e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004b72:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004b76:	ee60 5a84 	vmul.f32	s11, s1, s8
 8004b7a:	ee20 7a04 	vmul.f32	s14, s0, s8
 8004b7e:	ee64 6a08 	vmul.f32	s13, s8, s16
 8004b82:	ed52 8a01 	vldr	s17, [r2, #-4]
 8004b86:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004b8a:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004b8e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004b92:	ee37 7a2b 	vadd.f32	s14, s14, s23
 8004b96:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004b9a:	ee3b ba2f 	vadd.f32	s22, s22, s31
 8004b9e:	ee64 4a85 	vmul.f32	s9, s9, s10
 8004ba2:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8004ba6:	ee22 4a05 	vmul.f32	s8, s4, s10
 8004baa:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004bae:	ee61 2a85 	vmul.f32	s5, s3, s10
 8004bb2:	ee21 3a05 	vmul.f32	s6, s2, s10
 8004bb6:	ee60 3a85 	vmul.f32	s7, s1, s10
 8004bba:	ee60 5a05 	vmul.f32	s11, s0, s10
 8004bbe:	ee68 ba05 	vmul.f32	s23, s16, s10
 8004bc2:	ee65 7a28 	vmul.f32	s15, s10, s17
 8004bc6:	3320      	adds	r3, #32
 8004bc8:	429f      	cmp	r7, r3
 8004bca:	ee34 ba8b 	vadd.f32	s22, s9, s22
 8004bce:	ee74 aa2a 	vadd.f32	s21, s8, s21
 8004bd2:	ee32 aa8a 	vadd.f32	s20, s5, s20
 8004bd6:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004bda:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004bde:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004be2:	ee7b ba87 	vadd.f32	s23, s23, s14
 8004be6:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8004bea:	f102 0220 	add.w	r2, r2, #32
 8004bee:	f47f aeda 	bne.w	80049a6 <arm_fir_f32+0x102>
 8004bf2:	eb0b 0208 	add.w	r2, fp, r8
 8004bf6:	46cb      	mov	fp, r9
 8004bf8:	b3a0      	cbz	r0, 8004c64 <arm_fir_f32+0x3c0>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	ecfb 7a01 	vldmia	fp!, {s15}
 8004c00:	ecf2 5a01 	vldmia	r2!, {s11}
 8004c04:	ee27 2a82 	vmul.f32	s4, s15, s4
 8004c08:	ee67 2aa1 	vmul.f32	s5, s15, s3
 8004c0c:	ee27 3a81 	vmul.f32	s6, s15, s2
 8004c10:	ee67 3aa0 	vmul.f32	s7, s15, s1
 8004c14:	ee27 4a80 	vmul.f32	s8, s15, s0
 8004c18:	ee67 4a88 	vmul.f32	s9, s15, s16
 8004c1c:	ee27 5aa8 	vmul.f32	s10, s15, s17
 8004c20:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004c24:	3b01      	subs	r3, #1
 8004c26:	ee3b ba02 	vadd.f32	s22, s22, s4
 8004c2a:	ee7a aaa2 	vadd.f32	s21, s21, s5
 8004c2e:	eeb0 2a61 	vmov.f32	s4, s3
 8004c32:	ee3a aa03 	vadd.f32	s20, s20, s6
 8004c36:	eef0 1a41 	vmov.f32	s3, s2
 8004c3a:	ee79 9aa3 	vadd.f32	s19, s19, s7
 8004c3e:	eeb0 1a60 	vmov.f32	s2, s1
 8004c42:	ee39 9a04 	vadd.f32	s18, s18, s8
 8004c46:	eef0 0a40 	vmov.f32	s1, s0
 8004c4a:	ee36 6a24 	vadd.f32	s12, s12, s9
 8004c4e:	eeb0 0a48 	vmov.f32	s0, s16
 8004c52:	ee7b ba85 	vadd.f32	s23, s23, s10
 8004c56:	eeb0 8a68 	vmov.f32	s16, s17
 8004c5a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004c5e:	eef0 8a65 	vmov.f32	s17, s11
 8004c62:	d1cb      	bne.n	8004bfc <arm_fir_f32+0x358>
 8004c64:	f1bc 0c01 	subs.w	ip, ip, #1
 8004c68:	ed04 ba08 	vstr	s22, [r4, #-32]	; 0xffffffe0
 8004c6c:	ed44 aa07 	vstr	s21, [r4, #-28]	; 0xffffffe4
 8004c70:	ed04 aa06 	vstr	s20, [r4, #-24]	; 0xffffffe8
 8004c74:	ed44 9a05 	vstr	s19, [r4, #-20]	; 0xffffffec
 8004c78:	ed04 9a04 	vstr	s18, [r4, #-16]
 8004c7c:	ed04 6a03 	vstr	s12, [r4, #-12]
 8004c80:	ed44 ba02 	vstr	s23, [r4, #-8]
 8004c84:	ed44 6a01 	vstr	s13, [r4, #-4]
 8004c88:	f106 0620 	add.w	r6, r6, #32
 8004c8c:	f105 0520 	add.w	r5, r5, #32
 8004c90:	f104 0420 	add.w	r4, r4, #32
 8004c94:	468b      	mov	fp, r1
 8004c96:	f47f ae3f 	bne.w	8004918 <arm_fir_f32+0x74>
 8004c9a:	9b01      	ldr	r3, [sp, #4]
 8004c9c:	9800      	ldr	r0, [sp, #0]
 8004c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ca4:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 8004ca8:	015b      	lsls	r3, r3, #5
 8004caa:	4418      	add	r0, r3
 8004cac:	4419      	add	r1, r3
 8004cae:	441a      	add	r2, r3
 8004cb0:	4499      	add	r9, r3
 8004cb2:	9000      	str	r0, [sp, #0]
 8004cb4:	9b04      	ldr	r3, [sp, #16]
 8004cb6:	f013 0707 	ands.w	r7, r3, #7
 8004cba:	d020      	beq.n	8004cfe <arm_fir_f32+0x45a>
 8004cbc:	00bf      	lsls	r7, r7, #2
 8004cbe:	9e00      	ldr	r6, [sp, #0]
 8004cc0:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004cc4:	eb01 0c07 	add.w	ip, r1, r7
 8004cc8:	464d      	mov	r5, r9
 8004cca:	f851 3b04 	ldr.w	r3, [r1], #4
 8004cce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004d4c <arm_fir_f32+0x4a8>
 8004cd2:	f846 3b04 	str.w	r3, [r6], #4
 8004cd6:	4674      	mov	r4, lr
 8004cd8:	4643      	mov	r3, r8
 8004cda:	4628      	mov	r0, r5
 8004cdc:	ecf0 7a01 	vldmia	r0!, {s15}
 8004ce0:	ecf4 6a01 	vldmia	r4!, {s13}
 8004ce4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cee:	d1f5      	bne.n	8004cdc <arm_fir_f32+0x438>
 8004cf0:	4561      	cmp	r1, ip
 8004cf2:	eca2 7a01 	vstmia	r2!, {s14}
 8004cf6:	f105 0504 	add.w	r5, r5, #4
 8004cfa:	d1e6      	bne.n	8004cca <arm_fir_f32+0x426>
 8004cfc:	44b9      	add	r9, r7
 8004cfe:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d02:	9b03      	ldr	r3, [sp, #12]
 8004d04:	ea5f 0498 	movs.w	r4, r8, lsr #2
 8004d08:	685d      	ldr	r5, [r3, #4]
 8004d0a:	d021      	beq.n	8004d50 <arm_fir_f32+0x4ac>
 8004d0c:	f109 0210 	add.w	r2, r9, #16
 8004d10:	f105 0310 	add.w	r3, r5, #16
 8004d14:	4621      	mov	r1, r4
 8004d16:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8004d1a:	f843 0c10 	str.w	r0, [r3, #-16]
 8004d1e:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8004d22:	f843 0c0c 	str.w	r0, [r3, #-12]
 8004d26:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8004d2a:	f843 0c08 	str.w	r0, [r3, #-8]
 8004d2e:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8004d32:	f843 0c04 	str.w	r0, [r3, #-4]
 8004d36:	3901      	subs	r1, #1
 8004d38:	f102 0210 	add.w	r2, r2, #16
 8004d3c:	f103 0310 	add.w	r3, r3, #16
 8004d40:	d1e9      	bne.n	8004d16 <arm_fir_f32+0x472>
 8004d42:	0124      	lsls	r4, r4, #4
 8004d44:	44a1      	add	r9, r4
 8004d46:	4425      	add	r5, r4
 8004d48:	e002      	b.n	8004d50 <arm_fir_f32+0x4ac>
 8004d4a:	bf00      	nop
 8004d4c:	00000000 	.word	0x00000000
 8004d50:	f018 0803 	ands.w	r8, r8, #3
 8004d54:	d00e      	beq.n	8004d74 <arm_fir_f32+0x4d0>
 8004d56:	f8d9 3000 	ldr.w	r3, [r9]
 8004d5a:	602b      	str	r3, [r5, #0]
 8004d5c:	f1b8 0801 	subs.w	r8, r8, #1
 8004d60:	d008      	beq.n	8004d74 <arm_fir_f32+0x4d0>
 8004d62:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004d66:	606b      	str	r3, [r5, #4]
 8004d68:	f1b8 0f01 	cmp.w	r8, #1
 8004d6c:	bf1c      	itt	ne
 8004d6e:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 8004d72:	60ab      	strne	r3, [r5, #8]
 8004d74:	b00b      	add	sp, #44	; 0x2c
 8004d76:	ecbd 8b10 	vpop	{d8-d15}
 8004d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d7e:	eef0 ba66 	vmov.f32	s23, s13
 8004d82:	eeb0 6a66 	vmov.f32	s12, s13
 8004d86:	eeb0 9a66 	vmov.f32	s18, s13
 8004d8a:	eef0 9a66 	vmov.f32	s19, s13
 8004d8e:	eeb0 aa66 	vmov.f32	s20, s13
 8004d92:	eef0 aa66 	vmov.f32	s21, s13
 8004d96:	eeb0 ba66 	vmov.f32	s22, s13
 8004d9a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004d9e:	f102 0120 	add.w	r1, r2, #32
 8004da2:	e729      	b.n	8004bf8 <arm_fir_f32+0x354>

08004da4 <__libc_init_array>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	4d0d      	ldr	r5, [pc, #52]	; (8004ddc <__libc_init_array+0x38>)
 8004da8:	4c0d      	ldr	r4, [pc, #52]	; (8004de0 <__libc_init_array+0x3c>)
 8004daa:	1b64      	subs	r4, r4, r5
 8004dac:	10a4      	asrs	r4, r4, #2
 8004dae:	2600      	movs	r6, #0
 8004db0:	42a6      	cmp	r6, r4
 8004db2:	d109      	bne.n	8004dc8 <__libc_init_array+0x24>
 8004db4:	4d0b      	ldr	r5, [pc, #44]	; (8004de4 <__libc_init_array+0x40>)
 8004db6:	4c0c      	ldr	r4, [pc, #48]	; (8004de8 <__libc_init_array+0x44>)
 8004db8:	f000 f820 	bl	8004dfc <_init>
 8004dbc:	1b64      	subs	r4, r4, r5
 8004dbe:	10a4      	asrs	r4, r4, #2
 8004dc0:	2600      	movs	r6, #0
 8004dc2:	42a6      	cmp	r6, r4
 8004dc4:	d105      	bne.n	8004dd2 <__libc_init_array+0x2e>
 8004dc6:	bd70      	pop	{r4, r5, r6, pc}
 8004dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dcc:	4798      	blx	r3
 8004dce:	3601      	adds	r6, #1
 8004dd0:	e7ee      	b.n	8004db0 <__libc_init_array+0xc>
 8004dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd6:	4798      	blx	r3
 8004dd8:	3601      	adds	r6, #1
 8004dda:	e7f2      	b.n	8004dc2 <__libc_init_array+0x1e>
 8004ddc:	08004f70 	.word	0x08004f70
 8004de0:	08004f70 	.word	0x08004f70
 8004de4:	08004f70 	.word	0x08004f70
 8004de8:	08004f74 	.word	0x08004f74

08004dec <memset>:
 8004dec:	4402      	add	r2, r0
 8004dee:	4603      	mov	r3, r0
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d100      	bne.n	8004df6 <memset+0xa>
 8004df4:	4770      	bx	lr
 8004df6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfa:	e7f9      	b.n	8004df0 <memset+0x4>

08004dfc <_init>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	bf00      	nop
 8004e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e02:	bc08      	pop	{r3}
 8004e04:	469e      	mov	lr, r3
 8004e06:	4770      	bx	lr

08004e08 <_fini>:
 8004e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0a:	bf00      	nop
 8004e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0e:	bc08      	pop	{r3}
 8004e10:	469e      	mov	lr, r3
 8004e12:	4770      	bx	lr
