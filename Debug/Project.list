
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c8c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f74  08005e50  08005e50  00006e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc4  08006dc4  00008020  2**0
                  CONTENTS
  4 .ARM          00000008  08006dc4  08006dc4  00007dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dcc  08006dcc  00008020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dcc  08006dcc  00007dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dd0  08006dd0  00007dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08006dd4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000089c  20000020  08006df4  00008020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  08006df4  000088bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e50  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003315  00000000  00000000  0001eea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  000221b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e52  00000000  00000000  00023470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002478d  00000000  00000000  000242c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001676c  00000000  00000000  00048a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2593  00000000  00000000  0005f1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0014174e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f24  00000000  00000000  00141808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0014672c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000095b  00000000  00000000  0014677d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000030  00000000  00000000  001470d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005e38 	.word	0x08005e38

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	08005e38 	.word	0x08005e38

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <check_keys>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Per the adafruit keypad library, it seems like they allow polling the keypad
// at 20 us!! i.e. _KEYPAD_SETTLING_DELAY=20us
// We should be able to do close to that too
void check_keys(){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
  uint16_t row_pins[] = { ROW0_Pin, ROW1_Pin, ROW2_Pin, ROW3_Pin };
 80004fa:	4a49      	ldr	r2, [pc, #292]	@ (8000620 <check_keys+0x12c>)
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000502:	e883 0003 	stmia.w	r3, {r0, r1}

  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000506:	200a      	movs	r0, #10
 8000508:	f001 ffc9 	bl	800249e <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800050c:	2017      	movs	r0, #23
 800050e:	f001 ffc6 	bl	800249e <HAL_NVIC_DisableIRQ>

  key_detected = 0;
 8000512:	4b44      	ldr	r3, [pc, #272]	@ (8000624 <check_keys+0x130>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	e05a      	b.n	80005d4 <check_keys+0xe0>

    // Clear Row0 to Row3; Only valid b/c they are all on GPIOC
    HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000524:	4840      	ldr	r0, [pc, #256]	@ (8000628 <check_keys+0x134>)
 8000526:	f002 fdf7 	bl	8003118 <HAL_GPIO_WritePin>

    // Set desired Row
    HAL_GPIO_WritePin(ROW0_GPIO_Port, row_pins[i], GPIO_PIN_SET);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	3310      	adds	r3, #16
 8000530:	443b      	add	r3, r7
 8000532:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000536:	2201      	movs	r2, #1
 8000538:	4619      	mov	r1, r3
 800053a:	483b      	ldr	r0, [pc, #236]	@ (8000628 <check_keys+0x134>)
 800053c:	f002 fdec 	bl	8003118 <HAL_GPIO_WritePin>
    HAL_Delay(0);
 8000540:	2000      	movs	r0, #0
 8000542:	f001 fa83 	bl	8001a4c <HAL_Delay>

    if (HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin)) {
 8000546:	2110      	movs	r1, #16
 8000548:	4838      	ldr	r0, [pc, #224]	@ (800062c <check_keys+0x138>)
 800054a:	f002 fdcd 	bl	80030e8 <HAL_GPIO_ReadPin>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d009      	beq.n	8000568 <check_keys+0x74>
      current_row = i;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	b25a      	sxtb	r2, r3
 8000558:	4b35      	ldr	r3, [pc, #212]	@ (8000630 <check_keys+0x13c>)
 800055a:	701a      	strb	r2, [r3, #0]
      current_col = 0;
 800055c:	4b35      	ldr	r3, [pc, #212]	@ (8000634 <check_keys+0x140>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
      key_detected = 1;
 8000562:	4b30      	ldr	r3, [pc, #192]	@ (8000624 <check_keys+0x130>)
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
    }
    if (HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin)) {
 8000568:	2120      	movs	r1, #32
 800056a:	4830      	ldr	r0, [pc, #192]	@ (800062c <check_keys+0x138>)
 800056c:	f002 fdbc 	bl	80030e8 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d009      	beq.n	800058a <check_keys+0x96>
      current_row = i;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	b25a      	sxtb	r2, r3
 800057a:	4b2d      	ldr	r3, [pc, #180]	@ (8000630 <check_keys+0x13c>)
 800057c:	701a      	strb	r2, [r3, #0]
      current_col = 1;
 800057e:	4b2d      	ldr	r3, [pc, #180]	@ (8000634 <check_keys+0x140>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
      key_detected = 1;
 8000584:	4b27      	ldr	r3, [pc, #156]	@ (8000624 <check_keys+0x130>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
    }
    if (HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin)) {
 800058a:	2140      	movs	r1, #64	@ 0x40
 800058c:	4827      	ldr	r0, [pc, #156]	@ (800062c <check_keys+0x138>)
 800058e:	f002 fdab 	bl	80030e8 <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d009      	beq.n	80005ac <check_keys+0xb8>
      current_row = i;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	b25a      	sxtb	r2, r3
 800059c:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <check_keys+0x13c>)
 800059e:	701a      	strb	r2, [r3, #0]
      current_col = 2;
 80005a0:	4b24      	ldr	r3, [pc, #144]	@ (8000634 <check_keys+0x140>)
 80005a2:	2202      	movs	r2, #2
 80005a4:	701a      	strb	r2, [r3, #0]
      key_detected = 1;
 80005a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <check_keys+0x130>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
    }
    if (HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin)) {
 80005ac:	2180      	movs	r1, #128	@ 0x80
 80005ae:	481f      	ldr	r0, [pc, #124]	@ (800062c <check_keys+0x138>)
 80005b0:	f002 fd9a 	bl	80030e8 <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d009      	beq.n	80005ce <check_keys+0xda>
      current_row = i;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	b25a      	sxtb	r2, r3
 80005be:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <check_keys+0x13c>)
 80005c0:	701a      	strb	r2, [r3, #0]
      current_col = 3;
 80005c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <check_keys+0x140>)
 80005c4:	2203      	movs	r2, #3
 80005c6:	701a      	strb	r2, [r3, #0]
      key_detected = 1;
 80005c8:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <check_keys+0x130>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	dda1      	ble.n	800051e <check_keys+0x2a>
    }
  }
  key = keys[current_row][current_col];
 80005da:	4b15      	ldr	r3, [pc, #84]	@ (8000630 <check_keys+0x13c>)
 80005dc:	f993 3000 	ldrsb.w	r3, [r3]
 80005e0:	4618      	mov	r0, r3
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <check_keys+0x140>)
 80005e4:	f993 3000 	ldrsb.w	r3, [r3]
 80005e8:	4619      	mov	r1, r3
 80005ea:	4a13      	ldr	r2, [pc, #76]	@ (8000638 <check_keys+0x144>)
 80005ec:	0083      	lsls	r3, r0, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	440b      	add	r3, r1
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <check_keys+0x148>)
 80005f6:	701a      	strb	r2, [r3, #0]
  // This ensures that after scanning the rows, they are all set
  // to high, so the interrupt detects if ANY key is pressed
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80005fe:	480a      	ldr	r0, [pc, #40]	@ (8000628 <check_keys+0x134>)
 8000600:	f002 fd8a 	bl	8003118 <HAL_GPIO_WritePin>

  HAL_Delay(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f001 fa21 	bl	8001a4c <HAL_Delay>

  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800060a:	200a      	movs	r0, #10
 800060c:	f001 ff39 	bl	8002482 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000610:	2017      	movs	r0, #23
 8000612:	f001 ff36 	bl	8002482 <HAL_NVIC_EnableIRQ>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	08005e50 	.word	0x08005e50
 8000624:	20000781 	.word	0x20000781
 8000628:	40020800 	.word	0x40020800
 800062c:	40020c00 	.word	0x40020c00
 8000630:	20000001 	.word	0x20000001
 8000634:	20000002 	.word	0x20000002
 8000638:	20000004 	.word	0x20000004
 800063c:	20000782 	.word	0x20000782

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b098      	sub	sp, #96	@ 0x60
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f001 f98f 	bl	8001968 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Call FIR init function to initialize the instance structure. */
  arm_fir_init_f32(&lp, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], BLOCK_SIZE);
 800064a:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800064e:	2301      	movs	r3, #1
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	4bac      	ldr	r3, [pc, #688]	@ (8000904 <main+0x2c4>)
 8000654:	4aac      	ldr	r2, [pc, #688]	@ (8000908 <main+0x2c8>)
 8000656:	211d      	movs	r1, #29
 8000658:	f005 faa8 	bl	8005bac <arm_fir_init_f32>

  arm_biquad_cascade_df1_init_f32(&S1, NUMSTAGES, &coeffTable[190*0 + 10*(band_gainDB[0] + 9)], biquadStateBand1);
 800065c:	4bab      	ldr	r3, [pc, #684]	@ (800090c <main+0x2cc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f103 0209 	add.w	r2, r3, #9
 8000664:	4613      	mov	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4413      	add	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4aa8      	ldr	r2, [pc, #672]	@ (8000910 <main+0x2d0>)
 8000670:	441a      	add	r2, r3
 8000672:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000676:	4ba7      	ldr	r3, [pc, #668]	@ (8000914 <main+0x2d4>)
 8000678:	2102      	movs	r1, #2
 800067a:	f005 faa7 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(&S2, NUMSTAGES, &coeffTable[190*1 + 10*(band_gainDB[1] + 9)], biquadStateBand2);
 800067e:	4ba3      	ldr	r3, [pc, #652]	@ (800090c <main+0x2cc>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f103 0209 	add.w	r2, r3, #9
 8000686:	4613      	mov	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	33be      	adds	r3, #190	@ 0xbe
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4a9f      	ldr	r2, [pc, #636]	@ (8000910 <main+0x2d0>)
 8000694:	441a      	add	r2, r3
 8000696:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800069a:	4b9f      	ldr	r3, [pc, #636]	@ (8000918 <main+0x2d8>)
 800069c:	2102      	movs	r1, #2
 800069e:	f005 fa95 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(&S3, NUMSTAGES, &coeffTable[190*2 + 10*(band_gainDB[2] + 9)], biquadStateBand3);
 80006a2:	4b9a      	ldr	r3, [pc, #616]	@ (800090c <main+0x2cc>)
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	f103 0209 	add.w	r2, r3, #9
 80006aa:	4613      	mov	r3, r2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4a95      	ldr	r2, [pc, #596]	@ (8000910 <main+0x2d0>)
 80006ba:	441a      	add	r2, r3
 80006bc:	f107 0020 	add.w	r0, r7, #32
 80006c0:	4b96      	ldr	r3, [pc, #600]	@ (800091c <main+0x2dc>)
 80006c2:	2102      	movs	r1, #2
 80006c4:	f005 fa82 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(&S4, NUMSTAGES, &coeffTable[190*3 + 10*(band_gainDB[3] + 9)], biquadStateBand4);
 80006c8:	4b90      	ldr	r3, [pc, #576]	@ (800090c <main+0x2cc>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	f103 0209 	add.w	r2, r3, #9
 80006d0:	4613      	mov	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4413      	add	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	f203 233a 	addw	r3, r3, #570	@ 0x23a
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4a8c      	ldr	r2, [pc, #560]	@ (8000910 <main+0x2d0>)
 80006e0:	441a      	add	r2, r3
 80006e2:	f107 0014 	add.w	r0, r7, #20
 80006e6:	4b8e      	ldr	r3, [pc, #568]	@ (8000920 <main+0x2e0>)
 80006e8:	2102      	movs	r1, #2
 80006ea:	f005 fa6f 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(&S5, NUMSTAGES, &coeffTable[190*4 + 10*(band_gainDB[4] + 9)], biquadStateBand5);
 80006ee:	4b87      	ldr	r3, [pc, #540]	@ (800090c <main+0x2cc>)
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	f103 0209 	add.w	r2, r3, #9
 80006f6:	4613      	mov	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4a82      	ldr	r2, [pc, #520]	@ (8000910 <main+0x2d0>)
 8000706:	441a      	add	r2, r3
 8000708:	f107 0008 	add.w	r0, r7, #8
 800070c:	4b85      	ldr	r3, [pc, #532]	@ (8000924 <main+0x2e4>)
 800070e:	2102      	movs	r1, #2
 8000710:	f005 fa5c 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000714:	f000 fac0 	bl	8000c98 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  float32_t output = 0;
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
  float index = 0;
 800071e:	f04f 0300 	mov.w	r3, #0
 8000722:	653b      	str	r3, [r7, #80]	@ 0x50
  float incr = 1;
 8000724:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000728:	657b      	str	r3, [r7, #84]	@ 0x54
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072a:	f000 fce3 	bl	80010f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800072e:	f000 fcab 	bl	8001088 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000732:	f000 fc51 	bl	8000fd8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000736:	f000 fc79 	bl	800102c <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 800073a:	f000 fb6b 	bl	8000e14 <MX_DAC_Init>
  MX_TIM7_Init();
 800073e:	f000 fc15 	bl	8000f6c <MX_TIM7_Init>
  MX_TIM6_Init();
 8000742:	f000 fbdd 	bl	8000f00 <MX_TIM6_Init>
  MX_TIM5_Init();
 8000746:	f000 fb8f 	bl	8000e68 <MX_TIM5_Init>
  MX_ADC3_Init();
 800074a:	f000 fb11 	bl	8000d70 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  // Set Row0 to Row3; Only valid b/c they are all on GPIOC

  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 800074e:	200a      	movs	r0, #10
 8000750:	f001 fea5 	bl	800249e <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000754:	2017      	movs	r0, #23
 8000756:	f001 fea2 	bl	800249e <HAL_NVIC_DisableIRQ>

  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000760:	4871      	ldr	r0, [pc, #452]	@ (8000928 <main+0x2e8>)
 8000762:	f002 fcd9 	bl	8003118 <HAL_GPIO_WritePin>

  HAL_Delay(1);
 8000766:	2001      	movs	r0, #1
 8000768:	f001 f970 	bl	8001a4c <HAL_Delay>

  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800076c:	200a      	movs	r0, #10
 800076e:	f001 fe88 	bl	8002482 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000772:	2017      	movs	r0, #23
 8000774:	f001 fe85 	bl	8002482 <HAL_NVIC_EnableIRQ>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000778:	2100      	movs	r1, #0
 800077a:	486c      	ldr	r0, [pc, #432]	@ (800092c <main+0x2ec>)
 800077c:	f001 fecb 	bl	8002516 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8000780:	486b      	ldr	r0, [pc, #428]	@ (8000930 <main+0x2f0>)
 8000782:	f004 f819 	bl	80047b8 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_Base_Start(&htim5);
 8000786:	486b      	ldr	r0, [pc, #428]	@ (8000934 <main+0x2f4>)
 8000788:	f003 ffae 	bl	80046e8 <HAL_TIM_Base_Start>

  HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, (0 << 8));
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	4866      	ldr	r0, [pc, #408]	@ (800092c <main+0x2ec>)
 8000792:	f001 ffea 	bl	800276a <HAL_DACEx_TriangleWaveGenerate>
  while (1)
  {
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	if (key_pressed){
 8000796:	4b68      	ldr	r3, [pc, #416]	@ (8000938 <main+0x2f8>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	f000 81ed 	beq.w	8000b7a <main+0x53a>
		// We cannot clear key_pressed here since we haven't
		// figured out which key was actually pressed
		// This is because scanning through keys generates
		// interrupts which re-enables key_pressed, which
		// we won't be able to properly clear
		check_keys();
 80007a0:	f7ff fea8 	bl	80004f4 <check_keys>
		key_pressed = 0;
 80007a4:	4b64      	ldr	r3, [pc, #400]	@ (8000938 <main+0x2f8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]

		if (key_detected) {
 80007aa:	4b64      	ldr	r3, [pc, #400]	@ (800093c <main+0x2fc>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	f000 81e3 	beq.w	8000b7a <main+0x53a>
			if (key == 'A'){
 80007b4:	4b62      	ldr	r3, [pc, #392]	@ (8000940 <main+0x300>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b41      	cmp	r3, #65	@ 0x41
 80007ba:	d106      	bne.n	80007ca <main+0x18a>
				// double the frequency
				incr = incr*2;
 80007bc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80007c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007c4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 80007c8:	e1cb      	b.n	8000b62 <main+0x522>
			}
			else if (key == 'B'){
 80007ca:	4b5d      	ldr	r3, [pc, #372]	@ (8000940 <main+0x300>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b42      	cmp	r3, #66	@ 0x42
 80007d0:	d108      	bne.n	80007e4 <main+0x1a4>
				// half the frequency (haven't exactly figured out how to go below 1 kHz)
				incr = incr/2;
 80007d2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80007d6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80007da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007de:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 80007e2:	e1be      	b.n	8000b62 <main+0x522>
//					volume_level--;
//				}
//
//			// Control volume of triangular wave
//			}
			else if (key == 'C'){
 80007e4:	4b56      	ldr	r3, [pc, #344]	@ (8000940 <main+0x300>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b43      	cmp	r3, #67	@ 0x43
 80007ea:	d112      	bne.n	8000812 <main+0x1d2>
				if (trig_vol < 11){
 80007ec:	4b55      	ldr	r3, [pc, #340]	@ (8000944 <main+0x304>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b0a      	cmp	r3, #10
 80007f2:	d805      	bhi.n	8000800 <main+0x1c0>
					trig_vol++;
 80007f4:	4b53      	ldr	r3, [pc, #332]	@ (8000944 <main+0x304>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b51      	ldr	r3, [pc, #324]	@ (8000944 <main+0x304>)
 80007fe:	701a      	strb	r2, [r3, #0]
				}
				HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, (trig_vol << 8));
 8000800:	4b50      	ldr	r3, [pc, #320]	@ (8000944 <main+0x304>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	461a      	mov	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	4848      	ldr	r0, [pc, #288]	@ (800092c <main+0x2ec>)
 800080c:	f001 ffad 	bl	800276a <HAL_DACEx_TriangleWaveGenerate>
 8000810:	e1a7      	b.n	8000b62 <main+0x522>
			}
			else if (key == 'D'){
 8000812:	4b4b      	ldr	r3, [pc, #300]	@ (8000940 <main+0x300>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b44      	cmp	r3, #68	@ 0x44
 8000818:	d112      	bne.n	8000840 <main+0x200>
				if (trig_vol > 0){
 800081a:	4b4a      	ldr	r3, [pc, #296]	@ (8000944 <main+0x304>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d005      	beq.n	800082e <main+0x1ee>
					trig_vol--;
 8000822:	4b48      	ldr	r3, [pc, #288]	@ (8000944 <main+0x304>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	3b01      	subs	r3, #1
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b46      	ldr	r3, [pc, #280]	@ (8000944 <main+0x304>)
 800082c:	701a      	strb	r2, [r3, #0]
				}
				HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, (trig_vol << 8));
 800082e:	4b45      	ldr	r3, [pc, #276]	@ (8000944 <main+0x304>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	021b      	lsls	r3, r3, #8
 8000834:	461a      	mov	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	483c      	ldr	r0, [pc, #240]	@ (800092c <main+0x2ec>)
 800083a:	f001 ff96 	bl	800276a <HAL_DACEx_TriangleWaveGenerate>
 800083e:	e190      	b.n	8000b62 <main+0x522>
			//	          }

			// ******* Gains of Equalizers *******//

			// Band 1
			else if (key == '0'){
 8000840:	4b3f      	ldr	r3, [pc, #252]	@ (8000940 <main+0x300>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b30      	cmp	r3, #48	@ 0x30
 8000846:	d11b      	bne.n	8000880 <main+0x240>
				if (band_gainDB[0] < MAX_GAIN){
 8000848:	4b30      	ldr	r3, [pc, #192]	@ (800090c <main+0x2cc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b09      	cmp	r3, #9
 800084e:	f300 8188 	bgt.w	8000b62 <main+0x522>
					band_gainDB[0]++;
 8000852:	4b2e      	ldr	r3, [pc, #184]	@ (800090c <main+0x2cc>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3301      	adds	r3, #1
 8000858:	4a2c      	ldr	r2, [pc, #176]	@ (800090c <main+0x2cc>)
 800085a:	6013      	str	r3, [r2, #0]
					arm_biquad_cascade_df1_init_f32(&S1, NUMSTAGES, &coeffTable[190*0 + 10*(band_gainDB[0] + 9)], biquadStateBand1);
 800085c:	4b2b      	ldr	r3, [pc, #172]	@ (800090c <main+0x2cc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f103 0209 	add.w	r2, r3, #9
 8000864:	4613      	mov	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	4a28      	ldr	r2, [pc, #160]	@ (8000910 <main+0x2d0>)
 8000870:	441a      	add	r2, r3
 8000872:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000876:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <main+0x2d4>)
 8000878:	2102      	movs	r1, #2
 800087a:	f005 f9a7 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
 800087e:	e170      	b.n	8000b62 <main+0x522>
				}
			}else if (key == '1'){
 8000880:	4b2f      	ldr	r3, [pc, #188]	@ (8000940 <main+0x300>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b31      	cmp	r3, #49	@ 0x31
 8000886:	d11c      	bne.n	80008c2 <main+0x282>
				if (band_gainDB[0] > -MAX_GAIN){
 8000888:	4b20      	ldr	r3, [pc, #128]	@ (800090c <main+0x2cc>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f113 0f09 	cmn.w	r3, #9
 8000890:	f2c0 8167 	blt.w	8000b62 <main+0x522>
					band_gainDB[0]--;
 8000894:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <main+0x2cc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3b01      	subs	r3, #1
 800089a:	4a1c      	ldr	r2, [pc, #112]	@ (800090c <main+0x2cc>)
 800089c:	6013      	str	r3, [r2, #0]
					arm_biquad_cascade_df1_init_f32(&S1, NUMSTAGES, &coeffTable[190*0 + 10*(band_gainDB[0] + 9)], biquadStateBand1);
 800089e:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <main+0x2cc>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f103 0209 	add.w	r2, r3, #9
 80008a6:	4613      	mov	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4a17      	ldr	r2, [pc, #92]	@ (8000910 <main+0x2d0>)
 80008b2:	441a      	add	r2, r3
 80008b4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80008b8:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <main+0x2d4>)
 80008ba:	2102      	movs	r1, #2
 80008bc:	f005 f986 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
 80008c0:	e14f      	b.n	8000b62 <main+0x522>
				}
			}

			// band 2
			else if (key == '2'){
 80008c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <main+0x300>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b32      	cmp	r3, #50	@ 0x32
 80008c8:	d13e      	bne.n	8000948 <main+0x308>
				if (band_gainDB[1] < MAX_GAIN){
 80008ca:	4b10      	ldr	r3, [pc, #64]	@ (800090c <main+0x2cc>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2b09      	cmp	r3, #9
 80008d0:	f300 8147 	bgt.w	8000b62 <main+0x522>
					band_gainDB[1]++;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <main+0x2cc>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	3301      	adds	r3, #1
 80008da:	4a0c      	ldr	r2, [pc, #48]	@ (800090c <main+0x2cc>)
 80008dc:	6053      	str	r3, [r2, #4]
					arm_biquad_cascade_df1_init_f32(&S2, NUMSTAGES, &coeffTable[190*1 + 10*(band_gainDB[1] + 9)], biquadStateBand2);
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <main+0x2cc>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f103 0209 	add.w	r2, r3, #9
 80008e6:	4613      	mov	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	33be      	adds	r3, #190	@ 0xbe
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4a07      	ldr	r2, [pc, #28]	@ (8000910 <main+0x2d0>)
 80008f4:	441a      	add	r2, r3
 80008f6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80008fa:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <main+0x2d8>)
 80008fc:	2102      	movs	r1, #2
 80008fe:	f005 f965 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
 8000902:	e12e      	b.n	8000b62 <main+0x522>
 8000904:	20000788 	.word	0x20000788
 8000908:	08005e58 	.word	0x08005e58
 800090c:	2000089c 	.word	0x2000089c
 8000910:	08005ecc 	.word	0x08005ecc
 8000914:	200007fc 	.word	0x200007fc
 8000918:	2000081c 	.word	0x2000081c
 800091c:	2000083c 	.word	0x2000083c
 8000920:	2000085c 	.word	0x2000085c
 8000924:	2000087c 	.word	0x2000087c
 8000928:	40020800 	.word	0x40020800
 800092c:	200000e4 	.word	0x200000e4
 8000930:	200001e8 	.word	0x200001e8
 8000934:	20000158 	.word	0x20000158
 8000938:	20000780 	.word	0x20000780
 800093c:	20000781 	.word	0x20000781
 8000940:	20000782 	.word	0x20000782
 8000944:	20000000 	.word	0x20000000
				}
			}else if (key == '3'){
 8000948:	4b7a      	ldr	r3, [pc, #488]	@ (8000b34 <main+0x4f4>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b33      	cmp	r3, #51	@ 0x33
 800094e:	d11d      	bne.n	800098c <main+0x34c>
				if (band_gainDB[1] > -MAX_GAIN){
 8000950:	4b79      	ldr	r3, [pc, #484]	@ (8000b38 <main+0x4f8>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f113 0f09 	cmn.w	r3, #9
 8000958:	f2c0 8103 	blt.w	8000b62 <main+0x522>
					band_gainDB[1]--;
 800095c:	4b76      	ldr	r3, [pc, #472]	@ (8000b38 <main+0x4f8>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	3b01      	subs	r3, #1
 8000962:	4a75      	ldr	r2, [pc, #468]	@ (8000b38 <main+0x4f8>)
 8000964:	6053      	str	r3, [r2, #4]
					arm_biquad_cascade_df1_init_f32(&S2, NUMSTAGES, &coeffTable[190*1 + 10*(band_gainDB[1] + 9)], biquadStateBand2);
 8000966:	4b74      	ldr	r3, [pc, #464]	@ (8000b38 <main+0x4f8>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f103 0209 	add.w	r2, r3, #9
 800096e:	4613      	mov	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4413      	add	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	33be      	adds	r3, #190	@ 0xbe
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4a70      	ldr	r2, [pc, #448]	@ (8000b3c <main+0x4fc>)
 800097c:	441a      	add	r2, r3
 800097e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000982:	4b6f      	ldr	r3, [pc, #444]	@ (8000b40 <main+0x500>)
 8000984:	2102      	movs	r1, #2
 8000986:	f005 f921 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
 800098a:	e0ea      	b.n	8000b62 <main+0x522>
				}
			}

			// band 3
			else if (key == '4'){
 800098c:	4b69      	ldr	r3, [pc, #420]	@ (8000b34 <main+0x4f4>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b34      	cmp	r3, #52	@ 0x34
 8000992:	d11d      	bne.n	80009d0 <main+0x390>
				if (band_gainDB[2] < MAX_GAIN){
 8000994:	4b68      	ldr	r3, [pc, #416]	@ (8000b38 <main+0x4f8>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	2b09      	cmp	r3, #9
 800099a:	f300 80e2 	bgt.w	8000b62 <main+0x522>
					band_gainDB[2]++;
 800099e:	4b66      	ldr	r3, [pc, #408]	@ (8000b38 <main+0x4f8>)
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	3301      	adds	r3, #1
 80009a4:	4a64      	ldr	r2, [pc, #400]	@ (8000b38 <main+0x4f8>)
 80009a6:	6093      	str	r3, [r2, #8]
					arm_biquad_cascade_df1_init_f32(&S3, NUMSTAGES, &coeffTable[190*2 + 10*(band_gainDB[2] + 9)], biquadStateBand3);
 80009a8:	4b63      	ldr	r3, [pc, #396]	@ (8000b38 <main+0x4f8>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f103 0209 	add.w	r2, r3, #9
 80009b0:	4613      	mov	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4a5f      	ldr	r2, [pc, #380]	@ (8000b3c <main+0x4fc>)
 80009c0:	441a      	add	r2, r3
 80009c2:	f107 0020 	add.w	r0, r7, #32
 80009c6:	4b5f      	ldr	r3, [pc, #380]	@ (8000b44 <main+0x504>)
 80009c8:	2102      	movs	r1, #2
 80009ca:	f005 f8ff 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
 80009ce:	e0c8      	b.n	8000b62 <main+0x522>
				}
			}else if (key == '5'){
 80009d0:	4b58      	ldr	r3, [pc, #352]	@ (8000b34 <main+0x4f4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b35      	cmp	r3, #53	@ 0x35
 80009d6:	d11d      	bne.n	8000a14 <main+0x3d4>
				if (band_gainDB[2] > -1){
 80009d8:	4b57      	ldr	r3, [pc, #348]	@ (8000b38 <main+0x4f8>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f2c0 80c0 	blt.w	8000b62 <main+0x522>
					band_gainDB[2]--;
 80009e2:	4b55      	ldr	r3, [pc, #340]	@ (8000b38 <main+0x4f8>)
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	4a53      	ldr	r2, [pc, #332]	@ (8000b38 <main+0x4f8>)
 80009ea:	6093      	str	r3, [r2, #8]
					arm_biquad_cascade_df1_init_f32(&S2, NUMSTAGES, &coeffTable[190*2 + 10*(band_gainDB[2] + 9)], biquadStateBand3);
 80009ec:	4b52      	ldr	r3, [pc, #328]	@ (8000b38 <main+0x4f8>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f103 0209 	add.w	r2, r3, #9
 80009f4:	4613      	mov	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4a4e      	ldr	r2, [pc, #312]	@ (8000b3c <main+0x4fc>)
 8000a04:	441a      	add	r2, r3
 8000a06:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000a0a:	4b4e      	ldr	r3, [pc, #312]	@ (8000b44 <main+0x504>)
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	f005 f8dd 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
 8000a12:	e0a6      	b.n	8000b62 <main+0x522>
				}
			}

			// band 4
			else if (key == '6'){
 8000a14:	4b47      	ldr	r3, [pc, #284]	@ (8000b34 <main+0x4f4>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b36      	cmp	r3, #54	@ 0x36
 8000a1a:	d11d      	bne.n	8000a58 <main+0x418>
				if (band_gainDB[3] < MAX_GAIN){
 8000a1c:	4b46      	ldr	r3, [pc, #280]	@ (8000b38 <main+0x4f8>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	2b09      	cmp	r3, #9
 8000a22:	f300 809e 	bgt.w	8000b62 <main+0x522>
					band_gainDB[3]++;
 8000a26:	4b44      	ldr	r3, [pc, #272]	@ (8000b38 <main+0x4f8>)
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	4a42      	ldr	r2, [pc, #264]	@ (8000b38 <main+0x4f8>)
 8000a2e:	60d3      	str	r3, [r2, #12]
					arm_biquad_cascade_df1_init_f32(&S4, NUMSTAGES, &coeffTable[190*3 + 10*(band_gainDB[3] + 9)], biquadStateBand4);
 8000a30:	4b41      	ldr	r3, [pc, #260]	@ (8000b38 <main+0x4f8>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	f103 0209 	add.w	r2, r3, #9
 8000a38:	4613      	mov	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	f203 233a 	addw	r3, r3, #570	@ 0x23a
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4a3d      	ldr	r2, [pc, #244]	@ (8000b3c <main+0x4fc>)
 8000a48:	441a      	add	r2, r3
 8000a4a:	f107 0014 	add.w	r0, r7, #20
 8000a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b48 <main+0x508>)
 8000a50:	2102      	movs	r1, #2
 8000a52:	f005 f8bb 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
 8000a56:	e084      	b.n	8000b62 <main+0x522>
				}
			}else if (key == '7'){
 8000a58:	4b36      	ldr	r3, [pc, #216]	@ (8000b34 <main+0x4f4>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b37      	cmp	r3, #55	@ 0x37
 8000a5e:	d11d      	bne.n	8000a9c <main+0x45c>
				if (band_gainDB[3] > -MAX_GAIN){
 8000a60:	4b35      	ldr	r3, [pc, #212]	@ (8000b38 <main+0x4f8>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	f113 0f09 	cmn.w	r3, #9
 8000a68:	db7b      	blt.n	8000b62 <main+0x522>
					band_gainDB[3]--;
 8000a6a:	4b33      	ldr	r3, [pc, #204]	@ (8000b38 <main+0x4f8>)
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	4a31      	ldr	r2, [pc, #196]	@ (8000b38 <main+0x4f8>)
 8000a72:	60d3      	str	r3, [r2, #12]
					arm_biquad_cascade_df1_init_f32(&S4, NUMSTAGES, &coeffTable[190*3 + 10*(band_gainDB[3] + 9)], biquadStateBand4);
 8000a74:	4b30      	ldr	r3, [pc, #192]	@ (8000b38 <main+0x4f8>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	f103 0209 	add.w	r2, r3, #9
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	f203 233a 	addw	r3, r3, #570	@ 0x23a
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8000b3c <main+0x4fc>)
 8000a8c:	441a      	add	r2, r3
 8000a8e:	f107 0014 	add.w	r0, r7, #20
 8000a92:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <main+0x508>)
 8000a94:	2102      	movs	r1, #2
 8000a96:	f005 f899 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
 8000a9a:	e062      	b.n	8000b62 <main+0x522>
				}
			}

			// band 5
			else if (key == '8'){
 8000a9c:	4b25      	ldr	r3, [pc, #148]	@ (8000b34 <main+0x4f4>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b38      	cmp	r3, #56	@ 0x38
 8000aa2:	d11c      	bne.n	8000ade <main+0x49e>
				if (band_gainDB[4] < MAX_GAIN){
 8000aa4:	4b24      	ldr	r3, [pc, #144]	@ (8000b38 <main+0x4f8>)
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	2b09      	cmp	r3, #9
 8000aaa:	dc5a      	bgt.n	8000b62 <main+0x522>
					band_gainDB[4]++;
 8000aac:	4b22      	ldr	r3, [pc, #136]	@ (8000b38 <main+0x4f8>)
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	4a21      	ldr	r2, [pc, #132]	@ (8000b38 <main+0x4f8>)
 8000ab4:	6113      	str	r3, [r2, #16]
					arm_biquad_cascade_df1_init_f32(&S5, NUMSTAGES, &coeffTable[190*4 + 10*(band_gainDB[4] + 9)], biquadStateBand5);
 8000ab6:	4b20      	ldr	r3, [pc, #128]	@ (8000b38 <main+0x4f8>)
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	f103 0209 	add.w	r2, r3, #9
 8000abe:	4613      	mov	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b3c <main+0x4fc>)
 8000ace:	441a      	add	r2, r3
 8000ad0:	f107 0008 	add.w	r0, r7, #8
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <main+0x50c>)
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	f005 f878 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
 8000adc:	e041      	b.n	8000b62 <main+0x522>
				}
			}else if (key == '9'){
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <main+0x4f4>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b39      	cmp	r3, #57	@ 0x39
 8000ae4:	d11d      	bne.n	8000b22 <main+0x4e2>
				if (band_gainDB[4] > -MAX_GAIN){
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <main+0x4f8>)
 8000ae8:	691b      	ldr	r3, [r3, #16]
 8000aea:	f113 0f09 	cmn.w	r3, #9
 8000aee:	db38      	blt.n	8000b62 <main+0x522>
					band_gainDB[4]--;
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <main+0x4f8>)
 8000af2:	691b      	ldr	r3, [r3, #16]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	4a10      	ldr	r2, [pc, #64]	@ (8000b38 <main+0x4f8>)
 8000af8:	6113      	str	r3, [r2, #16]
					arm_biquad_cascade_df1_init_f32(&S5, NUMSTAGES, &coeffTable[190*4 + 10*(band_gainDB[4] + 9)], biquadStateBand5);
 8000afa:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <main+0x4f8>)
 8000afc:	691b      	ldr	r3, [r3, #16]
 8000afe:	f103 0209 	add.w	r2, r3, #9
 8000b02:	4613      	mov	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <main+0x4fc>)
 8000b12:	441a      	add	r2, r3
 8000b14:	f107 0008 	add.w	r0, r7, #8
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <main+0x50c>)
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	f005 f856 	bl	8005bcc <arm_biquad_cascade_df1_init_f32>
 8000b20:	e01f      	b.n	8000b62 <main+0x522>
				}
			}

			else if (key == 'E'){
 8000b22:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <main+0x4f4>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b45      	cmp	r3, #69	@ 0x45
 8000b28:	d114      	bne.n	8000b54 <main+0x514>
				echo_en = 1;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <main+0x510>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
 8000b30:	e017      	b.n	8000b62 <main+0x522>
 8000b32:	bf00      	nop
 8000b34:	20000782 	.word	0x20000782
 8000b38:	2000089c 	.word	0x2000089c
 8000b3c:	08005ecc 	.word	0x08005ecc
 8000b40:	2000081c 	.word	0x2000081c
 8000b44:	2000083c 	.word	0x2000083c
 8000b48:	2000085c 	.word	0x2000085c
 8000b4c:	2000087c 	.word	0x2000087c
 8000b50:	20000785 	.word	0x20000785
			}
			else if (key == 'F'){
 8000b54:	4b45      	ldr	r3, [pc, #276]	@ (8000c6c <main+0x62c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b46      	cmp	r3, #70	@ 0x46
 8000b5a:	d102      	bne.n	8000b62 <main+0x522>
				echo_en = 0;
 8000b5c:	4b44      	ldr	r3, [pc, #272]	@ (8000c70 <main+0x630>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
			}
			// Clear keypress and keydetect
			key_detected = 0;
 8000b62:	4b44      	ldr	r3, [pc, #272]	@ (8000c74 <main+0x634>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
			key_pressed = 0;
 8000b68:	4b43      	ldr	r3, [pc, #268]	@ (8000c78 <main+0x638>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
			current_row = -1;
 8000b6e:	4b43      	ldr	r3, [pc, #268]	@ (8000c7c <main+0x63c>)
 8000b70:	22ff      	movs	r2, #255	@ 0xff
 8000b72:	701a      	strb	r2, [r3, #0]
			current_col = -1;
 8000b74:	4b42      	ldr	r3, [pc, #264]	@ (8000c80 <main+0x640>)
 8000b76:	22ff      	movs	r2, #255	@ 0xff
 8000b78:	701a      	strb	r2, [r3, #0]
		}
	}

	if (new_sample){
 8000b7a:	4b42      	ldr	r3, [pc, #264]	@ (8000c84 <main+0x644>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f43f ae09 	beq.w	8000796 <main+0x156>
	new_sample = 0;
 8000b84:	4b3f      	ldr	r3, [pc, #252]	@ (8000c84 <main+0x644>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start(&hadc3);
 8000b8a:	483f      	ldr	r0, [pc, #252]	@ (8000c88 <main+0x648>)
 8000b8c:	f000 ffc6 	bl	8001b1c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 100);
 8000b90:	2164      	movs	r1, #100	@ 0x64
 8000b92:	483d      	ldr	r0, [pc, #244]	@ (8000c88 <main+0x648>)
 8000b94:	f001 f894 	bl	8001cc0 <HAL_ADC_PollForConversion>
	input = (float32_t)HAL_ADC_GetValue(&hadc3);
 8000b98:	483b      	ldr	r0, [pc, #236]	@ (8000c88 <main+0x648>)
 8000b9a:	f001 f91c 	bl	8001dd6 <HAL_ADC_GetValue>
 8000b9e:	ee07 0a90 	vmov	s15, r0
 8000ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba6:	4b39      	ldr	r3, [pc, #228]	@ (8000c8c <main+0x64c>)
 8000ba8:	edc3 7a00 	vstr	s15, [r3]
	//
	//	  	  	  output *= 4095;
	//	  	  	  output += 2047;
	//	  		  output = input;

	arm_biquad_cascade_df1_f32(&S1, &input, &output, 1);
 8000bac:	1d3a      	adds	r2, r7, #4
 8000bae:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	4935      	ldr	r1, [pc, #212]	@ (8000c8c <main+0x64c>)
 8000bb6:	f005 f815 	bl	8005be4 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32(&S2, &output, &output, 1);
 8000bba:	1d3a      	adds	r2, r7, #4
 8000bbc:	1d39      	adds	r1, r7, #4
 8000bbe:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f005 f80e 	bl	8005be4 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32(&S3, &output, &output, 1);
 8000bc8:	1d3a      	adds	r2, r7, #4
 8000bca:	1d39      	adds	r1, r7, #4
 8000bcc:	f107 0020 	add.w	r0, r7, #32
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f005 f807 	bl	8005be4 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32(&S4, &output, &output, 1);
 8000bd6:	1d3a      	adds	r2, r7, #4
 8000bd8:	1d39      	adds	r1, r7, #4
 8000bda:	f107 0014 	add.w	r0, r7, #20
 8000bde:	2301      	movs	r3, #1
 8000be0:	f005 f800 	bl	8005be4 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32(&S5, &output, &output, 1);
 8000be4:	1d3a      	adds	r2, r7, #4
 8000be6:	1d39      	adds	r1, r7, #4
 8000be8:	f107 0008 	add.w	r0, r7, #8
 8000bec:	2301      	movs	r3, #1
 8000bee:	f004 fff9 	bl	8005be4 <arm_biquad_cascade_df1_f32>

	if (echo_en){
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <main+0x630>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d027      	beq.n	8000c4a <main+0x60a>
		output += 0.5f*biquadStateBand1[0] + 0.25f*biquadStateBand1[1] + 0.25f*biquadStateBand1[2] + 0.125f*biquadStateBand1[3];
 8000bfa:	4b25      	ldr	r3, [pc, #148]	@ (8000c90 <main+0x650>)
 8000bfc:	edd3 7a00 	vldr	s15, [r3]
 8000c00:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000c04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c08:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <main+0x650>)
 8000c0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c0e:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8000c12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <main+0x650>)
 8000c1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c20:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8000c24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c2c:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <main+0x650>)
 8000c2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c32:	eef4 6a00 	vmov.f32	s13, #64	@ 0x3e000000  0.125
 8000c36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c46:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	output = input;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <main+0x64c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	607b      	str	r3, [r7, #4]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint16_t)output);
 8000c50:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c58:	ee17 3a90 	vmov	r3, s15
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <main+0x654>)
 8000c64:	f001 fd03 	bl	800266e <HAL_DAC_SetValue>
	if (key_pressed){
 8000c68:	e595      	b.n	8000796 <main+0x156>
 8000c6a:	bf00      	nop
 8000c6c:	20000782 	.word	0x20000782
 8000c70:	20000785 	.word	0x20000785
 8000c74:	20000781 	.word	0x20000781
 8000c78:	20000780 	.word	0x20000780
 8000c7c:	20000001 	.word	0x20000001
 8000c80:	20000002 	.word	0x20000002
 8000c84:	20000784 	.word	0x20000784
 8000c88:	2000003c 	.word	0x2000003c
 8000c8c:	200008b0 	.word	0x200008b0
 8000c90:	200007fc 	.word	0x200007fc
 8000c94:	200000e4 	.word	0x200000e4

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b094      	sub	sp, #80	@ 0x50
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	2234      	movs	r2, #52	@ 0x34
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f005 f89a 	bl	8005de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4b29      	ldr	r3, [pc, #164]	@ (8000d68 <SystemClock_Config+0xd0>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc4:	4a28      	ldr	r2, [pc, #160]	@ (8000d68 <SystemClock_Config+0xd0>)
 8000cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ccc:	4b26      	ldr	r3, [pc, #152]	@ (8000d68 <SystemClock_Config+0xd0>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd8:	2300      	movs	r3, #0
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	4b23      	ldr	r3, [pc, #140]	@ (8000d6c <SystemClock_Config+0xd4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a22      	ldr	r2, [pc, #136]	@ (8000d6c <SystemClock_Config+0xd4>)
 8000ce2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b20      	ldr	r3, [pc, #128]	@ (8000d6c <SystemClock_Config+0xd4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cf8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000cfc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d08:	2308      	movs	r3, #8
 8000d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d0c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d10:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d16:	2307      	movs	r3, #7
 8000d18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 f9f2 	bl	800410c <HAL_RCC_OscConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d2e:	f000 fad9 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	230f      	movs	r3, #15
 8000d34:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000d36:	2303      	movs	r3, #3
 8000d38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d3e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d48:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	2105      	movs	r1, #5
 8000d50:	4618      	mov	r0, r3
 8000d52:	f002 fb67 	bl	8003424 <HAL_RCC_ClockConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d5c:	f000 fac2 	bl	80012e4 <Error_Handler>
  }
}
 8000d60:	bf00      	nop
 8000d62:	3750      	adds	r7, #80	@ 0x50
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40007000 	.word	0x40007000

08000d70 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d82:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <MX_ADC3_Init+0x98>)
 8000d84:	4a21      	ldr	r2, [pc, #132]	@ (8000e0c <MX_ADC3_Init+0x9c>)
 8000d86:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <MX_ADC3_Init+0x98>)
 8000d8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d8e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <MX_ADC3_Init+0x98>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <MX_ADC3_Init+0x98>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <MX_ADC3_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <MX_ADC3_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000daa:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <MX_ADC3_Init+0x98>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db0:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <MX_ADC3_Init+0x98>)
 8000db2:	4a17      	ldr	r2, [pc, #92]	@ (8000e10 <MX_ADC3_Init+0xa0>)
 8000db4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db6:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <MX_ADC3_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <MX_ADC3_Init+0x98>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <MX_ADC3_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <MX_ADC3_Init+0x98>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dd0:	480d      	ldr	r0, [pc, #52]	@ (8000e08 <MX_ADC3_Init+0x98>)
 8000dd2:	f000 fe5f 	bl	8001a94 <HAL_ADC_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000ddc:	f000 fa82 	bl	80012e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000de0:	230f      	movs	r3, #15
 8000de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <MX_ADC3_Init+0x98>)
 8000df2:	f000 fffd 	bl	8001df0 <HAL_ADC_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000dfc:	f000 fa72 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000003c 	.word	0x2000003c
 8000e0c:	40012200 	.word	0x40012200
 8000e10:	0f000001 	.word	0x0f000001

08000e14 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_DAC_Init+0x4c>)
 8000e24:	4a0f      	ldr	r2, [pc, #60]	@ (8000e64 <MX_DAC_Init+0x50>)
 8000e26:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e28:	480d      	ldr	r0, [pc, #52]	@ (8000e60 <MX_DAC_Init+0x4c>)
 8000e2a:	f001 fb52 	bl	80024d2 <HAL_DAC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e34:	f000 fa56 	bl	80012e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 8000e38:	231c      	movs	r3, #28
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	@ (8000e60 <MX_DAC_Init+0x4c>)
 8000e48:	f001 fc40 	bl	80026cc <HAL_DAC_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e52:	f000 fa47 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200000e4 	.word	0x200000e4
 8000e64:	40007400 	.word	0x40007400

08000e68 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <MX_TIM5_Init+0x90>)
 8000e86:	4a1d      	ldr	r2, [pc, #116]	@ (8000efc <MX_TIM5_Init+0x94>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <MX_TIM5_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <MX_TIM5_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1;
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <MX_TIM5_Init+0x90>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <MX_TIM5_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <MX_TIM5_Init+0x90>)
 8000ea4:	2280      	movs	r2, #128	@ 0x80
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ea8:	4813      	ldr	r0, [pc, #76]	@ (8000ef8 <MX_TIM5_Init+0x90>)
 8000eaa:	f003 fbcd 	bl	8004648 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8000eb4:	f000 fa16 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <MX_TIM5_Init+0x90>)
 8000ec6:	f003 fdef 	bl	8004aa8 <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8000ed0:	f000 fa08 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ed4:	2320      	movs	r3, #32
 8000ed6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000edc:	463b      	mov	r3, r7
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_TIM5_Init+0x90>)
 8000ee2:	f004 f815 	bl	8004f10 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8000eec:	f000 f9fa 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000158 	.word	0x20000158
 8000efc:	40000c00 	.word	0x40000c00

08000f00 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <MX_TIM6_Init+0x64>)
 8000f10:	4a15      	ldr	r2, [pc, #84]	@ (8000f68 <MX_TIM6_Init+0x68>)
 8000f12:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400 - 1;
 8000f14:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <MX_TIM6_Init+0x64>)
 8000f16:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000f1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <MX_TIM6_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <MX_TIM6_Init+0x64>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f28:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <MX_TIM6_Init+0x64>)
 8000f2a:	2280      	movs	r2, #128	@ 0x80
 8000f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f2e:	480d      	ldr	r0, [pc, #52]	@ (8000f64 <MX_TIM6_Init+0x64>)
 8000f30:	f003 fb8a 	bl	8004648 <HAL_TIM_Base_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000f3a:	f000 f9d3 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	@ (8000f64 <MX_TIM6_Init+0x64>)
 8000f4c:	f003 ffe0 	bl	8004f10 <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000f56:	f000 f9c5 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200001a0 	.word	0x200001a0
 8000f68:	40001000 	.word	0x40001000

08000f6c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <MX_TIM7_Init+0x64>)
 8000f7c:	4a15      	ldr	r2, [pc, #84]	@ (8000fd4 <MX_TIM7_Init+0x68>)
 8000f7e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f80:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <MX_TIM7_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <MX_TIM7_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1750-1;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <MX_TIM7_Init+0x64>)
 8000f8e:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8000f92:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <MX_TIM7_Init+0x64>)
 8000f96:	2280      	movs	r2, #128	@ 0x80
 8000f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <MX_TIM7_Init+0x64>)
 8000f9c:	f003 fb54 	bl	8004648 <HAL_TIM_Base_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000fa6:	f000 f99d 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	@ (8000fd0 <MX_TIM7_Init+0x64>)
 8000fb8:	f003 ffaa 	bl	8004f10 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000fc2:	f000 f98f 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001e8 	.word	0x200001e8
 8000fd4:	40001400 	.word	0x40001400

08000fd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <MX_USART3_UART_Init+0x4c>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	@ (8001028 <MX_USART3_UART_Init+0x50>)
 8000fe0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <MX_USART3_UART_Init+0x4c>)
 8000fe4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fe8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <MX_USART3_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <MX_USART3_UART_Init+0x4c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <MX_USART3_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <MX_USART3_UART_Init+0x4c>)
 8000ffe:	220c      	movs	r2, #12
 8001000:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <MX_USART3_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <MX_USART3_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	@ (8001024 <MX_USART3_UART_Init+0x4c>)
 8001010:	f004 f80e 	bl	8005030 <HAL_UART_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800101a:	f000 f963 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000230 	.word	0x20000230
 8001028:	40004800 	.word	0x40004800

0800102c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001030:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001032:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001036:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800103a:	2206      	movs	r2, #6
 800103c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001040:	2202      	movs	r2, #2
 8001042:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800104c:	2202      	movs	r2, #2
 800104e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001052:	2201      	movs	r2, #1
 8001054:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800105c:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001062:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001064:	2201      	movs	r2, #1
 8001066:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	@ (8001084 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001070:	f002 f88f 	bl	8003192 <HAL_PCD_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800107a:	f000 f933 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000274 	.word	0x20000274

08001088 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <MX_DMA_Init+0x68>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a16      	ldr	r2, [pc, #88]	@ (80010f0 <MX_DMA_Init+0x68>)
 8001098:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <MX_DMA_Init+0x68>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <MX_DMA_Init+0x68>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a0f      	ldr	r2, [pc, #60]	@ (80010f0 <MX_DMA_Init+0x68>)
 80010b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <MX_DMA_Init+0x68>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	2010      	movs	r0, #16
 80010cc:	f001 f9bd 	bl	800244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010d0:	2010      	movs	r0, #16
 80010d2:	f001 f9d6 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2038      	movs	r0, #56	@ 0x38
 80010dc:	f001 f9b5 	bl	800244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010e0:	2038      	movs	r0, #56	@ 0x38
 80010e2:	f001 f9ce 	bl	8002482 <HAL_NVIC_EnableIRQ>

}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800

080010f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	@ 0x30
 80010f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	4b70      	ldr	r3, [pc, #448]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a6f      	ldr	r2, [pc, #444]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b6d      	ldr	r3, [pc, #436]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	4b69      	ldr	r3, [pc, #420]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a68      	ldr	r2, [pc, #416]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 8001130:	f043 0320 	orr.w	r3, r3, #32
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b66      	ldr	r3, [pc, #408]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0320 	and.w	r3, r3, #32
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b62      	ldr	r3, [pc, #392]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a61      	ldr	r2, [pc, #388]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 800114c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b5f      	ldr	r3, [pc, #380]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b5b      	ldr	r3, [pc, #364]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a5a      	ldr	r2, [pc, #360]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b58      	ldr	r3, [pc, #352]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b54      	ldr	r3, [pc, #336]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a53      	ldr	r2, [pc, #332]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b51      	ldr	r3, [pc, #324]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b4d      	ldr	r3, [pc, #308]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a4c      	ldr	r2, [pc, #304]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b4a      	ldr	r3, [pc, #296]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b46      	ldr	r3, [pc, #280]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a45      	ldr	r2, [pc, #276]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 80011bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b43      	ldr	r3, [pc, #268]	@ (80012d0 <MX_GPIO_Init+0x1dc>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80011d4:	483f      	ldr	r0, [pc, #252]	@ (80012d4 <MX_GPIO_Init+0x1e0>)
 80011d6:	f001 ff9f 	bl	8003118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2140      	movs	r1, #64	@ 0x40
 80011de:	483e      	ldr	r0, [pc, #248]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 80011e0:	f001 ff9a 	bl	8003118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80011ea:	483c      	ldr	r0, [pc, #240]	@ (80012dc <MX_GPIO_Init+0x1e8>)
 80011ec:	f001 ff94 	bl	8003118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	4835      	ldr	r0, [pc, #212]	@ (80012dc <MX_GPIO_Init+0x1e8>)
 8001208:	f001 fdda 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800120c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	482b      	ldr	r0, [pc, #172]	@ (80012d4 <MX_GPIO_Init+0x1e0>)
 8001226:	f001 fdcb 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800122a:	2340      	movs	r3, #64	@ 0x40
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	4825      	ldr	r0, [pc, #148]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001242:	f001 fdbd 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001246:	2380      	movs	r3, #128	@ 0x80
 8001248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	481f      	ldr	r0, [pc, #124]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800125a:	f001 fdb1 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 800125e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	4819      	ldr	r0, [pc, #100]	@ (80012dc <MX_GPIO_Init+0x1e8>)
 8001278:	f001 fda2 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin;
 800127c:	23f0      	movs	r3, #240	@ 0xf0
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001280:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001286:	2302      	movs	r3, #2
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4813      	ldr	r0, [pc, #76]	@ (80012e0 <MX_GPIO_Init+0x1ec>)
 8001292:	f001 fd95 	bl	8002dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	200a      	movs	r0, #10
 800129c:	f001 f8d5 	bl	800244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012a0:	200a      	movs	r0, #10
 80012a2:	f001 f8ee 	bl	8002482 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2017      	movs	r0, #23
 80012ac:	f001 f8cd 	bl	800244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012b0:	2017      	movs	r0, #23
 80012b2:	f001 f8e6 	bl	8002482 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2028      	movs	r0, #40	@ 0x28
 80012bc:	f001 f8c5 	bl	800244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012c0:	2028      	movs	r0, #40	@ 0x28
 80012c2:	f001 f8de 	bl	8002482 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c6:	bf00      	nop
 80012c8:	3730      	adds	r7, #48	@ 0x30
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40021800 	.word	0x40021800
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020c00 	.word	0x40020c00

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <Error_Handler+0x8>

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a0f      	ldr	r2, [pc, #60]	@ (800133c <HAL_MspInit+0x4c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	4a08      	ldr	r2, [pc, #32]	@ (800133c <HAL_MspInit+0x4c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	@ 0x40
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	@ 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a2f      	ldr	r2, [pc, #188]	@ (800141c <HAL_ADC_MspInit+0xdc>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d157      	bne.n	8001412 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b2e      	ldr	r3, [pc, #184]	@ (8001420 <HAL_ADC_MspInit+0xe0>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	4a2d      	ldr	r2, [pc, #180]	@ (8001420 <HAL_ADC_MspInit+0xe0>)
 800136c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001370:	6453      	str	r3, [r2, #68]	@ 0x44
 8001372:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <HAL_ADC_MspInit+0xe0>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <HAL_ADC_MspInit+0xe0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a26      	ldr	r2, [pc, #152]	@ (8001420 <HAL_ADC_MspInit+0xe0>)
 8001388:	f043 0320 	orr.w	r3, r3, #32
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <HAL_ADC_MspInit+0xe0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0320 	and.w	r3, r3, #32
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF5     ------> ADC3_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800139a:	2320      	movs	r3, #32
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139e:	2303      	movs	r3, #3
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	481d      	ldr	r0, [pc, #116]	@ (8001424 <HAL_ADC_MspInit+0xe4>)
 80013ae:	f001 fd07 	bl	8002dc0 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 80013b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <HAL_ADC_MspInit+0xe8>)
 80013b4:	4a1d      	ldr	r2, [pc, #116]	@ (800142c <HAL_ADC_MspInit+0xec>)
 80013b6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <HAL_ADC_MspInit+0xe8>)
 80013ba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013be:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c0:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <HAL_ADC_MspInit+0xe8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c6:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <HAL_ADC_MspInit+0xe8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80013cc:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <HAL_ADC_MspInit+0xe8>)
 80013ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013d2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <HAL_ADC_MspInit+0xe8>)
 80013d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013da:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <HAL_ADC_MspInit+0xe8>)
 80013de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013e2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80013e4:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <HAL_ADC_MspInit+0xe8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <HAL_ADC_MspInit+0xe8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <HAL_ADC_MspInit+0xe8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80013f6:	480c      	ldr	r0, [pc, #48]	@ (8001428 <HAL_ADC_MspInit+0xe8>)
 80013f8:	f001 f9f8 	bl	80027ec <HAL_DMA_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001402:	f7ff ff6f 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a07      	ldr	r2, [pc, #28]	@ (8001428 <HAL_ADC_MspInit+0xe8>)
 800140a:	639a      	str	r2, [r3, #56]	@ 0x38
 800140c:	4a06      	ldr	r2, [pc, #24]	@ (8001428 <HAL_ADC_MspInit+0xe8>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	@ 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40012200 	.word	0x40012200
 8001420:	40023800 	.word	0x40023800
 8001424:	40021400 	.word	0x40021400
 8001428:	20000084 	.word	0x20000084
 800142c:	40026410 	.word	0x40026410

08001430 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a34      	ldr	r2, [pc, #208]	@ (8001520 <HAL_DAC_MspInit+0xf0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d161      	bne.n	8001516 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b33      	ldr	r3, [pc, #204]	@ (8001524 <HAL_DAC_MspInit+0xf4>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	4a32      	ldr	r2, [pc, #200]	@ (8001524 <HAL_DAC_MspInit+0xf4>)
 800145c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001460:	6413      	str	r3, [r2, #64]	@ 0x40
 8001462:	4b30      	ldr	r3, [pc, #192]	@ (8001524 <HAL_DAC_MspInit+0xf4>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b2c      	ldr	r3, [pc, #176]	@ (8001524 <HAL_DAC_MspInit+0xf4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a2b      	ldr	r2, [pc, #172]	@ (8001524 <HAL_DAC_MspInit+0xf4>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b29      	ldr	r3, [pc, #164]	@ (8001524 <HAL_DAC_MspInit+0xf4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800148a:	2310      	movs	r3, #16
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148e:	2303      	movs	r3, #3
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4822      	ldr	r0, [pc, #136]	@ (8001528 <HAL_DAC_MspInit+0xf8>)
 800149e:	f001 fc8f 	bl	8002dc0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80014a2:	4b22      	ldr	r3, [pc, #136]	@ (800152c <HAL_DAC_MspInit+0xfc>)
 80014a4:	4a22      	ldr	r2, [pc, #136]	@ (8001530 <HAL_DAC_MspInit+0x100>)
 80014a6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80014a8:	4b20      	ldr	r3, [pc, #128]	@ (800152c <HAL_DAC_MspInit+0xfc>)
 80014aa:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80014ae:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b0:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <HAL_DAC_MspInit+0xfc>)
 80014b2:	2240      	movs	r2, #64	@ 0x40
 80014b4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b6:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <HAL_DAC_MspInit+0xfc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <HAL_DAC_MspInit+0xfc>)
 80014be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014c2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_DAC_MspInit+0xfc>)
 80014c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014ca:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014cc:	4b17      	ldr	r3, [pc, #92]	@ (800152c <HAL_DAC_MspInit+0xfc>)
 80014ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014d2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80014d4:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_DAC_MspInit+0xfc>)
 80014d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014da:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 80014dc:	4b13      	ldr	r3, [pc, #76]	@ (800152c <HAL_DAC_MspInit+0xfc>)
 80014de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014e2:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e4:	4b11      	ldr	r3, [pc, #68]	@ (800152c <HAL_DAC_MspInit+0xfc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80014ea:	4810      	ldr	r0, [pc, #64]	@ (800152c <HAL_DAC_MspInit+0xfc>)
 80014ec:	f001 f97e 	bl	80027ec <HAL_DMA_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80014f6:	f7ff fef5 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a0b      	ldr	r2, [pc, #44]	@ (800152c <HAL_DAC_MspInit+0xfc>)
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <HAL_DAC_MspInit+0xfc>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2036      	movs	r0, #54	@ 0x36
 800150c:	f000 ff9d 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001510:	2036      	movs	r0, #54	@ 0x36
 8001512:	f000 ffb6 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	@ 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40007400 	.word	0x40007400
 8001524:	40023800 	.word	0x40023800
 8001528:	40020000 	.word	0x40020000
 800152c:	200000f8 	.word	0x200000f8
 8001530:	40026088 	.word	0x40026088

08001534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a26      	ldr	r2, [pc, #152]	@ (80015dc <HAL_TIM_Base_MspInit+0xa8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d10e      	bne.n	8001564 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <HAL_TIM_Base_MspInit+0xac>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	4a24      	ldr	r2, [pc, #144]	@ (80015e0 <HAL_TIM_Base_MspInit+0xac>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	6413      	str	r3, [r2, #64]	@ 0x40
 8001556:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <HAL_TIM_Base_MspInit+0xac>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001562:	e036      	b.n	80015d2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a1e      	ldr	r2, [pc, #120]	@ (80015e4 <HAL_TIM_Base_MspInit+0xb0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d116      	bne.n	800159c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <HAL_TIM_Base_MspInit+0xac>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	4a1a      	ldr	r2, [pc, #104]	@ (80015e0 <HAL_TIM_Base_MspInit+0xac>)
 8001578:	f043 0310 	orr.w	r3, r3, #16
 800157c:	6413      	str	r3, [r2, #64]	@ 0x40
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <HAL_TIM_Base_MspInit+0xac>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	2036      	movs	r0, #54	@ 0x36
 8001590:	f000 ff5b 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001594:	2036      	movs	r0, #54	@ 0x36
 8001596:	f000 ff74 	bl	8002482 <HAL_NVIC_EnableIRQ>
}
 800159a:	e01a      	b.n	80015d2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <HAL_TIM_Base_MspInit+0xb4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d115      	bne.n	80015d2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <HAL_TIM_Base_MspInit+0xac>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	4a0c      	ldr	r2, [pc, #48]	@ (80015e0 <HAL_TIM_Base_MspInit+0xac>)
 80015b0:	f043 0320 	orr.w	r3, r3, #32
 80015b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_TIM_Base_MspInit+0xac>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f003 0320 	and.w	r3, r3, #32
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2037      	movs	r0, #55	@ 0x37
 80015c8:	f000 ff3f 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80015cc:	2037      	movs	r0, #55	@ 0x37
 80015ce:	f000 ff58 	bl	8002482 <HAL_NVIC_EnableIRQ>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40000c00 	.word	0x40000c00
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40001000 	.word	0x40001000
 80015e8:	40001400 	.word	0x40001400

080015ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a19      	ldr	r2, [pc, #100]	@ (8001670 <HAL_UART_MspInit+0x84>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d12c      	bne.n	8001668 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	4a17      	ldr	r2, [pc, #92]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800161c:	6413      	str	r3, [r2, #64]	@ 0x40
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a10      	ldr	r2, [pc, #64]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HAL_UART_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001646:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001658:	2307      	movs	r3, #7
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <HAL_UART_MspInit+0x8c>)
 8001664:	f001 fbac 	bl	8002dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	@ 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40004800 	.word	0x40004800
 8001674:	40023800 	.word	0x40023800
 8001678:	40020c00 	.word	0x40020c00

0800167c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0a0      	sub	sp, #128	@ 0x80
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	225c      	movs	r2, #92	@ 0x5c
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fb9f 	bl	8005de0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016aa:	d14e      	bne.n	800174a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80016ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80016b2:	2300      	movs	r3, #0
 80016b4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 ffcc 	bl	8003658 <HAL_RCCEx_PeriphCLKConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80016c6:	f7ff fe0d 	bl	80012e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <HAL_PCD_MspInit+0xd8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a20      	ldr	r2, [pc, #128]	@ (8001754 <HAL_PCD_MspInit+0xd8>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <HAL_PCD_MspInit+0xd8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016e6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80016ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016f8:	230a      	movs	r3, #10
 80016fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001700:	4619      	mov	r1, r3
 8001702:	4815      	ldr	r0, [pc, #84]	@ (8001758 <HAL_PCD_MspInit+0xdc>)
 8001704:	f001 fb5c 	bl	8002dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001708:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800170c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170e:	2300      	movs	r3, #0
 8001710:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800171a:	4619      	mov	r1, r3
 800171c:	480e      	ldr	r0, [pc, #56]	@ (8001758 <HAL_PCD_MspInit+0xdc>)
 800171e:	f001 fb4f 	bl	8002dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <HAL_PCD_MspInit+0xd8>)
 8001724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001726:	4a0b      	ldr	r2, [pc, #44]	@ (8001754 <HAL_PCD_MspInit+0xd8>)
 8001728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800172c:	6353      	str	r3, [r2, #52]	@ 0x34
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <HAL_PCD_MspInit+0xd8>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	4a07      	ldr	r2, [pc, #28]	@ (8001754 <HAL_PCD_MspInit+0xd8>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800173c:	6453      	str	r3, [r2, #68]	@ 0x44
 800173e:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <HAL_PCD_MspInit+0xd8>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3780      	adds	r7, #128	@ 0x80
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <NMI_Handler+0x4>

08001764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <MemManage_Handler+0x4>

08001774 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <UsageFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b2:	f000 f92b 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_FLAG(COL0_Pin)){
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <EXTI4_IRQHandler+0x20>)
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <EXTI4_IRQHandler+0x16>
    key_pressed = 1;
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <EXTI4_IRQHandler+0x24>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL0_Pin);
 80017d2:	2010      	movs	r0, #16
 80017d4:	f001 fcba 	bl	800314c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40013c00 	.word	0x40013c00
 80017e0:	20000780 	.word	0x20000780

080017e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <DMA1_Stream5_IRQHandler+0x10>)
 80017ea:	f001 f8ad 	bl	8002948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200000f8 	.word	0x200000f8

080017f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  // Checks if any col is active is pressed
  if (__HAL_GPIO_EXTI_GET_FLAG(COL1_Pin) ||
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <EXTI9_5_IRQHandler+0x44>)
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	f003 0320 	and.w	r3, r3, #32
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10b      	bne.n	8001820 <EXTI9_5_IRQHandler+0x28>
      __HAL_GPIO_EXTI_GET_FLAG(COL2_Pin) ||
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <EXTI9_5_IRQHandler+0x44>)
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if (__HAL_GPIO_EXTI_GET_FLAG(COL1_Pin) ||
 8001810:	2b00      	cmp	r3, #0
 8001812:	d105      	bne.n	8001820 <EXTI9_5_IRQHandler+0x28>
      __HAL_GPIO_EXTI_GET_FLAG(COL3_Pin)) {
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <EXTI9_5_IRQHandler+0x44>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      __HAL_GPIO_EXTI_GET_FLAG(COL2_Pin) ||
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <EXTI9_5_IRQHandler+0x2e>
	  key_pressed = 1;
 8001820:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <EXTI9_5_IRQHandler+0x48>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL1_Pin);
 8001826:	2020      	movs	r0, #32
 8001828:	f001 fc90 	bl	800314c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL2_Pin);
 800182c:	2040      	movs	r0, #64	@ 0x40
 800182e:	f001 fc8d 	bl	800314c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL3_Pin);
 8001832:	2080      	movs	r0, #128	@ 0x80
 8001834:	f001 fc8a 	bl	800314c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40013c00 	.word	0x40013c00
 8001840:	20000780 	.word	0x20000780

08001844 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (HAL_GetTick() - dead_time >= 50){
 8001848:	f000 f8f4 	bl	8001a34 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <EXTI15_10_IRQHandler+0x54>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b31      	cmp	r3, #49	@ 0x31
 8001856:	d90f      	bls.n	8001878 <EXTI15_10_IRQHandler+0x34>
	    if (__HAL_GPIO_EXTI_GET_FLAG(USER_Btn_Pin)) {
 8001858:	4b10      	ldr	r3, [pc, #64]	@ (800189c <EXTI15_10_IRQHandler+0x58>)
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d009      	beq.n	8001878 <EXTI15_10_IRQHandler+0x34>
	      // Your code here
	    	filter_en = !filter_en;
 8001864:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <EXTI15_10_IRQHandler+0x5c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf0c      	ite	eq
 800186c:	2301      	moveq	r3, #1
 800186e:	2300      	movne	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <EXTI15_10_IRQHandler+0x5c>)
 8001876:	701a      	strb	r2, [r3, #0]
	    }
	  }

	HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001878:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800187c:	f001 fc66 	bl	800314c <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001880:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001884:	f001 fc62 	bl	800314c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  dead_time = HAL_GetTick();
 8001888:	f000 f8d4 	bl	8001a34 <HAL_GetTick>
 800188c:	4603      	mov	r3, r0
 800188e:	4a02      	ldr	r2, [pc, #8]	@ (8001898 <EXTI15_10_IRQHandler+0x54>)
 8001890:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200008b4 	.word	0x200008b4
 800189c:	40013c00 	.word	0x40013c00
 80018a0:	20000783 	.word	0x20000783

080018a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80018a8:	4803      	ldr	r0, [pc, #12]	@ (80018b8 <TIM6_DAC_IRQHandler+0x14>)
 80018aa:	f000 fe86 	bl	80025ba <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80018ae:	4803      	ldr	r0, [pc, #12]	@ (80018bc <TIM6_DAC_IRQHandler+0x18>)
 80018b0:	f002 fff2 	bl	8004898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200000e4 	.word	0x200000e4
 80018bc:	200001a0 	.word	0x200001a0

080018c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	new_sample = 1;
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <TIM7_IRQHandler+0x14>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018ca:	4803      	ldr	r0, [pc, #12]	@ (80018d8 <TIM7_IRQHandler+0x18>)
 80018cc:	f002 ffe4 	bl	8004898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000784 	.word	0x20000784
 80018d8:	200001e8 	.word	0x200001e8

080018dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <DMA2_Stream0_IRQHandler+0x10>)
 80018e2:	f001 f831 	bl	8002948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000084 	.word	0x20000084

080018f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <SystemInit+0x20>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018fa:	4a05      	ldr	r2, [pc, #20]	@ (8001910 <SystemInit+0x20>)
 80018fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800194c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001918:	480d      	ldr	r0, [pc, #52]	@ (8001950 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800191a:	490e      	ldr	r1, [pc, #56]	@ (8001954 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800191c:	4a0e      	ldr	r2, [pc, #56]	@ (8001958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0b      	ldr	r2, [pc, #44]	@ (800195c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001930:	4c0b      	ldr	r4, [pc, #44]	@ (8001960 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800193e:	f7ff ffd7 	bl	80018f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001942:	f004 fa55 	bl	8005df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001946:	f7fe fe7b 	bl	8000640 <main>
  bx  lr    
 800194a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800194c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001958:	08006dd4 	.word	0x08006dd4
  ldr r2, =_sbss
 800195c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001960:	200008bc 	.word	0x200008bc

08001964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC_IRQHandler>
	...

08001968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800196c:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0d      	ldr	r2, [pc, #52]	@ (80019a8 <HAL_Init+0x40>)
 8001972:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <HAL_Init+0x40>)
 800197e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	@ (80019a8 <HAL_Init+0x40>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800198e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 fd4f 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7ff fca8 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023c00 	.word	0x40023c00

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fd75 	bl	80024ba <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019e8:	f000 fd2f 	bl	800244a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	@ (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000014 	.word	0x20000014
 8001a04:	2000001c 	.word	0x2000001c
 8001a08:	20000018 	.word	0x20000018

08001a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	2000001c 	.word	0x2000001c
 8001a30:	200008b8 	.word	0x200008b8

08001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	200008b8 	.word	0x200008b8

08001a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff ffee 	bl	8001a34 <HAL_GetTick>
 8001a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a64:	d005      	beq.n	8001a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a66:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <HAL_Delay+0x44>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a72:	bf00      	nop
 8001a74:	f7ff ffde 	bl	8001a34 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d8f7      	bhi.n	8001a74 <HAL_Delay+0x28>
  {
  }
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000001c 	.word	0x2000001c

08001a94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e033      	b.n	8001b12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fc44 	bl	8001340 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d118      	bne.n	8001b04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ada:	f023 0302 	bic.w	r3, r3, #2
 8001ade:	f043 0202 	orr.w	r2, r3, #2
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fab4 	bl	8002054 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f023 0303 	bic.w	r3, r3, #3
 8001afa:	f043 0201 	orr.w	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b02:	e001      	b.n	8001b08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_Start+0x1a>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e0b2      	b.n	8001c9c <HAL_ADC_Start+0x180>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d018      	beq.n	8001b7e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b5c:	4b52      	ldr	r3, [pc, #328]	@ (8001ca8 <HAL_ADC_Start+0x18c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a52      	ldr	r2, [pc, #328]	@ (8001cac <HAL_ADC_Start+0x190>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0c9a      	lsrs	r2, r3, #18
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b70:	e002      	b.n	8001b78 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f9      	bne.n	8001b72 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d17a      	bne.n	8001c82 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bb6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bca:	d106      	bne.n	8001bda <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd0:	f023 0206 	bic.w	r2, r3, #6
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bd8:	e002      	b.n	8001be0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be8:	4b31      	ldr	r3, [pc, #196]	@ (8001cb0 <HAL_ADC_Start+0x194>)
 8001bea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001bf4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d12a      	bne.n	8001c58 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a2b      	ldr	r2, [pc, #172]	@ (8001cb4 <HAL_ADC_Start+0x198>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d015      	beq.n	8001c38 <HAL_ADC_Start+0x11c>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a29      	ldr	r2, [pc, #164]	@ (8001cb8 <HAL_ADC_Start+0x19c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d105      	bne.n	8001c22 <HAL_ADC_Start+0x106>
 8001c16:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <HAL_ADC_Start+0x194>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00a      	beq.n	8001c38 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a25      	ldr	r2, [pc, #148]	@ (8001cbc <HAL_ADC_Start+0x1a0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d136      	bne.n	8001c9a <HAL_ADC_Start+0x17e>
 8001c2c:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <HAL_ADC_Start+0x194>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d130      	bne.n	8001c9a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d129      	bne.n	8001c9a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	e020      	b.n	8001c9a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a15      	ldr	r2, [pc, #84]	@ (8001cb4 <HAL_ADC_Start+0x198>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d11b      	bne.n	8001c9a <HAL_ADC_Start+0x17e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d114      	bne.n	8001c9a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	e00b      	b.n	8001c9a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f043 0210 	orr.w	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	f043 0201 	orr.w	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	20000014 	.word	0x20000014
 8001cac:	431bde83 	.word	0x431bde83
 8001cb0:	40012300 	.word	0x40012300
 8001cb4:	40012000 	.word	0x40012000
 8001cb8:	40012100 	.word	0x40012100
 8001cbc:	40012200 	.word	0x40012200

08001cc0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cdc:	d113      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ce8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cec:	d10b      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f043 0220 	orr.w	r2, r3, #32
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e063      	b.n	8001dce <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d06:	f7ff fe95 	bl	8001a34 <HAL_GetTick>
 8001d0a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d0c:	e021      	b.n	8001d52 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d14:	d01d      	beq.n	8001d52 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <HAL_ADC_PollForConversion+0x6c>
 8001d1c:	f7ff fe8a 	bl	8001a34 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d212      	bcs.n	8001d52 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d00b      	beq.n	8001d52 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f043 0204 	orr.w	r2, r3, #4
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e03d      	b.n	8001dce <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d1d6      	bne.n	8001d0e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0212 	mvn.w	r2, #18
 8001d68:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d123      	bne.n	8001dcc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d11f      	bne.n	8001dcc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d92:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d006      	beq.n	8001da8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d111      	bne.n	8001dcc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	f043 0201 	orr.w	r2, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x1c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e113      	b.n	8002034 <HAL_ADC_ConfigChannel+0x244>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b09      	cmp	r3, #9
 8001e1a:	d925      	bls.n	8001e68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68d9      	ldr	r1, [r3, #12]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	3b1e      	subs	r3, #30
 8001e32:	2207      	movs	r2, #7
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43da      	mvns	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	400a      	ands	r2, r1
 8001e40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68d9      	ldr	r1, [r3, #12]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	4603      	mov	r3, r0
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4403      	add	r3, r0
 8001e5a:	3b1e      	subs	r3, #30
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	e022      	b.n	8001eae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6919      	ldr	r1, [r3, #16]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	400a      	ands	r2, r1
 8001e8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6919      	ldr	r1, [r3, #16]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4403      	add	r3, r0
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d824      	bhi.n	8001f00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3b05      	subs	r3, #5
 8001ec8:	221f      	movs	r2, #31
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	3b05      	subs	r3, #5
 8001ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001efe:	e04c      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b0c      	cmp	r3, #12
 8001f06:	d824      	bhi.n	8001f52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	3b23      	subs	r3, #35	@ 0x23
 8001f1a:	221f      	movs	r2, #31
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43da      	mvns	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	400a      	ands	r2, r1
 8001f28:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	3b23      	subs	r3, #35	@ 0x23
 8001f44:	fa00 f203 	lsl.w	r2, r0, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f50:	e023      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	3b41      	subs	r3, #65	@ 0x41
 8001f64:	221f      	movs	r2, #31
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	400a      	ands	r2, r1
 8001f72:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	4618      	mov	r0, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3b41      	subs	r3, #65	@ 0x41
 8001f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f9a:	4b29      	ldr	r3, [pc, #164]	@ (8002040 <HAL_ADC_ConfigChannel+0x250>)
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a28      	ldr	r2, [pc, #160]	@ (8002044 <HAL_ADC_ConfigChannel+0x254>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d10f      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x1d8>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b12      	cmp	r3, #18
 8001fae:	d10b      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8002044 <HAL_ADC_ConfigChannel+0x254>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d12b      	bne.n	800202a <HAL_ADC_ConfigChannel+0x23a>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002048 <HAL_ADC_ConfigChannel+0x258>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d003      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x1f4>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b11      	cmp	r3, #17
 8001fe2:	d122      	bne.n	800202a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a11      	ldr	r2, [pc, #68]	@ (8002048 <HAL_ADC_ConfigChannel+0x258>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d111      	bne.n	800202a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002006:	4b11      	ldr	r3, [pc, #68]	@ (800204c <HAL_ADC_ConfigChannel+0x25c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a11      	ldr	r2, [pc, #68]	@ (8002050 <HAL_ADC_ConfigChannel+0x260>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	0c9a      	lsrs	r2, r3, #18
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800201c:	e002      	b.n	8002024 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3b01      	subs	r3, #1
 8002022:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f9      	bne.n	800201e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	40012300 	.word	0x40012300
 8002044:	40012000 	.word	0x40012000
 8002048:	10000012 	.word	0x10000012
 800204c:	20000014 	.word	0x20000014
 8002050:	431bde83 	.word	0x431bde83

08002054 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800205c:	4b79      	ldr	r3, [pc, #484]	@ (8002244 <ADC_Init+0x1f0>)
 800205e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	431a      	orrs	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002088:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6859      	ldr	r1, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	021a      	lsls	r2, r3, #8
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6899      	ldr	r1, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e6:	4a58      	ldr	r2, [pc, #352]	@ (8002248 <ADC_Init+0x1f4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d022      	beq.n	8002132 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6899      	ldr	r1, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800211c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6899      	ldr	r1, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	e00f      	b.n	8002152 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002140:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002150:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0202 	bic.w	r2, r2, #2
 8002160:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6899      	ldr	r1, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	7e1b      	ldrb	r3, [r3, #24]
 800216c:	005a      	lsls	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01b      	beq.n	80021b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800218e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800219e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6859      	ldr	r1, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	3b01      	subs	r3, #1
 80021ac:	035a      	lsls	r2, r3, #13
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	e007      	b.n	80021c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80021d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	051a      	lsls	r2, r3, #20
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6899      	ldr	r1, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800220a:	025a      	lsls	r2, r3, #9
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002222:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6899      	ldr	r1, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	029a      	lsls	r2, r3, #10
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	609a      	str	r2, [r3, #8]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40012300 	.word	0x40012300
 8002248:	0f000001 	.word	0x0f000001

0800224c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800225c:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002268:	4013      	ands	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800227c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227e:	4a04      	ldr	r2, [pc, #16]	@ (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60d3      	str	r3, [r2, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002298:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <__NVIC_GetPriorityGrouping+0x18>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 0307 	and.w	r3, r3, #7
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	db0b      	blt.n	80022da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	f003 021f 	and.w	r2, r3, #31
 80022c8:	4907      	ldr	r1, [pc, #28]	@ (80022e8 <__NVIC_EnableIRQ+0x38>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2001      	movs	r0, #1
 80022d2:	fa00 f202 	lsl.w	r2, r0, r2
 80022d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000e100 	.word	0xe000e100

080022ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db12      	blt.n	8002324 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	490a      	ldr	r1, [pc, #40]	@ (8002330 <__NVIC_DisableIRQ+0x44>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2001      	movs	r0, #1
 800230e:	fa00 f202 	lsl.w	r2, r0, r2
 8002312:	3320      	adds	r3, #32
 8002314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002318:	f3bf 8f4f 	dsb	sy
}
 800231c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800231e:	f3bf 8f6f 	isb	sy
}
 8002322:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	@ (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	@ (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	@ 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	@ 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002400:	d301      	bcc.n	8002406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002402:	2301      	movs	r3, #1
 8002404:	e00f      	b.n	8002426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002406:	4a0a      	ldr	r2, [pc, #40]	@ (8002430 <SysTick_Config+0x40>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240e:	210f      	movs	r1, #15
 8002410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002414:	f7ff ff8e 	bl	8002334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002418:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <SysTick_Config+0x40>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241e:	4b04      	ldr	r3, [pc, #16]	@ (8002430 <SysTick_Config+0x40>)
 8002420:	2207      	movs	r2, #7
 8002422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	e000e010 	.word	0xe000e010

08002434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ff05 	bl	800224c <__NVIC_SetPriorityGrouping>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245c:	f7ff ff1a 	bl	8002294 <__NVIC_GetPriorityGrouping>
 8002460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	6978      	ldr	r0, [r7, #20]
 8002468:	f7ff ff8e 	bl	8002388 <NVIC_EncodePriority>
 800246c:	4602      	mov	r2, r0
 800246e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff5d 	bl	8002334 <__NVIC_SetPriority>
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff0d 	bl	80022b0 <__NVIC_EnableIRQ>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff1d 	bl	80022ec <__NVIC_DisableIRQ>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ff94 	bl	80023f0 <SysTick_Config>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e014      	b.n	800250e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	791b      	ldrb	r3, [r3, #4]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7fe ff9b 	bl	8001430 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2202      	movs	r2, #2
 80024fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	795b      	ldrb	r3, [r3, #5]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_DAC_Start+0x16>
 8002528:	2302      	movs	r3, #2
 800252a:	e040      	b.n	80025ae <HAL_DAC_Start+0x98>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6819      	ldr	r1, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2201      	movs	r2, #1
 8002546:	409a      	lsls	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10f      	bne.n	8002576 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002560:	2b3c      	cmp	r3, #60	@ 0x3c
 8002562:	d11d      	bne.n	80025a0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	e014      	b.n	80025a0 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	213c      	movs	r1, #60	@ 0x3c
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	429a      	cmp	r2, r3
 800258e:	d107      	bne.n	80025a0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0202 	orr.w	r2, r2, #2
 800259e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025d0:	d120      	bne.n	8002614 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025e0:	d118      	bne.n	8002614 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2204      	movs	r2, #4
 80025e6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800260c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f852 	bl	80026b8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800261e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002622:	d120      	bne.n	8002666 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800262a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800262e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002632:	d118      	bne.n	8002666 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2204      	movs	r2, #4
 8002638:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f043 0202 	orr.w	r2, r3, #2
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800264e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800265e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f8b9 	bl	80027d8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800266e:	b480      	push	{r7}
 8002670:	b087      	sub	sp, #28
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	3308      	adds	r3, #8
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e004      	b.n	80026a2 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	3314      	adds	r3, #20
 80026a0:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	461a      	mov	r2, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	795b      	ldrb	r3, [r3, #5]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_DAC_ConfigChannel+0x18>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e03c      	b.n	800275e <HAL_DAC_ConfigChannel+0x92>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2202      	movs	r2, #2
 80026ee:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	4013      	ands	r3, r2
 800270c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	22c0      	movs	r2, #192	@ 0xc0
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	400a      	ands	r2, r1
 800274e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 800276a:	b480      	push	{r7}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	795b      	ldrb	r3, [r3, #5]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_DACEx_TriangleWaveGenerate+0x18>
 800277e:	2302      	movs	r3, #2
 8002780:	e024      	b.n	80027cc <HAL_DACEx_TriangleWaveGenerate+0x62>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2202      	movs	r2, #2
 800278c:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	ea02 0103 	and.w	r1, r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	409a      	lsls	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027f8:	f7ff f91c 	bl	8001a34 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e099      	b.n	800293c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002828:	e00f      	b.n	800284a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800282a:	f7ff f903 	bl	8001a34 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b05      	cmp	r3, #5
 8002836:	d908      	bls.n	800284a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2203      	movs	r2, #3
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e078      	b.n	800293c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e8      	bne.n	800282a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4b38      	ldr	r3, [pc, #224]	@ (8002944 <HAL_DMA_Init+0x158>)
 8002864:	4013      	ands	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002876:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002882:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d107      	bne.n	80028b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	4313      	orrs	r3, r2
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f023 0307 	bic.w	r3, r3, #7
 80028ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d117      	bne.n	800290e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00e      	beq.n	800290e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f9e9 	bl	8002cc8 <DMA_CheckFifoParam>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2240      	movs	r2, #64	@ 0x40
 8002900:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800290a:	2301      	movs	r3, #1
 800290c:	e016      	b.n	800293c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f9a0 	bl	8002c5c <DMA_CalcBaseAndBitshift>
 800291c:	4603      	mov	r3, r0
 800291e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002924:	223f      	movs	r2, #63	@ 0x3f
 8002926:	409a      	lsls	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	f010803f 	.word	0xf010803f

08002948 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002954:	4b8e      	ldr	r3, [pc, #568]	@ (8002b90 <HAL_DMA_IRQHandler+0x248>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a8e      	ldr	r2, [pc, #568]	@ (8002b94 <HAL_DMA_IRQHandler+0x24c>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	0a9b      	lsrs	r3, r3, #10
 8002960:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002966:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002972:	2208      	movs	r2, #8
 8002974:	409a      	lsls	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d01a      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d013      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0204 	bic.w	r2, r2, #4
 800299a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a0:	2208      	movs	r2, #8
 80029a2:	409a      	lsls	r2, r3
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b8:	2201      	movs	r2, #1
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d012      	beq.n	80029ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d6:	2201      	movs	r2, #1
 80029d8:	409a      	lsls	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e2:	f043 0202 	orr.w	r2, r3, #2
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ee:	2204      	movs	r2, #4
 80029f0:	409a      	lsls	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d012      	beq.n	8002a20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00b      	beq.n	8002a20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a18:	f043 0204 	orr.w	r2, r3, #4
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a24:	2210      	movs	r2, #16
 8002a26:	409a      	lsls	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d043      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d03c      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a42:	2210      	movs	r2, #16
 8002a44:	409a      	lsls	r2, r3
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d018      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d108      	bne.n	8002a78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d024      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	4798      	blx	r3
 8002a76:	e01f      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01b      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
 8002a88:	e016      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d107      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0208 	bic.w	r2, r2, #8
 8002aa6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abc:	2220      	movs	r2, #32
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 808f 	beq.w	8002be8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8087 	beq.w	8002be8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ade:	2220      	movs	r2, #32
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d136      	bne.n	8002b60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0216 	bic.w	r2, r2, #22
 8002b00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <HAL_DMA_IRQHandler+0x1da>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0208 	bic.w	r2, r2, #8
 8002b30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b36:	223f      	movs	r2, #63	@ 0x3f
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d07e      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	4798      	blx	r3
        }
        return;
 8002b5e:	e079      	b.n	8002c54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01d      	beq.n	8002baa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10d      	bne.n	8002b98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d031      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
 8002b8c:	e02c      	b.n	8002be8 <HAL_DMA_IRQHandler+0x2a0>
 8002b8e:	bf00      	nop
 8002b90:	20000014 	.word	0x20000014
 8002b94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d023      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
 8002ba8:	e01e      	b.n	8002be8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10f      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0210 	bic.w	r2, r2, #16
 8002bc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d032      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d022      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2205      	movs	r2, #5
 8002c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	3301      	adds	r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d307      	bcc.n	8002c30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f2      	bne.n	8002c14 <HAL_DMA_IRQHandler+0x2cc>
 8002c2e:	e000      	b.n	8002c32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
 8002c52:	e000      	b.n	8002c56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c54:	bf00      	nop
    }
  }
}
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	3b10      	subs	r3, #16
 8002c6c:	4a14      	ldr	r2, [pc, #80]	@ (8002cc0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c76:	4a13      	ldr	r2, [pc, #76]	@ (8002cc4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d909      	bls.n	8002c9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c92:	f023 0303 	bic.w	r3, r3, #3
 8002c96:	1d1a      	adds	r2, r3, #4
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c9c:	e007      	b.n	8002cae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	aaaaaaab 	.word	0xaaaaaaab
 8002cc4:	08006dbc 	.word	0x08006dbc

08002cc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11f      	bne.n	8002d22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d856      	bhi.n	8002d96 <DMA_CheckFifoParam+0xce>
 8002ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf0 <DMA_CheckFifoParam+0x28>)
 8002cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002d01 	.word	0x08002d01
 8002cf4:	08002d13 	.word	0x08002d13
 8002cf8:	08002d01 	.word	0x08002d01
 8002cfc:	08002d97 	.word	0x08002d97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d046      	beq.n	8002d9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d10:	e043      	b.n	8002d9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d1a:	d140      	bne.n	8002d9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d20:	e03d      	b.n	8002d9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d2a:	d121      	bne.n	8002d70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d837      	bhi.n	8002da2 <DMA_CheckFifoParam+0xda>
 8002d32:	a201      	add	r2, pc, #4	@ (adr r2, 8002d38 <DMA_CheckFifoParam+0x70>)
 8002d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d38:	08002d49 	.word	0x08002d49
 8002d3c:	08002d4f 	.word	0x08002d4f
 8002d40:	08002d49 	.word	0x08002d49
 8002d44:	08002d61 	.word	0x08002d61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d4c:	e030      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d025      	beq.n	8002da6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5e:	e022      	b.n	8002da6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d68:	d11f      	bne.n	8002daa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d6e:	e01c      	b.n	8002daa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d903      	bls.n	8002d7e <DMA_CheckFifoParam+0xb6>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d003      	beq.n	8002d84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d7c:	e018      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
      break;
 8002d82:	e015      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00e      	beq.n	8002dae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
      break;
 8002d94:	e00b      	b.n	8002dae <DMA_CheckFifoParam+0xe6>
      break;
 8002d96:	bf00      	nop
 8002d98:	e00a      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e008      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e006      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002da2:	bf00      	nop
 8002da4:	e004      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002da6:	bf00      	nop
 8002da8:	e002      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002daa:	bf00      	nop
 8002dac:	e000      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
    }
  } 
  
  return status; 
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop

08002dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	@ 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	e165      	b.n	80030a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ddc:	2201      	movs	r2, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	f040 8154 	bne.w	80030a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d005      	beq.n	8002e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d130      	bne.n	8002e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 0201 	and.w	r2, r3, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d017      	beq.n	8002eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d123      	bne.n	8002f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	08da      	lsrs	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3208      	adds	r2, #8
 8002ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	08da      	lsrs	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3208      	adds	r2, #8
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0203 	and.w	r2, r3, #3
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80ae 	beq.w	80030a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80030c0 <HAL_GPIO_Init+0x300>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4e:	4a5c      	ldr	r2, [pc, #368]	@ (80030c0 <HAL_GPIO_Init+0x300>)
 8002f50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f56:	4b5a      	ldr	r3, [pc, #360]	@ (80030c0 <HAL_GPIO_Init+0x300>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f62:	4a58      	ldr	r2, [pc, #352]	@ (80030c4 <HAL_GPIO_Init+0x304>)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	089b      	lsrs	r3, r3, #2
 8002f68:	3302      	adds	r3, #2
 8002f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	220f      	movs	r2, #15
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4f      	ldr	r2, [pc, #316]	@ (80030c8 <HAL_GPIO_Init+0x308>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d025      	beq.n	8002fda <HAL_GPIO_Init+0x21a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4e      	ldr	r2, [pc, #312]	@ (80030cc <HAL_GPIO_Init+0x30c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01f      	beq.n	8002fd6 <HAL_GPIO_Init+0x216>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4d      	ldr	r2, [pc, #308]	@ (80030d0 <HAL_GPIO_Init+0x310>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d019      	beq.n	8002fd2 <HAL_GPIO_Init+0x212>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4c      	ldr	r2, [pc, #304]	@ (80030d4 <HAL_GPIO_Init+0x314>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_GPIO_Init+0x20e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80030d8 <HAL_GPIO_Init+0x318>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00d      	beq.n	8002fca <HAL_GPIO_Init+0x20a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4a      	ldr	r2, [pc, #296]	@ (80030dc <HAL_GPIO_Init+0x31c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <HAL_GPIO_Init+0x206>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a49      	ldr	r2, [pc, #292]	@ (80030e0 <HAL_GPIO_Init+0x320>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_GPIO_Init+0x202>
 8002fbe:	2306      	movs	r3, #6
 8002fc0:	e00c      	b.n	8002fdc <HAL_GPIO_Init+0x21c>
 8002fc2:	2307      	movs	r3, #7
 8002fc4:	e00a      	b.n	8002fdc <HAL_GPIO_Init+0x21c>
 8002fc6:	2305      	movs	r3, #5
 8002fc8:	e008      	b.n	8002fdc <HAL_GPIO_Init+0x21c>
 8002fca:	2304      	movs	r3, #4
 8002fcc:	e006      	b.n	8002fdc <HAL_GPIO_Init+0x21c>
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e004      	b.n	8002fdc <HAL_GPIO_Init+0x21c>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e002      	b.n	8002fdc <HAL_GPIO_Init+0x21c>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <HAL_GPIO_Init+0x21c>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	f002 0203 	and.w	r2, r2, #3
 8002fe2:	0092      	lsls	r2, r2, #2
 8002fe4:	4093      	lsls	r3, r2
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fec:	4935      	ldr	r1, [pc, #212]	@ (80030c4 <HAL_GPIO_Init+0x304>)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80030e4 <HAL_GPIO_Init+0x324>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800301e:	4a31      	ldr	r2, [pc, #196]	@ (80030e4 <HAL_GPIO_Init+0x324>)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003024:	4b2f      	ldr	r3, [pc, #188]	@ (80030e4 <HAL_GPIO_Init+0x324>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003048:	4a26      	ldr	r2, [pc, #152]	@ (80030e4 <HAL_GPIO_Init+0x324>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800304e:	4b25      	ldr	r3, [pc, #148]	@ (80030e4 <HAL_GPIO_Init+0x324>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003072:	4a1c      	ldr	r2, [pc, #112]	@ (80030e4 <HAL_GPIO_Init+0x324>)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003078:	4b1a      	ldr	r3, [pc, #104]	@ (80030e4 <HAL_GPIO_Init+0x324>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800309c:	4a11      	ldr	r2, [pc, #68]	@ (80030e4 <HAL_GPIO_Init+0x324>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3301      	adds	r3, #1
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	2b0f      	cmp	r3, #15
 80030ac:	f67f ae96 	bls.w	8002ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	3724      	adds	r7, #36	@ 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40013800 	.word	0x40013800
 80030c8:	40020000 	.word	0x40020000
 80030cc:	40020400 	.word	0x40020400
 80030d0:	40020800 	.word	0x40020800
 80030d4:	40020c00 	.word	0x40020c00
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40021400 	.word	0x40021400
 80030e0:	40021800 	.word	0x40021800
 80030e4:	40013c00 	.word	0x40013c00

080030e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	887b      	ldrh	r3, [r7, #2]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
 8003104:	e001      	b.n	800310a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800310a:	7bfb      	ldrb	r3, [r7, #15]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	807b      	strh	r3, [r7, #2]
 8003124:	4613      	mov	r3, r2
 8003126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003128:	787b      	ldrb	r3, [r7, #1]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800312e:	887a      	ldrh	r2, [r7, #2]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003134:	e003      	b.n	800313e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003136:	887b      	ldrh	r3, [r7, #2]
 8003138:	041a      	lsls	r2, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	619a      	str	r2, [r3, #24]
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003156:	4b08      	ldr	r3, [pc, #32]	@ (8003178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d006      	beq.n	8003170 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003162:	4a05      	ldr	r2, [pc, #20]	@ (8003178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f806 	bl	800317c <HAL_GPIO_EXTI_Callback>
  }
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40013c00 	.word	0x40013c00

0800317c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003192:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003194:	b08f      	sub	sp, #60	@ 0x3c
 8003196:	af0a      	add	r7, sp, #40	@ 0x28
 8003198:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e116      	b.n	80033d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe fa5c 	bl	800167c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2203      	movs	r2, #3
 80031c8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f002 fa47 	bl	8005676 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	687e      	ldr	r6, [r7, #4]
 80031f0:	466d      	mov	r5, sp
 80031f2:	f106 0410 	add.w	r4, r6, #16
 80031f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003202:	e885 0003 	stmia.w	r5, {r0, r1}
 8003206:	1d33      	adds	r3, r6, #4
 8003208:	cb0e      	ldmia	r3, {r1, r2, r3}
 800320a:	6838      	ldr	r0, [r7, #0]
 800320c:	f002 f9d2 	bl	80055b4 <USB_CoreInit>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e0d7      	b.n	80033d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f002 fa35 	bl	8005698 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322e:	2300      	movs	r3, #0
 8003230:	73fb      	strb	r3, [r7, #15]
 8003232:	e04a      	b.n	80032ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	333d      	adds	r3, #61	@ 0x3d
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	333c      	adds	r3, #60	@ 0x3c
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	b298      	uxth	r0, r3
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	3344      	adds	r3, #68	@ 0x44
 8003270:	4602      	mov	r2, r0
 8003272:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	3340      	adds	r3, #64	@ 0x40
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	3348      	adds	r3, #72	@ 0x48
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	334c      	adds	r3, #76	@ 0x4c
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	3354      	adds	r3, #84	@ 0x54
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	3301      	adds	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
 80032ca:	7bfa      	ldrb	r2, [r7, #15]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d3af      	bcc.n	8003234 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
 80032d8:	e044      	b.n	8003364 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032f0:	7bfa      	ldrb	r2, [r7, #15]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003348:	7bfa      	ldrb	r2, [r7, #15]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	3301      	adds	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	429a      	cmp	r2, r3
 800336c:	d3b5      	bcc.n	80032da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	687e      	ldr	r6, [r7, #4]
 8003376:	466d      	mov	r5, sp
 8003378:	f106 0410 	add.w	r4, r6, #16
 800337c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800337e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003384:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003388:	e885 0003 	stmia.w	r5, {r0, r1}
 800338c:	1d33      	adds	r3, r6, #4
 800338e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003390:	6838      	ldr	r0, [r7, #0]
 8003392:	f002 f9cd 	bl	8005730 <USB_DevInit>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e014      	b.n	80033d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d102      	bne.n	80033c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f80a 	bl	80033da <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f002 fb8b 	bl	8005ae6 <USB_DevDisconnect>

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033da <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033da:	b480      	push	{r7}
 80033dc:	b085      	sub	sp, #20
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800340c:	f043 0303 	orr.w	r3, r3, #3
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0cc      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b68      	ldr	r3, [pc, #416]	@ (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d90c      	bls.n	8003460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b65      	ldr	r3, [pc, #404]	@ (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b63      	ldr	r3, [pc, #396]	@ (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0b8      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d020      	beq.n	80034ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003478:	4b59      	ldr	r3, [pc, #356]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4a58      	ldr	r2, [pc, #352]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003490:	4b53      	ldr	r3, [pc, #332]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	4a52      	ldr	r2, [pc, #328]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800349a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800349c:	4b50      	ldr	r3, [pc, #320]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	494d      	ldr	r1, [pc, #308]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d044      	beq.n	8003544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	4b47      	ldr	r3, [pc, #284]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d119      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e07f      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d003      	beq.n	80034e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e2:	4b3f      	ldr	r3, [pc, #252]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e06f      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f2:	4b3b      	ldr	r3, [pc, #236]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e067      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003502:	4b37      	ldr	r3, [pc, #220]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4934      	ldr	r1, [pc, #208]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	4313      	orrs	r3, r2
 8003512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003514:	f7fe fa8e 	bl	8001a34 <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	e00a      	b.n	8003532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7fe fa8a 	bl	8001a34 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e04f      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	4b2b      	ldr	r3, [pc, #172]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 020c 	and.w	r2, r3, #12
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	429a      	cmp	r2, r3
 8003542:	d1eb      	bne.n	800351c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003544:	4b25      	ldr	r3, [pc, #148]	@ (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d20c      	bcs.n	800356c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b22      	ldr	r3, [pc, #136]	@ (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b20      	ldr	r3, [pc, #128]	@ (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e032      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003578:	4b19      	ldr	r3, [pc, #100]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4916      	ldr	r1, [pc, #88]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003596:	4b12      	ldr	r3, [pc, #72]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	490e      	ldr	r1, [pc, #56]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035aa:	f000 fb7f 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 80035ae:	4602      	mov	r2, r0
 80035b0:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	490a      	ldr	r1, [pc, #40]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 80035bc:	5ccb      	ldrb	r3, [r1, r3]
 80035be:	fa22 f303 	lsr.w	r3, r2, r3
 80035c2:	4a09      	ldr	r2, [pc, #36]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035c6:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <HAL_RCC_ClockConfig+0x1c8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe f9ee 	bl	80019ac <HAL_InitTick>

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023c00 	.word	0x40023c00
 80035e0:	40023800 	.word	0x40023800
 80035e4:	08006da4 	.word	0x08006da4
 80035e8:	20000014 	.word	0x20000014
 80035ec:	20000018 	.word	0x20000018

080035f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f4:	4b03      	ldr	r3, [pc, #12]	@ (8003604 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f6:	681b      	ldr	r3, [r3, #0]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20000014 	.word	0x20000014

08003608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800360c:	f7ff fff0 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 8003610:	4602      	mov	r2, r0
 8003612:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	0a9b      	lsrs	r3, r3, #10
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	4903      	ldr	r1, [pc, #12]	@ (800362c <HAL_RCC_GetPCLK1Freq+0x24>)
 800361e:	5ccb      	ldrb	r3, [r1, r3]
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003624:	4618      	mov	r0, r3
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40023800 	.word	0x40023800
 800362c:	08006db4 	.word	0x08006db4

08003630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003634:	f7ff ffdc 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 8003638:	4602      	mov	r2, r0
 800363a:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	0b5b      	lsrs	r3, r3, #13
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	4903      	ldr	r1, [pc, #12]	@ (8003654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003646:	5ccb      	ldrb	r3, [r1, r3]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	08006db4 	.word	0x08006db4

08003658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08c      	sub	sp, #48	@ 0x30
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d010      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003690:	4b6f      	ldr	r3, [pc, #444]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003692:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003696:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369e:	496c      	ldr	r1, [pc, #432]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80036ae:	2301      	movs	r3, #1
 80036b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d010      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80036be:	4b64      	ldr	r3, [pc, #400]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036c4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036cc:	4960      	ldr	r1, [pc, #384]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80036dc:	2301      	movs	r3, #1
 80036de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d017      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036ec:	4b58      	ldr	r3, [pc, #352]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	4955      	ldr	r1, [pc, #340]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800370a:	d101      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800370c:	2301      	movs	r3, #1
 800370e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003718:	2301      	movs	r3, #1
 800371a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d017      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003728:	4b49      	ldr	r3, [pc, #292]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800372a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800372e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003736:	4946      	ldr	r1, [pc, #280]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003742:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003746:	d101      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003748:	2301      	movs	r3, #1
 800374a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003754:	2301      	movs	r3, #1
 8003756:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 808a 	beq.w	800387a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	4b39      	ldr	r3, [pc, #228]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	4a38      	ldr	r2, [pc, #224]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003774:	6413      	str	r3, [r2, #64]	@ 0x40
 8003776:	4b36      	ldr	r3, [pc, #216]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003782:	4b34      	ldr	r3, [pc, #208]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a33      	ldr	r2, [pc, #204]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800378c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800378e:	f7fe f951 	bl	8001a34 <HAL_GetTick>
 8003792:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003796:	f7fe f94d 	bl	8001a34 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e278      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037b4:	4b26      	ldr	r3, [pc, #152]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037bc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d02f      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037cc:	6a3a      	ldr	r2, [r7, #32]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d028      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037da:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80037e8:	4a19      	ldr	r2, [pc, #100]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037ee:	4b18      	ldr	r3, [pc, #96]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d114      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80037fa:	f7fe f91b 	bl	8001a34 <HAL_GetTick>
 80037fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fe f917 	bl	8001a34 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d901      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e240      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003818:	4b0d      	ldr	r3, [pc, #52]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ee      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003828:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800382c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003830:	d114      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003832:	4b07      	ldr	r3, [pc, #28]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003846:	4902      	ldr	r1, [pc, #8]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003848:	4313      	orrs	r3, r2
 800384a:	608b      	str	r3, [r1, #8]
 800384c:	e00c      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800
 8003854:	40007000 	.word	0x40007000
 8003858:	42470e40 	.word	0x42470e40
 800385c:	4b4a      	ldr	r3, [pc, #296]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a49      	ldr	r2, [pc, #292]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003862:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003866:	6093      	str	r3, [r2, #8]
 8003868:	4b47      	ldr	r3, [pc, #284]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800386a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003874:	4944      	ldr	r1, [pc, #272]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003876:	4313      	orrs	r3, r2
 8003878:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	2b00      	cmp	r3, #0
 8003884:	d004      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800388c:	4b3f      	ldr	r3, [pc, #252]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800388e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800389c:	4b3a      	ldr	r3, [pc, #232]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800389e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038aa:	4937      	ldr	r1, [pc, #220]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038be:	4b32      	ldr	r3, [pc, #200]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038c4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038cc:	492e      	ldr	r1, [pc, #184]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d011      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038e0:	4b29      	ldr	r3, [pc, #164]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ee:	4926      	ldr	r1, [pc, #152]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038fe:	d101      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003900:	2301      	movs	r3, #1
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003910:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003916:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	491a      	ldr	r1, [pc, #104]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800392e:	2b00      	cmp	r3, #0
 8003930:	d011      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003932:	4b15      	ldr	r3, [pc, #84]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003938:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003940:	4911      	ldr	r1, [pc, #68]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003950:	d101      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003952:	2301      	movs	r3, #1
 8003954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d005      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003964:	f040 80ff 	bne.w	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003968:	4b09      	ldr	r3, [pc, #36]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800396e:	f7fe f861 	bl	8001a34 <HAL_GetTick>
 8003972:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003974:	e00e      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003976:	f7fe f85d 	bl	8001a34 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d907      	bls.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e188      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003988:	40023800 	.word	0x40023800
 800398c:	424711e0 	.word	0x424711e0
 8003990:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003994:	4b7e      	ldr	r3, [pc, #504]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ea      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d009      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d028      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d124      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80039c8:	4b71      	ldr	r3, [pc, #452]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039ce:	0c1b      	lsrs	r3, r3, #16
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	3301      	adds	r3, #1
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039da:	4b6d      	ldr	r3, [pc, #436]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039e0:	0e1b      	lsrs	r3, r3, #24
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	019b      	lsls	r3, r3, #6
 80039f2:	431a      	orrs	r2, r3
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	3b01      	subs	r3, #1
 80039fa:	041b      	lsls	r3, r3, #16
 80039fc:	431a      	orrs	r2, r3
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	061b      	lsls	r3, r3, #24
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	071b      	lsls	r3, r3, #28
 8003a0a:	4961      	ldr	r1, [pc, #388]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d004      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d035      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a3c:	d130      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a3e:	4b54      	ldr	r3, [pc, #336]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a50:	4b4f      	ldr	r3, [pc, #316]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a56:	0f1b      	lsrs	r3, r3, #28
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	019b      	lsls	r3, r3, #6
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	041b      	lsls	r3, r3, #16
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	061b      	lsls	r3, r3, #24
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	071b      	lsls	r3, r3, #28
 8003a80:	4943      	ldr	r1, [pc, #268]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a88:	4b41      	ldr	r3, [pc, #260]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a8e:	f023 021f 	bic.w	r2, r3, #31
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a96:	3b01      	subs	r3, #1
 8003a98:	493d      	ldr	r1, [pc, #244]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d029      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ab4:	d124      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ab6:	4b36      	ldr	r3, [pc, #216]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ac8:	4b31      	ldr	r3, [pc, #196]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ace:	0f1b      	lsrs	r3, r3, #28
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	019b      	lsls	r3, r3, #6
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	041b      	lsls	r3, r3, #16
 8003aec:	431a      	orrs	r2, r3
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	431a      	orrs	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	071b      	lsls	r3, r3, #28
 8003af8:	4925      	ldr	r1, [pc, #148]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d016      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	019b      	lsls	r3, r3, #6
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	085b      	lsrs	r3, r3, #1
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	071b      	lsls	r3, r3, #28
 8003b32:	4917      	ldr	r1, [pc, #92]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b3a:	4b16      	ldr	r3, [pc, #88]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b40:	f7fd ff78 	bl	8001a34 <HAL_GetTick>
 8003b44:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b48:	f7fd ff74 	bl	8001a34 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e09f      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	f040 8095 	bne.w	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b74:	f7fd ff5e 	bl	8001a34 <HAL_GetTick>
 8003b78:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b7a:	e00f      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b7c:	f7fd ff5a 	bl	8001a34 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d908      	bls.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e085      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800
 8003b94:	42470068 	.word	0x42470068
 8003b98:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b9c:	4b41      	ldr	r3, [pc, #260]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ba8:	d0e8      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d02b      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d127      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003bd2:	4b34      	ldr	r3, [pc, #208]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	3301      	adds	r3, #1
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	019b      	lsls	r3, r3, #6
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	085b      	lsrs	r3, r3, #1
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	041b      	lsls	r3, r3, #16
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	061b      	lsls	r3, r3, #24
 8003c00:	4928      	ldr	r1, [pc, #160]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c08:	4b26      	ldr	r3, [pc, #152]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c0e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c16:	3b01      	subs	r3, #1
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	4922      	ldr	r1, [pc, #136]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01d      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c36:	d118      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c38:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3e:	0e1b      	lsrs	r3, r3, #24
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	019b      	lsls	r3, r3, #6
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	041b      	lsls	r3, r3, #16
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	061b      	lsls	r3, r3, #24
 8003c62:	4910      	ldr	r1, [pc, #64]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c70:	f7fd fee0 	bl	8001a34 <HAL_GetTick>
 8003c74:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c78:	f7fd fedc 	bl	8001a34 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e007      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c96:	d1ef      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3730      	adds	r7, #48	@ 0x30
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	42470070 	.word	0x42470070

08003cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb0:	b0ae      	sub	sp, #184	@ 0xb8
 8003cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cd2:	4bcb      	ldr	r3, [pc, #812]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b0c      	cmp	r3, #12
 8003cdc:	f200 8206 	bhi.w	80040ec <HAL_RCC_GetSysClockFreq+0x440>
 8003ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce6:	bf00      	nop
 8003ce8:	08003d1d 	.word	0x08003d1d
 8003cec:	080040ed 	.word	0x080040ed
 8003cf0:	080040ed 	.word	0x080040ed
 8003cf4:	080040ed 	.word	0x080040ed
 8003cf8:	08003d25 	.word	0x08003d25
 8003cfc:	080040ed 	.word	0x080040ed
 8003d00:	080040ed 	.word	0x080040ed
 8003d04:	080040ed 	.word	0x080040ed
 8003d08:	08003d2d 	.word	0x08003d2d
 8003d0c:	080040ed 	.word	0x080040ed
 8003d10:	080040ed 	.word	0x080040ed
 8003d14:	080040ed 	.word	0x080040ed
 8003d18:	08003f1d 	.word	0x08003f1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d1c:	4bb9      	ldr	r3, [pc, #740]	@ (8004004 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003d22:	e1e7      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d24:	4bb8      	ldr	r3, [pc, #736]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d2a:	e1e3      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d2c:	4bb4      	ldr	r3, [pc, #720]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d38:	4bb1      	ldr	r3, [pc, #708]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d071      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d44:	4bae      	ldr	r3, [pc, #696]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	099b      	lsrs	r3, r3, #6
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d50:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	462b      	mov	r3, r5
 8003d6e:	f04f 0000 	mov.w	r0, #0
 8003d72:	f04f 0100 	mov.w	r1, #0
 8003d76:	0159      	lsls	r1, r3, #5
 8003d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d7c:	0150      	lsls	r0, r2, #5
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4621      	mov	r1, r4
 8003d84:	1a51      	subs	r1, r2, r1
 8003d86:	6439      	str	r1, [r7, #64]	@ 0x40
 8003d88:	4629      	mov	r1, r5
 8003d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	018b      	lsls	r3, r1, #6
 8003da0:	4641      	mov	r1, r8
 8003da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003da6:	4641      	mov	r1, r8
 8003da8:	018a      	lsls	r2, r1, #6
 8003daa:	4641      	mov	r1, r8
 8003dac:	1a51      	subs	r1, r2, r1
 8003dae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003db0:	4649      	mov	r1, r9
 8003db2:	eb63 0301 	sbc.w	r3, r3, r1
 8003db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	00cb      	lsls	r3, r1, #3
 8003dc8:	4641      	mov	r1, r8
 8003dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dce:	4641      	mov	r1, r8
 8003dd0:	00ca      	lsls	r2, r1, #3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4622      	mov	r2, r4
 8003dda:	189b      	adds	r3, r3, r2
 8003ddc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dde:	462b      	mov	r3, r5
 8003de0:	460a      	mov	r2, r1
 8003de2:	eb42 0303 	adc.w	r3, r2, r3
 8003de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003df4:	4629      	mov	r1, r5
 8003df6:	024b      	lsls	r3, r1, #9
 8003df8:	4621      	mov	r1, r4
 8003dfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dfe:	4621      	mov	r1, r4
 8003e00:	024a      	lsls	r2, r1, #9
 8003e02:	4610      	mov	r0, r2
 8003e04:	4619      	mov	r1, r3
 8003e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003e18:	f7fc f9f4 	bl	8000204 <__aeabi_uldivmod>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4613      	mov	r3, r2
 8003e22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e26:	e067      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e28:	4b75      	ldr	r3, [pc, #468]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	099b      	lsrs	r3, r3, #6
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e34:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e42:	2300      	movs	r3, #0
 8003e44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003e4a:	4622      	mov	r2, r4
 8003e4c:	462b      	mov	r3, r5
 8003e4e:	f04f 0000 	mov.w	r0, #0
 8003e52:	f04f 0100 	mov.w	r1, #0
 8003e56:	0159      	lsls	r1, r3, #5
 8003e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e5c:	0150      	lsls	r0, r2, #5
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4621      	mov	r1, r4
 8003e64:	1a51      	subs	r1, r2, r1
 8003e66:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e68:	4629      	mov	r1, r5
 8003e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003e7c:	4649      	mov	r1, r9
 8003e7e:	018b      	lsls	r3, r1, #6
 8003e80:	4641      	mov	r1, r8
 8003e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e86:	4641      	mov	r1, r8
 8003e88:	018a      	lsls	r2, r1, #6
 8003e8a:	4641      	mov	r1, r8
 8003e8c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e90:	4649      	mov	r1, r9
 8003e92:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ea2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ea6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eaa:	4692      	mov	sl, r2
 8003eac:	469b      	mov	fp, r3
 8003eae:	4623      	mov	r3, r4
 8003eb0:	eb1a 0303 	adds.w	r3, sl, r3
 8003eb4:	623b      	str	r3, [r7, #32]
 8003eb6:	462b      	mov	r3, r5
 8003eb8:	eb4b 0303 	adc.w	r3, fp, r3
 8003ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003eca:	4629      	mov	r1, r5
 8003ecc:	028b      	lsls	r3, r1, #10
 8003ece:	4621      	mov	r1, r4
 8003ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	028a      	lsls	r2, r1, #10
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ee4:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ee6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003eea:	f7fc f98b 	bl	8000204 <__aeabi_uldivmod>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ef8:	4b41      	ldr	r3, [pc, #260]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x354>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	0c1b      	lsrs	r3, r3, #16
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	3301      	adds	r3, #1
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003f0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f1a:	e0eb      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f1c:	4b38      	ldr	r3, [pc, #224]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f28:	4b35      	ldr	r3, [pc, #212]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d06b      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f34:	4b32      	ldr	r3, [pc, #200]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	099b      	lsrs	r3, r3, #6
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f46:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f48:	2300      	movs	r3, #0
 8003f4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003f50:	4622      	mov	r2, r4
 8003f52:	462b      	mov	r3, r5
 8003f54:	f04f 0000 	mov.w	r0, #0
 8003f58:	f04f 0100 	mov.w	r1, #0
 8003f5c:	0159      	lsls	r1, r3, #5
 8003f5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f62:	0150      	lsls	r0, r2, #5
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4621      	mov	r1, r4
 8003f6a:	1a51      	subs	r1, r2, r1
 8003f6c:	61b9      	str	r1, [r7, #24]
 8003f6e:	4629      	mov	r1, r5
 8003f70:	eb63 0301 	sbc.w	r3, r3, r1
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f82:	4659      	mov	r1, fp
 8003f84:	018b      	lsls	r3, r1, #6
 8003f86:	4651      	mov	r1, sl
 8003f88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	018a      	lsls	r2, r1, #6
 8003f90:	4651      	mov	r1, sl
 8003f92:	ebb2 0801 	subs.w	r8, r2, r1
 8003f96:	4659      	mov	r1, fp
 8003f98:	eb63 0901 	sbc.w	r9, r3, r1
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fb0:	4690      	mov	r8, r2
 8003fb2:	4699      	mov	r9, r3
 8003fb4:	4623      	mov	r3, r4
 8003fb6:	eb18 0303 	adds.w	r3, r8, r3
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	462b      	mov	r3, r5
 8003fbe:	eb49 0303 	adc.w	r3, r9, r3
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	024b      	lsls	r3, r1, #9
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fda:	4621      	mov	r1, r4
 8003fdc:	024a      	lsls	r2, r1, #9
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003fec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ff0:	f7fc f908 	bl	8000204 <__aeabi_uldivmod>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ffe:	e065      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x420>
 8004000:	40023800 	.word	0x40023800
 8004004:	00f42400 	.word	0x00f42400
 8004008:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400c:	4b3d      	ldr	r3, [pc, #244]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x458>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	099b      	lsrs	r3, r3, #6
 8004012:	2200      	movs	r2, #0
 8004014:	4618      	mov	r0, r3
 8004016:	4611      	mov	r1, r2
 8004018:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800401c:	653b      	str	r3, [r7, #80]	@ 0x50
 800401e:	2300      	movs	r3, #0
 8004020:	657b      	str	r3, [r7, #84]	@ 0x54
 8004022:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004026:	4642      	mov	r2, r8
 8004028:	464b      	mov	r3, r9
 800402a:	f04f 0000 	mov.w	r0, #0
 800402e:	f04f 0100 	mov.w	r1, #0
 8004032:	0159      	lsls	r1, r3, #5
 8004034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004038:	0150      	lsls	r0, r2, #5
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4641      	mov	r1, r8
 8004040:	1a51      	subs	r1, r2, r1
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	4649      	mov	r1, r9
 8004046:	eb63 0301 	sbc.w	r3, r3, r1
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004058:	4659      	mov	r1, fp
 800405a:	018b      	lsls	r3, r1, #6
 800405c:	4651      	mov	r1, sl
 800405e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004062:	4651      	mov	r1, sl
 8004064:	018a      	lsls	r2, r1, #6
 8004066:	4651      	mov	r1, sl
 8004068:	1a54      	subs	r4, r2, r1
 800406a:	4659      	mov	r1, fp
 800406c:	eb63 0501 	sbc.w	r5, r3, r1
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	00eb      	lsls	r3, r5, #3
 800407a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800407e:	00e2      	lsls	r2, r4, #3
 8004080:	4614      	mov	r4, r2
 8004082:	461d      	mov	r5, r3
 8004084:	4643      	mov	r3, r8
 8004086:	18e3      	adds	r3, r4, r3
 8004088:	603b      	str	r3, [r7, #0]
 800408a:	464b      	mov	r3, r9
 800408c:	eb45 0303 	adc.w	r3, r5, r3
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800409e:	4629      	mov	r1, r5
 80040a0:	028b      	lsls	r3, r1, #10
 80040a2:	4621      	mov	r1, r4
 80040a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040a8:	4621      	mov	r1, r4
 80040aa:	028a      	lsls	r2, r1, #10
 80040ac:	4610      	mov	r0, r2
 80040ae:	4619      	mov	r1, r3
 80040b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040b4:	2200      	movs	r2, #0
 80040b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80040ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040be:	f7fc f8a1 	bl	8000204 <__aeabi_uldivmod>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4613      	mov	r3, r2
 80040c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x458>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	0f1b      	lsrs	r3, r3, #28
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80040da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040ea:	e003      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040ec:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x45c>)
 80040ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	37b8      	adds	r7, #184	@ 0xb8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800
 8004108:	00f42400 	.word	0x00f42400

0800410c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e28d      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 8083 	beq.w	8004232 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800412c:	4b94      	ldr	r3, [pc, #592]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b04      	cmp	r3, #4
 8004136:	d019      	beq.n	800416c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004138:	4b91      	ldr	r3, [pc, #580]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004140:	2b08      	cmp	r3, #8
 8004142:	d106      	bne.n	8004152 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004144:	4b8e      	ldr	r3, [pc, #568]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800414c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004150:	d00c      	beq.n	800416c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004152:	4b8b      	ldr	r3, [pc, #556]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d112      	bne.n	8004184 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800415e:	4b88      	ldr	r3, [pc, #544]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004166:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800416a:	d10b      	bne.n	8004184 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800416c:	4b84      	ldr	r3, [pc, #528]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d05b      	beq.n	8004230 <HAL_RCC_OscConfig+0x124>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d157      	bne.n	8004230 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e25a      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800418c:	d106      	bne.n	800419c <HAL_RCC_OscConfig+0x90>
 800418e:	4b7c      	ldr	r3, [pc, #496]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a7b      	ldr	r2, [pc, #492]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 8004194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e01d      	b.n	80041d8 <HAL_RCC_OscConfig+0xcc>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCC_OscConfig+0xb4>
 80041a6:	4b76      	ldr	r3, [pc, #472]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a75      	ldr	r2, [pc, #468]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 80041ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	4b73      	ldr	r3, [pc, #460]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a72      	ldr	r2, [pc, #456]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e00b      	b.n	80041d8 <HAL_RCC_OscConfig+0xcc>
 80041c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 80041c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	4b6c      	ldr	r3, [pc, #432]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a6b      	ldr	r2, [pc, #428]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 80041d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d013      	beq.n	8004208 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e0:	f7fd fc28 	bl	8001a34 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e8:	f7fd fc24 	bl	8001a34 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	@ 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e21f      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fa:	4b61      	ldr	r3, [pc, #388]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0xdc>
 8004206:	e014      	b.n	8004232 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fd fc14 	bl	8001a34 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004210:	f7fd fc10 	bl	8001a34 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	@ 0x64
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e20b      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004222:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x104>
 800422e:	e000      	b.n	8004232 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d06f      	beq.n	800431e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800423e:	4b50      	ldr	r3, [pc, #320]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b00      	cmp	r3, #0
 8004248:	d017      	beq.n	800427a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800424a:	4b4d      	ldr	r3, [pc, #308]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004252:	2b08      	cmp	r3, #8
 8004254:	d105      	bne.n	8004262 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004256:	4b4a      	ldr	r3, [pc, #296]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00b      	beq.n	800427a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004262:	4b47      	ldr	r3, [pc, #284]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800426a:	2b0c      	cmp	r3, #12
 800426c:	d11c      	bne.n	80042a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800426e:	4b44      	ldr	r3, [pc, #272]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d116      	bne.n	80042a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427a:	4b41      	ldr	r3, [pc, #260]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <HAL_RCC_OscConfig+0x186>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d001      	beq.n	8004292 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e1d3      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004292:	4b3b      	ldr	r3, [pc, #236]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4937      	ldr	r1, [pc, #220]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a6:	e03a      	b.n	800431e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d020      	beq.n	80042f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b0:	4b34      	ldr	r3, [pc, #208]	@ (8004384 <HAL_RCC_OscConfig+0x278>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b6:	f7fd fbbd 	bl	8001a34 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042be:	f7fd fbb9 	bl	8001a34 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e1b4      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042dc:	4b28      	ldr	r3, [pc, #160]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4925      	ldr	r1, [pc, #148]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	600b      	str	r3, [r1, #0]
 80042f0:	e015      	b.n	800431e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042f2:	4b24      	ldr	r3, [pc, #144]	@ (8004384 <HAL_RCC_OscConfig+0x278>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7fd fb9c 	bl	8001a34 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004300:	f7fd fb98 	bl	8001a34 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e193      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004312:	4b1b      	ldr	r3, [pc, #108]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d036      	beq.n	8004398 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004332:	4b15      	ldr	r3, [pc, #84]	@ (8004388 <HAL_RCC_OscConfig+0x27c>)
 8004334:	2201      	movs	r2, #1
 8004336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004338:	f7fd fb7c 	bl	8001a34 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004340:	f7fd fb78 	bl	8001a34 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e173      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004352:	4b0b      	ldr	r3, [pc, #44]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 8004354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0x234>
 800435e:	e01b      	b.n	8004398 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004360:	4b09      	ldr	r3, [pc, #36]	@ (8004388 <HAL_RCC_OscConfig+0x27c>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004366:	f7fd fb65 	bl	8001a34 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436c:	e00e      	b.n	800438c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436e:	f7fd fb61 	bl	8001a34 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d907      	bls.n	800438c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e15c      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
 8004380:	40023800 	.word	0x40023800
 8004384:	42470000 	.word	0x42470000
 8004388:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800438c:	4b8a      	ldr	r3, [pc, #552]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 800438e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1ea      	bne.n	800436e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8097 	beq.w	80044d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a6:	2300      	movs	r3, #0
 80043a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043aa:	4b83      	ldr	r3, [pc, #524]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10f      	bne.n	80043d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	4b7f      	ldr	r3, [pc, #508]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	4a7e      	ldr	r2, [pc, #504]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 80043c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043c6:	4b7c      	ldr	r3, [pc, #496]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	60bb      	str	r3, [r7, #8]
 80043d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d2:	2301      	movs	r3, #1
 80043d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d6:	4b79      	ldr	r3, [pc, #484]	@ (80045bc <HAL_RCC_OscConfig+0x4b0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d118      	bne.n	8004414 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043e2:	4b76      	ldr	r3, [pc, #472]	@ (80045bc <HAL_RCC_OscConfig+0x4b0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a75      	ldr	r2, [pc, #468]	@ (80045bc <HAL_RCC_OscConfig+0x4b0>)
 80043e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ee:	f7fd fb21 	bl	8001a34 <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f6:	f7fd fb1d 	bl	8001a34 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e118      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004408:	4b6c      	ldr	r3, [pc, #432]	@ (80045bc <HAL_RCC_OscConfig+0x4b0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d106      	bne.n	800442a <HAL_RCC_OscConfig+0x31e>
 800441c:	4b66      	ldr	r3, [pc, #408]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004420:	4a65      	ldr	r2, [pc, #404]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	6713      	str	r3, [r2, #112]	@ 0x70
 8004428:	e01c      	b.n	8004464 <HAL_RCC_OscConfig+0x358>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b05      	cmp	r3, #5
 8004430:	d10c      	bne.n	800444c <HAL_RCC_OscConfig+0x340>
 8004432:	4b61      	ldr	r3, [pc, #388]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004436:	4a60      	ldr	r2, [pc, #384]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 8004438:	f043 0304 	orr.w	r3, r3, #4
 800443c:	6713      	str	r3, [r2, #112]	@ 0x70
 800443e:	4b5e      	ldr	r3, [pc, #376]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004442:	4a5d      	ldr	r2, [pc, #372]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6713      	str	r3, [r2, #112]	@ 0x70
 800444a:	e00b      	b.n	8004464 <HAL_RCC_OscConfig+0x358>
 800444c:	4b5a      	ldr	r3, [pc, #360]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004450:	4a59      	ldr	r2, [pc, #356]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	6713      	str	r3, [r2, #112]	@ 0x70
 8004458:	4b57      	ldr	r3, [pc, #348]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445c:	4a56      	ldr	r2, [pc, #344]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 800445e:	f023 0304 	bic.w	r3, r3, #4
 8004462:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d015      	beq.n	8004498 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fd fae2 	bl	8001a34 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004472:	e00a      	b.n	800448a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004474:	f7fd fade 	bl	8001a34 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e0d7      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448a:	4b4b      	ldr	r3, [pc, #300]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0ee      	beq.n	8004474 <HAL_RCC_OscConfig+0x368>
 8004496:	e014      	b.n	80044c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fd facc 	bl	8001a34 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a0:	f7fd fac8 	bl	8001a34 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e0c1      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b6:	4b40      	ldr	r3, [pc, #256]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1ee      	bne.n	80044a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044c2:	7dfb      	ldrb	r3, [r7, #23]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d105      	bne.n	80044d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c8:	4b3b      	ldr	r3, [pc, #236]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 80044ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044cc:	4a3a      	ldr	r2, [pc, #232]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 80044ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80ad 	beq.w	8004638 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044de:	4b36      	ldr	r3, [pc, #216]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d060      	beq.n	80045ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d145      	bne.n	800457e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f2:	4b33      	ldr	r3, [pc, #204]	@ (80045c0 <HAL_RCC_OscConfig+0x4b4>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fd fa9c 	bl	8001a34 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004500:	f7fd fa98 	bl	8001a34 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e093      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004512:	4b29      	ldr	r3, [pc, #164]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69da      	ldr	r2, [r3, #28]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	019b      	lsls	r3, r3, #6
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	3b01      	subs	r3, #1
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004548:	071b      	lsls	r3, r3, #28
 800454a:	491b      	ldr	r1, [pc, #108]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 800454c:	4313      	orrs	r3, r2
 800454e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004550:	4b1b      	ldr	r3, [pc, #108]	@ (80045c0 <HAL_RCC_OscConfig+0x4b4>)
 8004552:	2201      	movs	r2, #1
 8004554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7fd fa6d 	bl	8001a34 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455e:	f7fd fa69 	bl	8001a34 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e064      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004570:	4b11      	ldr	r3, [pc, #68]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x452>
 800457c:	e05c      	b.n	8004638 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457e:	4b10      	ldr	r3, [pc, #64]	@ (80045c0 <HAL_RCC_OscConfig+0x4b4>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fd fa56 	bl	8001a34 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458c:	f7fd fa52 	bl	8001a34 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e04d      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <HAL_RCC_OscConfig+0x4ac>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x480>
 80045aa:	e045      	b.n	8004638 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d107      	bne.n	80045c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e040      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40007000 	.word	0x40007000
 80045c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004644 <HAL_RCC_OscConfig+0x538>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d030      	beq.n	8004634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d129      	bne.n	8004634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d122      	bne.n	8004634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045f4:	4013      	ands	r3, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d119      	bne.n	8004634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	3b01      	subs	r3, #1
 800460e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004610:	429a      	cmp	r2, r3
 8004612:	d10f      	bne.n	8004634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d107      	bne.n	8004634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800

08004648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e041      	b.n	80046de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fc ff60 	bl	8001534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f000 fb08 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d001      	beq.n	8004700 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e046      	b.n	800478e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a23      	ldr	r2, [pc, #140]	@ (800479c <HAL_TIM_Base_Start+0xb4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d022      	beq.n	8004758 <HAL_TIM_Base_Start+0x70>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800471a:	d01d      	beq.n	8004758 <HAL_TIM_Base_Start+0x70>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1f      	ldr	r2, [pc, #124]	@ (80047a0 <HAL_TIM_Base_Start+0xb8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d018      	beq.n	8004758 <HAL_TIM_Base_Start+0x70>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1e      	ldr	r2, [pc, #120]	@ (80047a4 <HAL_TIM_Base_Start+0xbc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d013      	beq.n	8004758 <HAL_TIM_Base_Start+0x70>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1c      	ldr	r2, [pc, #112]	@ (80047a8 <HAL_TIM_Base_Start+0xc0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00e      	beq.n	8004758 <HAL_TIM_Base_Start+0x70>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1b      	ldr	r2, [pc, #108]	@ (80047ac <HAL_TIM_Base_Start+0xc4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d009      	beq.n	8004758 <HAL_TIM_Base_Start+0x70>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a19      	ldr	r2, [pc, #100]	@ (80047b0 <HAL_TIM_Base_Start+0xc8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_TIM_Base_Start+0x70>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a18      	ldr	r2, [pc, #96]	@ (80047b4 <HAL_TIM_Base_Start+0xcc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d111      	bne.n	800477c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b06      	cmp	r3, #6
 8004768:	d010      	beq.n	800478c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477a:	e007      	b.n	800478c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40010000 	.word	0x40010000
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40000800 	.word	0x40000800
 80047a8:	40000c00 	.word	0x40000c00
 80047ac:	40010400 	.word	0x40010400
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40001800 	.word	0x40001800

080047b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d001      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e04e      	b.n	800486e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a23      	ldr	r2, [pc, #140]	@ (800487c <HAL_TIM_Base_Start_IT+0xc4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x80>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047fa:	d01d      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x80>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1f      	ldr	r2, [pc, #124]	@ (8004880 <HAL_TIM_Base_Start_IT+0xc8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d018      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x80>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1e      	ldr	r2, [pc, #120]	@ (8004884 <HAL_TIM_Base_Start_IT+0xcc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x80>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1c      	ldr	r2, [pc, #112]	@ (8004888 <HAL_TIM_Base_Start_IT+0xd0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x80>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1b      	ldr	r2, [pc, #108]	@ (800488c <HAL_TIM_Base_Start_IT+0xd4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x80>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a19      	ldr	r2, [pc, #100]	@ (8004890 <HAL_TIM_Base_Start_IT+0xd8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x80>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a18      	ldr	r2, [pc, #96]	@ (8004894 <HAL_TIM_Base_Start_IT+0xdc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d111      	bne.n	800485c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b06      	cmp	r3, #6
 8004848:	d010      	beq.n	800486c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0201 	orr.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485a:	e007      	b.n	800486c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40010000 	.word	0x40010000
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800
 8004888:	40000c00 	.word	0x40000c00
 800488c:	40010400 	.word	0x40010400
 8004890:	40014000 	.word	0x40014000
 8004894:	40001800 	.word	0x40001800

08004898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d122      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d11b      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0202 	mvn.w	r2, #2
 80048c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f9bf 	bl	8004c5e <HAL_TIM_IC_CaptureCallback>
 80048e0:	e005      	b.n	80048ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f9b1 	bl	8004c4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f9c2 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d122      	bne.n	8004948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b04      	cmp	r3, #4
 800490e:	d11b      	bne.n	8004948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0204 	mvn.w	r2, #4
 8004918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2202      	movs	r2, #2
 800491e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f995 	bl	8004c5e <HAL_TIM_IC_CaptureCallback>
 8004934:	e005      	b.n	8004942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f987 	bl	8004c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f998 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b08      	cmp	r3, #8
 8004954:	d122      	bne.n	800499c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b08      	cmp	r3, #8
 8004962:	d11b      	bne.n	800499c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0208 	mvn.w	r2, #8
 800496c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2204      	movs	r2, #4
 8004972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f96b 	bl	8004c5e <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f95d 	bl	8004c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f96e 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b10      	cmp	r3, #16
 80049a8:	d122      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d11b      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0210 	mvn.w	r2, #16
 80049c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2208      	movs	r2, #8
 80049c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f941 	bl	8004c5e <HAL_TIM_IC_CaptureCallback>
 80049dc:	e005      	b.n	80049ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f933 	bl	8004c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f944 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d10e      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d107      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0201 	mvn.w	r2, #1
 8004a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f90d 	bl	8004c36 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a26:	2b80      	cmp	r3, #128	@ 0x80
 8004a28:	d10e      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a34:	2b80      	cmp	r3, #128	@ 0x80
 8004a36:	d107      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 faea 	bl	800501c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a52:	2b40      	cmp	r3, #64	@ 0x40
 8004a54:	d10e      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a60:	2b40      	cmp	r3, #64	@ 0x40
 8004a62:	d107      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f909 	bl	8004c86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b20      	cmp	r3, #32
 8004a80:	d10e      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d107      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0220 	mvn.w	r2, #32
 8004a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fab4 	bl	8005008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e0b4      	b.n	8004c2e <HAL_TIM_ConfigClockSource+0x186>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004aea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004afc:	d03e      	beq.n	8004b7c <HAL_TIM_ConfigClockSource+0xd4>
 8004afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b02:	f200 8087 	bhi.w	8004c14 <HAL_TIM_ConfigClockSource+0x16c>
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b0a:	f000 8086 	beq.w	8004c1a <HAL_TIM_ConfigClockSource+0x172>
 8004b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b12:	d87f      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x16c>
 8004b14:	2b70      	cmp	r3, #112	@ 0x70
 8004b16:	d01a      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0xa6>
 8004b18:	2b70      	cmp	r3, #112	@ 0x70
 8004b1a:	d87b      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x16c>
 8004b1c:	2b60      	cmp	r3, #96	@ 0x60
 8004b1e:	d050      	beq.n	8004bc2 <HAL_TIM_ConfigClockSource+0x11a>
 8004b20:	2b60      	cmp	r3, #96	@ 0x60
 8004b22:	d877      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x16c>
 8004b24:	2b50      	cmp	r3, #80	@ 0x50
 8004b26:	d03c      	beq.n	8004ba2 <HAL_TIM_ConfigClockSource+0xfa>
 8004b28:	2b50      	cmp	r3, #80	@ 0x50
 8004b2a:	d873      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x16c>
 8004b2c:	2b40      	cmp	r3, #64	@ 0x40
 8004b2e:	d058      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x13a>
 8004b30:	2b40      	cmp	r3, #64	@ 0x40
 8004b32:	d86f      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x16c>
 8004b34:	2b30      	cmp	r3, #48	@ 0x30
 8004b36:	d064      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x15a>
 8004b38:	2b30      	cmp	r3, #48	@ 0x30
 8004b3a:	d86b      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x16c>
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d060      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x15a>
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d867      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x16c>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d05c      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x15a>
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d05a      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x15a>
 8004b4c:	e062      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	6899      	ldr	r1, [r3, #8]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f000 f9b7 	bl	8004ed0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	609a      	str	r2, [r3, #8]
      break;
 8004b7a:	e04f      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6899      	ldr	r1, [r3, #8]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f000 f9a0 	bl	8004ed0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b9e:	609a      	str	r2, [r3, #8]
      break;
 8004ba0:	e03c      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6859      	ldr	r1, [r3, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f000 f914 	bl	8004ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2150      	movs	r1, #80	@ 0x50
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f96d 	bl	8004e9a <TIM_ITRx_SetConfig>
      break;
 8004bc0:	e02c      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6859      	ldr	r1, [r3, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f000 f933 	bl	8004e3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2160      	movs	r1, #96	@ 0x60
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 f95d 	bl	8004e9a <TIM_ITRx_SetConfig>
      break;
 8004be0:	e01c      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6859      	ldr	r1, [r3, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f000 f8f4 	bl	8004ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2140      	movs	r1, #64	@ 0x40
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 f94d 	bl	8004e9a <TIM_ITRx_SetConfig>
      break;
 8004c00:	e00c      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	f000 f944 	bl	8004e9a <TIM_ITRx_SetConfig>
      break;
 8004c12:	e003      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	73fb      	strb	r3, [r7, #15]
      break;
 8004c18:	e000      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a40      	ldr	r2, [pc, #256]	@ (8004db0 <TIM_Base_SetConfig+0x114>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d013      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cba:	d00f      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a3d      	ldr	r2, [pc, #244]	@ (8004db4 <TIM_Base_SetConfig+0x118>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a3c      	ldr	r2, [pc, #240]	@ (8004db8 <TIM_Base_SetConfig+0x11c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d007      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3b      	ldr	r2, [pc, #236]	@ (8004dbc <TIM_Base_SetConfig+0x120>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3a      	ldr	r2, [pc, #232]	@ (8004dc0 <TIM_Base_SetConfig+0x124>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d108      	bne.n	8004cee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2f      	ldr	r2, [pc, #188]	@ (8004db0 <TIM_Base_SetConfig+0x114>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d02b      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cfc:	d027      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2c      	ldr	r2, [pc, #176]	@ (8004db4 <TIM_Base_SetConfig+0x118>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d023      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2b      	ldr	r2, [pc, #172]	@ (8004db8 <TIM_Base_SetConfig+0x11c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01f      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2a      	ldr	r2, [pc, #168]	@ (8004dbc <TIM_Base_SetConfig+0x120>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01b      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a29      	ldr	r2, [pc, #164]	@ (8004dc0 <TIM_Base_SetConfig+0x124>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d017      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a28      	ldr	r2, [pc, #160]	@ (8004dc4 <TIM_Base_SetConfig+0x128>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a27      	ldr	r2, [pc, #156]	@ (8004dc8 <TIM_Base_SetConfig+0x12c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00f      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a26      	ldr	r2, [pc, #152]	@ (8004dcc <TIM_Base_SetConfig+0x130>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a25      	ldr	r2, [pc, #148]	@ (8004dd0 <TIM_Base_SetConfig+0x134>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d007      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a24      	ldr	r2, [pc, #144]	@ (8004dd4 <TIM_Base_SetConfig+0x138>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a23      	ldr	r2, [pc, #140]	@ (8004dd8 <TIM_Base_SetConfig+0x13c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d108      	bne.n	8004d60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a0a      	ldr	r2, [pc, #40]	@ (8004db0 <TIM_Base_SetConfig+0x114>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_Base_SetConfig+0xf8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc0 <TIM_Base_SetConfig+0x124>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d103      	bne.n	8004d9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	615a      	str	r2, [r3, #20]
}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40010000 	.word	0x40010000
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40000800 	.word	0x40000800
 8004dbc:	40000c00 	.word	0x40000c00
 8004dc0:	40010400 	.word	0x40010400
 8004dc4:	40014000 	.word	0x40014000
 8004dc8:	40014400 	.word	0x40014400
 8004dcc:	40014800 	.word	0x40014800
 8004dd0:	40001800 	.word	0x40001800
 8004dd4:	40001c00 	.word	0x40001c00
 8004dd8:	40002000 	.word	0x40002000

08004ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f023 0201 	bic.w	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f023 030a 	bic.w	r3, r3, #10
 8004e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	621a      	str	r2, [r3, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b087      	sub	sp, #28
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f023 0210 	bic.w	r2, r3, #16
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	031b      	lsls	r3, r3, #12
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	621a      	str	r2, [r3, #32]
}
 8004e8e:	bf00      	nop
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b085      	sub	sp, #20
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f043 0307 	orr.w	r3, r3, #7
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	609a      	str	r2, [r3, #8]
}
 8004ec4:	bf00      	nop
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	021a      	lsls	r2, r3, #8
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	609a      	str	r2, [r3, #8]
}
 8004f04:	bf00      	nop
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e05a      	b.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a21      	ldr	r2, [pc, #132]	@ (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d022      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f74:	d01d      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d018      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d013      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00e      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a18      	ldr	r2, [pc, #96]	@ (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d009      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a17      	ldr	r2, [pc, #92]	@ (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d004      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a15      	ldr	r2, [pc, #84]	@ (8005004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d10c      	bne.n	8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40000c00 	.word	0x40000c00
 8004ffc:	40010400 	.word	0x40010400
 8005000:	40014000 	.word	0x40014000
 8005004:	40001800 	.word	0x40001800

08005008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e03f      	b.n	80050c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fc fac8 	bl	80015ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2224      	movs	r2, #36	@ 0x24
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f829 	bl	80050cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695a      	ldr	r2, [r3, #20]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d0:	b0c0      	sub	sp, #256	@ 0x100
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e8:	68d9      	ldr	r1, [r3, #12]
 80050ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	ea40 0301 	orr.w	r3, r0, r1
 80050f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	431a      	orrs	r2, r3
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	431a      	orrs	r2, r3
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005124:	f021 010c 	bic.w	r1, r1, #12
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005132:	430b      	orrs	r3, r1
 8005134:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005146:	6999      	ldr	r1, [r3, #24]
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	ea40 0301 	orr.w	r3, r0, r1
 8005152:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4b8f      	ldr	r3, [pc, #572]	@ (8005398 <UART_SetConfig+0x2cc>)
 800515c:	429a      	cmp	r2, r3
 800515e:	d005      	beq.n	800516c <UART_SetConfig+0xa0>
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b8d      	ldr	r3, [pc, #564]	@ (800539c <UART_SetConfig+0x2d0>)
 8005168:	429a      	cmp	r2, r3
 800516a:	d104      	bne.n	8005176 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800516c:	f7fe fa60 	bl	8003630 <HAL_RCC_GetPCLK2Freq>
 8005170:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005174:	e003      	b.n	800517e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005176:	f7fe fa47 	bl	8003608 <HAL_RCC_GetPCLK1Freq>
 800517a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800517e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005188:	f040 810c 	bne.w	80053a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800518c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005190:	2200      	movs	r2, #0
 8005192:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005196:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800519a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800519e:	4622      	mov	r2, r4
 80051a0:	462b      	mov	r3, r5
 80051a2:	1891      	adds	r1, r2, r2
 80051a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80051a6:	415b      	adcs	r3, r3
 80051a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051ae:	4621      	mov	r1, r4
 80051b0:	eb12 0801 	adds.w	r8, r2, r1
 80051b4:	4629      	mov	r1, r5
 80051b6:	eb43 0901 	adc.w	r9, r3, r1
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051ce:	4690      	mov	r8, r2
 80051d0:	4699      	mov	r9, r3
 80051d2:	4623      	mov	r3, r4
 80051d4:	eb18 0303 	adds.w	r3, r8, r3
 80051d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051dc:	462b      	mov	r3, r5
 80051de:	eb49 0303 	adc.w	r3, r9, r3
 80051e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80051f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051fa:	460b      	mov	r3, r1
 80051fc:	18db      	adds	r3, r3, r3
 80051fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005200:	4613      	mov	r3, r2
 8005202:	eb42 0303 	adc.w	r3, r2, r3
 8005206:	657b      	str	r3, [r7, #84]	@ 0x54
 8005208:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800520c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005210:	f7fa fff8 	bl	8000204 <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4b61      	ldr	r3, [pc, #388]	@ (80053a0 <UART_SetConfig+0x2d4>)
 800521a:	fba3 2302 	umull	r2, r3, r3, r2
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	011c      	lsls	r4, r3, #4
 8005222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005226:	2200      	movs	r2, #0
 8005228:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800522c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005230:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005234:	4642      	mov	r2, r8
 8005236:	464b      	mov	r3, r9
 8005238:	1891      	adds	r1, r2, r2
 800523a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800523c:	415b      	adcs	r3, r3
 800523e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005240:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005244:	4641      	mov	r1, r8
 8005246:	eb12 0a01 	adds.w	sl, r2, r1
 800524a:	4649      	mov	r1, r9
 800524c:	eb43 0b01 	adc.w	fp, r3, r1
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800525c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005260:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005264:	4692      	mov	sl, r2
 8005266:	469b      	mov	fp, r3
 8005268:	4643      	mov	r3, r8
 800526a:	eb1a 0303 	adds.w	r3, sl, r3
 800526e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005272:	464b      	mov	r3, r9
 8005274:	eb4b 0303 	adc.w	r3, fp, r3
 8005278:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005288:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800528c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005290:	460b      	mov	r3, r1
 8005292:	18db      	adds	r3, r3, r3
 8005294:	643b      	str	r3, [r7, #64]	@ 0x40
 8005296:	4613      	mov	r3, r2
 8005298:	eb42 0303 	adc.w	r3, r2, r3
 800529c:	647b      	str	r3, [r7, #68]	@ 0x44
 800529e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80052a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80052a6:	f7fa ffad 	bl	8000204 <__aeabi_uldivmod>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4611      	mov	r1, r2
 80052b0:	4b3b      	ldr	r3, [pc, #236]	@ (80053a0 <UART_SetConfig+0x2d4>)
 80052b2:	fba3 2301 	umull	r2, r3, r3, r1
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	2264      	movs	r2, #100	@ 0x64
 80052ba:	fb02 f303 	mul.w	r3, r2, r3
 80052be:	1acb      	subs	r3, r1, r3
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80052c6:	4b36      	ldr	r3, [pc, #216]	@ (80053a0 <UART_SetConfig+0x2d4>)
 80052c8:	fba3 2302 	umull	r2, r3, r3, r2
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052d4:	441c      	add	r4, r3
 80052d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80052e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80052e8:	4642      	mov	r2, r8
 80052ea:	464b      	mov	r3, r9
 80052ec:	1891      	adds	r1, r2, r2
 80052ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052f0:	415b      	adcs	r3, r3
 80052f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80052f8:	4641      	mov	r1, r8
 80052fa:	1851      	adds	r1, r2, r1
 80052fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80052fe:	4649      	mov	r1, r9
 8005300:	414b      	adcs	r3, r1
 8005302:	637b      	str	r3, [r7, #52]	@ 0x34
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005310:	4659      	mov	r1, fp
 8005312:	00cb      	lsls	r3, r1, #3
 8005314:	4651      	mov	r1, sl
 8005316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800531a:	4651      	mov	r1, sl
 800531c:	00ca      	lsls	r2, r1, #3
 800531e:	4610      	mov	r0, r2
 8005320:	4619      	mov	r1, r3
 8005322:	4603      	mov	r3, r0
 8005324:	4642      	mov	r2, r8
 8005326:	189b      	adds	r3, r3, r2
 8005328:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800532c:	464b      	mov	r3, r9
 800532e:	460a      	mov	r2, r1
 8005330:	eb42 0303 	adc.w	r3, r2, r3
 8005334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005344:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005348:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800534c:	460b      	mov	r3, r1
 800534e:	18db      	adds	r3, r3, r3
 8005350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005352:	4613      	mov	r3, r2
 8005354:	eb42 0303 	adc.w	r3, r2, r3
 8005358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800535a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800535e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005362:	f7fa ff4f 	bl	8000204 <__aeabi_uldivmod>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4b0d      	ldr	r3, [pc, #52]	@ (80053a0 <UART_SetConfig+0x2d4>)
 800536c:	fba3 1302 	umull	r1, r3, r3, r2
 8005370:	095b      	lsrs	r3, r3, #5
 8005372:	2164      	movs	r1, #100	@ 0x64
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	3332      	adds	r3, #50	@ 0x32
 800537e:	4a08      	ldr	r2, [pc, #32]	@ (80053a0 <UART_SetConfig+0x2d4>)
 8005380:	fba2 2303 	umull	r2, r3, r2, r3
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	f003 0207 	and.w	r2, r3, #7
 800538a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4422      	add	r2, r4
 8005392:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005394:	e106      	b.n	80055a4 <UART_SetConfig+0x4d8>
 8005396:	bf00      	nop
 8005398:	40011000 	.word	0x40011000
 800539c:	40011400 	.word	0x40011400
 80053a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80053b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80053b6:	4642      	mov	r2, r8
 80053b8:	464b      	mov	r3, r9
 80053ba:	1891      	adds	r1, r2, r2
 80053bc:	6239      	str	r1, [r7, #32]
 80053be:	415b      	adcs	r3, r3
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053c6:	4641      	mov	r1, r8
 80053c8:	1854      	adds	r4, r2, r1
 80053ca:	4649      	mov	r1, r9
 80053cc:	eb43 0501 	adc.w	r5, r3, r1
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	00eb      	lsls	r3, r5, #3
 80053da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053de:	00e2      	lsls	r2, r4, #3
 80053e0:	4614      	mov	r4, r2
 80053e2:	461d      	mov	r5, r3
 80053e4:	4643      	mov	r3, r8
 80053e6:	18e3      	adds	r3, r4, r3
 80053e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053ec:	464b      	mov	r3, r9
 80053ee:	eb45 0303 	adc.w	r3, r5, r3
 80053f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005402:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005412:	4629      	mov	r1, r5
 8005414:	008b      	lsls	r3, r1, #2
 8005416:	4621      	mov	r1, r4
 8005418:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800541c:	4621      	mov	r1, r4
 800541e:	008a      	lsls	r2, r1, #2
 8005420:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005424:	f7fa feee 	bl	8000204 <__aeabi_uldivmod>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4b60      	ldr	r3, [pc, #384]	@ (80055b0 <UART_SetConfig+0x4e4>)
 800542e:	fba3 2302 	umull	r2, r3, r3, r2
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	011c      	lsls	r4, r3, #4
 8005436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800543a:	2200      	movs	r2, #0
 800543c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005440:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005444:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005448:	4642      	mov	r2, r8
 800544a:	464b      	mov	r3, r9
 800544c:	1891      	adds	r1, r2, r2
 800544e:	61b9      	str	r1, [r7, #24]
 8005450:	415b      	adcs	r3, r3
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005458:	4641      	mov	r1, r8
 800545a:	1851      	adds	r1, r2, r1
 800545c:	6139      	str	r1, [r7, #16]
 800545e:	4649      	mov	r1, r9
 8005460:	414b      	adcs	r3, r1
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005470:	4659      	mov	r1, fp
 8005472:	00cb      	lsls	r3, r1, #3
 8005474:	4651      	mov	r1, sl
 8005476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800547a:	4651      	mov	r1, sl
 800547c:	00ca      	lsls	r2, r1, #3
 800547e:	4610      	mov	r0, r2
 8005480:	4619      	mov	r1, r3
 8005482:	4603      	mov	r3, r0
 8005484:	4642      	mov	r2, r8
 8005486:	189b      	adds	r3, r3, r2
 8005488:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800548c:	464b      	mov	r3, r9
 800548e:	460a      	mov	r2, r1
 8005490:	eb42 0303 	adc.w	r3, r2, r3
 8005494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80054b0:	4649      	mov	r1, r9
 80054b2:	008b      	lsls	r3, r1, #2
 80054b4:	4641      	mov	r1, r8
 80054b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054ba:	4641      	mov	r1, r8
 80054bc:	008a      	lsls	r2, r1, #2
 80054be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80054c2:	f7fa fe9f 	bl	8000204 <__aeabi_uldivmod>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4611      	mov	r1, r2
 80054cc:	4b38      	ldr	r3, [pc, #224]	@ (80055b0 <UART_SetConfig+0x4e4>)
 80054ce:	fba3 2301 	umull	r2, r3, r3, r1
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	2264      	movs	r2, #100	@ 0x64
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	1acb      	subs	r3, r1, r3
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	3332      	adds	r3, #50	@ 0x32
 80054e0:	4a33      	ldr	r2, [pc, #204]	@ (80055b0 <UART_SetConfig+0x4e4>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054ec:	441c      	add	r4, r3
 80054ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054f2:	2200      	movs	r2, #0
 80054f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80054f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80054f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80054fc:	4642      	mov	r2, r8
 80054fe:	464b      	mov	r3, r9
 8005500:	1891      	adds	r1, r2, r2
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	415b      	adcs	r3, r3
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800550c:	4641      	mov	r1, r8
 800550e:	1851      	adds	r1, r2, r1
 8005510:	6039      	str	r1, [r7, #0]
 8005512:	4649      	mov	r1, r9
 8005514:	414b      	adcs	r3, r1
 8005516:	607b      	str	r3, [r7, #4]
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005524:	4659      	mov	r1, fp
 8005526:	00cb      	lsls	r3, r1, #3
 8005528:	4651      	mov	r1, sl
 800552a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800552e:	4651      	mov	r1, sl
 8005530:	00ca      	lsls	r2, r1, #3
 8005532:	4610      	mov	r0, r2
 8005534:	4619      	mov	r1, r3
 8005536:	4603      	mov	r3, r0
 8005538:	4642      	mov	r2, r8
 800553a:	189b      	adds	r3, r3, r2
 800553c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800553e:	464b      	mov	r3, r9
 8005540:	460a      	mov	r2, r1
 8005542:	eb42 0303 	adc.w	r3, r2, r3
 8005546:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	663b      	str	r3, [r7, #96]	@ 0x60
 8005552:	667a      	str	r2, [r7, #100]	@ 0x64
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005560:	4649      	mov	r1, r9
 8005562:	008b      	lsls	r3, r1, #2
 8005564:	4641      	mov	r1, r8
 8005566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800556a:	4641      	mov	r1, r8
 800556c:	008a      	lsls	r2, r1, #2
 800556e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005572:	f7fa fe47 	bl	8000204 <__aeabi_uldivmod>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4b0d      	ldr	r3, [pc, #52]	@ (80055b0 <UART_SetConfig+0x4e4>)
 800557c:	fba3 1302 	umull	r1, r3, r3, r2
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	2164      	movs	r1, #100	@ 0x64
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	3332      	adds	r3, #50	@ 0x32
 800558e:	4a08      	ldr	r2, [pc, #32]	@ (80055b0 <UART_SetConfig+0x4e4>)
 8005590:	fba2 2303 	umull	r2, r3, r2, r3
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	f003 020f 	and.w	r2, r3, #15
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4422      	add	r2, r4
 80055a2:	609a      	str	r2, [r3, #8]
}
 80055a4:	bf00      	nop
 80055a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80055aa:	46bd      	mov	sp, r7
 80055ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055b0:	51eb851f 	.word	0x51eb851f

080055b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055b4:	b084      	sub	sp, #16
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	f107 001c 	add.w	r0, r7, #28
 80055c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d122      	bne.n	8005612 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80055e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d105      	bne.n	8005606 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fa9c 	bl	8005b44 <USB_CoreReset>
 800560c:	4603      	mov	r3, r0
 800560e:	73fb      	strb	r3, [r7, #15]
 8005610:	e01a      	b.n	8005648 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa90 	bl	8005b44 <USB_CoreReset>
 8005624:	4603      	mov	r3, r0
 8005626:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005632:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	639a      	str	r2, [r3, #56]	@ 0x38
 800563a:	e005      	b.n	8005648 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005640:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564a:	2b01      	cmp	r3, #1
 800564c:	d10b      	bne.n	8005666 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f043 0206 	orr.w	r2, r3, #6
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f043 0220 	orr.w	r2, r3, #32
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005672:	b004      	add	sp, #16
 8005674:	4770      	bx	lr

08005676 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f023 0201 	bic.w	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d115      	bne.n	80056e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056c6:	2001      	movs	r0, #1
 80056c8:	f7fc f9c0 	bl	8001a4c <HAL_Delay>
      ms++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fa28 	bl	8005b28 <USB_GetMode>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d01e      	beq.n	800571c <USB_SetCurrentMode+0x84>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b31      	cmp	r3, #49	@ 0x31
 80056e2:	d9f0      	bls.n	80056c6 <USB_SetCurrentMode+0x2e>
 80056e4:	e01a      	b.n	800571c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056e6:	78fb      	ldrb	r3, [r7, #3]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d115      	bne.n	8005718 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056f8:	2001      	movs	r0, #1
 80056fa:	f7fc f9a7 	bl	8001a4c <HAL_Delay>
      ms++;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3301      	adds	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fa0f 	bl	8005b28 <USB_GetMode>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <USB_SetCurrentMode+0x84>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b31      	cmp	r3, #49	@ 0x31
 8005714:	d9f0      	bls.n	80056f8 <USB_SetCurrentMode+0x60>
 8005716:	e001      	b.n	800571c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e005      	b.n	8005728 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b32      	cmp	r3, #50	@ 0x32
 8005720:	d101      	bne.n	8005726 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005730:	b084      	sub	sp, #16
 8005732:	b580      	push	{r7, lr}
 8005734:	b086      	sub	sp, #24
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800573e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	e009      	b.n	8005764 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	3340      	adds	r3, #64	@ 0x40
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	2200      	movs	r2, #0
 800575c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	3301      	adds	r3, #1
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b0e      	cmp	r3, #14
 8005768:	d9f2      	bls.n	8005750 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800576a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d11c      	bne.n	80057aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800577e:	f043 0302 	orr.w	r3, r3, #2
 8005782:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005788:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e005      	b.n	80057b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057bc:	461a      	mov	r2, r3
 80057be:	2300      	movs	r3, #0
 80057c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c8:	4619      	mov	r1, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d0:	461a      	mov	r2, r3
 80057d2:	680b      	ldr	r3, [r1, #0]
 80057d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d10c      	bne.n	80057f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d104      	bne.n	80057ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057e2:	2100      	movs	r1, #0
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f965 	bl	8005ab4 <USB_SetDevSpeed>
 80057ea:	e008      	b.n	80057fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057ec:	2101      	movs	r1, #1
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f960 	bl	8005ab4 <USB_SetDevSpeed>
 80057f4:	e003      	b.n	80057fe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057f6:	2103      	movs	r1, #3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f95b 	bl	8005ab4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057fe:	2110      	movs	r1, #16
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f8f3 	bl	80059ec <USB_FlushTxFifo>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f91f 	bl	8005a54 <USB_FlushRxFifo>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005826:	461a      	mov	r2, r3
 8005828:	2300      	movs	r3, #0
 800582a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005832:	461a      	mov	r2, r3
 8005834:	2300      	movs	r3, #0
 8005836:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583e:	461a      	mov	r2, r3
 8005840:	2300      	movs	r3, #0
 8005842:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005844:	2300      	movs	r3, #0
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	e043      	b.n	80058d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800585c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005860:	d118      	bne.n	8005894 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005874:	461a      	mov	r2, r3
 8005876:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	e013      	b.n	80058a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800588a:	461a      	mov	r2, r3
 800588c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	e008      	b.n	80058a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a0:	461a      	mov	r2, r3
 80058a2:	2300      	movs	r3, #0
 80058a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b2:	461a      	mov	r2, r3
 80058b4:	2300      	movs	r3, #0
 80058b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c4:	461a      	mov	r2, r3
 80058c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	3301      	adds	r3, #1
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d3b7      	bcc.n	800584a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058da:	2300      	movs	r3, #0
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	e043      	b.n	8005968 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058f6:	d118      	bne.n	800592a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590a:	461a      	mov	r2, r3
 800590c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	e013      	b.n	800593c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005920:	461a      	mov	r2, r3
 8005922:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	e008      	b.n	800593c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005936:	461a      	mov	r2, r3
 8005938:	2300      	movs	r3, #0
 800593a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005948:	461a      	mov	r2, r3
 800594a:	2300      	movs	r3, #0
 800594c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800595a:	461a      	mov	r2, r3
 800595c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005960:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	3301      	adds	r3, #1
 8005966:	613b      	str	r3, [r7, #16]
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	429a      	cmp	r2, r3
 800596e:	d3b7      	bcc.n	80058e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800597e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005982:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005990:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005994:	2b00      	cmp	r3, #0
 8005996:	d105      	bne.n	80059a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f043 0210 	orr.w	r2, r3, #16
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	699a      	ldr	r2, [r3, #24]
 80059a8:	4b0f      	ldr	r3, [pc, #60]	@ (80059e8 <USB_DevInit+0x2b8>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f043 0208 	orr.w	r2, r3, #8
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d107      	bne.n	80059d8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059d0:	f043 0304 	orr.w	r3, r3, #4
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059e4:	b004      	add	sp, #16
 80059e6:	4770      	bx	lr
 80059e8:	803c3800 	.word	0x803c3800

080059ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3301      	adds	r3, #1
 80059fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4a13      	ldr	r2, [pc, #76]	@ (8005a50 <USB_FlushTxFifo+0x64>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d901      	bls.n	8005a0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e01b      	b.n	8005a44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	daf2      	bge.n	80059fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	019b      	lsls	r3, r3, #6
 8005a1c:	f043 0220 	orr.w	r2, r3, #32
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4a08      	ldr	r2, [pc, #32]	@ (8005a50 <USB_FlushTxFifo+0x64>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d901      	bls.n	8005a36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e006      	b.n	8005a44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b20      	cmp	r3, #32
 8005a40:	d0f0      	beq.n	8005a24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	00030d40 	.word	0x00030d40

08005a54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3301      	adds	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4a11      	ldr	r2, [pc, #68]	@ (8005ab0 <USB_FlushRxFifo+0x5c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d901      	bls.n	8005a72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e018      	b.n	8005aa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	daf2      	bge.n	8005a60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2210      	movs	r2, #16
 8005a82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4a08      	ldr	r2, [pc, #32]	@ (8005ab0 <USB_FlushRxFifo+0x5c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d901      	bls.n	8005a96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e006      	b.n	8005aa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	d0f0      	beq.n	8005a84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	00030d40 	.word	0x00030d40

08005ab4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b085      	sub	sp, #20
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b00:	f023 0303 	bic.w	r3, r3, #3
 8005b04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b14:	f043 0302 	orr.w	r3, r3, #2
 8005b18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	f003 0301 	and.w	r3, r3, #1
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3301      	adds	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4a13      	ldr	r2, [pc, #76]	@ (8005ba8 <USB_CoreReset+0x64>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e01b      	b.n	8005b9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	daf2      	bge.n	8005b50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f043 0201 	orr.w	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4a09      	ldr	r2, [pc, #36]	@ (8005ba8 <USB_CoreReset+0x64>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d901      	bls.n	8005b8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e006      	b.n	8005b9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d0f0      	beq.n	8005b7a <USB_CoreReset+0x36>

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	00030d40 	.word	0x00030d40

08005bac <arm_fir_init_f32>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	9c04      	ldr	r4, [sp, #16]
 8005bb0:	6082      	str	r2, [r0, #8]
 8005bb2:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8005bb6:	3c01      	subs	r4, #1
 8005bb8:	440c      	add	r4, r1
 8005bba:	8001      	strh	r1, [r0, #0]
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	00a2      	lsls	r2, r4, #2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	f000 f90c 	bl	8005de0 <memset>
 8005bc8:	6068      	str	r0, [r5, #4]
 8005bca:	bd38      	pop	{r3, r4, r5, pc}

08005bcc <arm_biquad_cascade_df1_init_f32>:
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	6082      	str	r2, [r0, #8]
 8005bd0:	6001      	str	r1, [r0, #0]
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	010a      	lsls	r2, r1, #4
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	2100      	movs	r1, #0
 8005bda:	f000 f901 	bl	8005de0 <memset>
 8005bde:	6060      	str	r0, [r4, #4]
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	bf00      	nop

08005be4 <arm_biquad_cascade_df1_f32>:
 8005be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be8:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 8005bec:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005bf0:	f003 0e03 	and.w	lr, r3, #3
 8005bf4:	ea4f 190c 	mov.w	r9, ip, lsl #4
 8005bf8:	6807      	ldr	r7, [r0, #0]
 8005bfa:	eb02 0a09 	add.w	sl, r2, r9
 8005bfe:	f10e 38ff 	add.w	r8, lr, #4294967295	@ 0xffffffff
 8005c02:	3614      	adds	r6, #20
 8005c04:	3510      	adds	r5, #16
 8005c06:	ed16 4a05 	vldr	s8, [r6, #-20]	@ 0xffffffec
 8005c0a:	ed16 2a04 	vldr	s4, [r6, #-16]
 8005c0e:	ed56 2a03 	vldr	s5, [r6, #-12]
 8005c12:	ed16 3a02 	vldr	s6, [r6, #-8]
 8005c16:	ed56 3a01 	vldr	s7, [r6, #-4]
 8005c1a:	ed55 5a04 	vldr	s11, [r5, #-16]
 8005c1e:	ed15 5a03 	vldr	s10, [r5, #-12]
 8005c22:	ed15 7a02 	vldr	s14, [r5, #-8]
 8005c26:	ed55 7a01 	vldr	s15, [r5, #-4]
 8005c2a:	f1bc 0f00 	cmp.w	ip, #0
 8005c2e:	f000 80d4 	beq.w	8005dda <arm_biquad_cascade_df1_f32+0x1f6>
 8005c32:	f101 0010 	add.w	r0, r1, #16
 8005c36:	f102 0310 	add.w	r3, r2, #16
 8005c3a:	4664      	mov	r4, ip
 8005c3c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8005c40:	ee62 4a25 	vmul.f32	s9, s4, s11
 8005c44:	ee64 6a06 	vmul.f32	s13, s8, s12
 8005c48:	ee22 5a85 	vmul.f32	s10, s5, s10
 8005c4c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005c50:	ee63 4a07 	vmul.f32	s9, s6, s14
 8005c54:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005c58:	ee23 5aa7 	vmul.f32	s10, s7, s15
 8005c5c:	ee76 7aa4 	vadd.f32	s15, s13, s9
 8005c60:	ee22 1a06 	vmul.f32	s2, s4, s12
 8005c64:	ee77 7a85 	vadd.f32	s15, s15, s10
 8005c68:	ee62 1aa5 	vmul.f32	s3, s5, s11
 8005c6c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005c70:	ed50 4a03 	vldr	s9, [r0, #-12]
 8005c74:	ee64 6a24 	vmul.f32	s13, s8, s9
 8005c78:	ee23 5a27 	vmul.f32	s10, s6, s15
 8005c7c:	ee76 6a81 	vadd.f32	s13, s13, s2
 8005c80:	ee63 5a87 	vmul.f32	s11, s7, s14
 8005c84:	ee36 7aa1 	vadd.f32	s14, s13, s3
 8005c88:	ee62 1a24 	vmul.f32	s3, s4, s9
 8005c8c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005c90:	ee22 6a86 	vmul.f32	s12, s5, s12
 8005c94:	ee37 7a25 	vadd.f32	s14, s14, s11
 8005c98:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8005c9c:	ed03 7a03 	vstr	s14, [r3, #-12]
 8005ca0:	ed10 5a02 	vldr	s10, [r0, #-8]
 8005ca4:	ee64 5a05 	vmul.f32	s11, s8, s10
 8005ca8:	ee63 6a07 	vmul.f32	s13, s6, s14
 8005cac:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8005cb0:	ee62 1a05 	vmul.f32	s3, s4, s10
 8005cb4:	ee75 5a86 	vadd.f32	s11, s11, s12
 8005cb8:	ee62 4aa4 	vmul.f32	s9, s5, s9
 8005cbc:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8005cc0:	ee23 7a87 	vmul.f32	s14, s7, s14
 8005cc4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8005cc8:	3c01      	subs	r4, #1
 8005cca:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005cce:	ed50 5a01 	vldr	s11, [r0, #-4]
 8005cd2:	ee24 6a25 	vmul.f32	s12, s8, s11
 8005cd6:	ee63 6a27 	vmul.f32	s13, s6, s15
 8005cda:	ee36 6a21 	vadd.f32	s12, s12, s3
 8005cde:	f100 0010 	add.w	r0, r0, #16
 8005ce2:	ee36 6a24 	vadd.f32	s12, s12, s9
 8005ce6:	f103 0310 	add.w	r3, r3, #16
 8005cea:	ee36 6a26 	vadd.f32	s12, s12, s13
 8005cee:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005cf2:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 8005cf6:	d1a1      	bne.n	8005c3c <arm_biquad_cascade_df1_f32+0x58>
 8005cf8:	4449      	add	r1, r9
 8005cfa:	4653      	mov	r3, sl
 8005cfc:	f1be 0f00 	cmp.w	lr, #0
 8005d00:	d047      	beq.n	8005d92 <arm_biquad_cascade_df1_f32+0x1ae>
 8005d02:	edd1 4a00 	vldr	s9, [r1]
 8005d06:	ee22 6a25 	vmul.f32	s12, s4, s11
 8005d0a:	ee64 1a24 	vmul.f32	s3, s8, s9
 8005d0e:	ee62 6a85 	vmul.f32	s13, s5, s10
 8005d12:	ee36 5a21 	vadd.f32	s10, s12, s3
 8005d16:	ee23 6a07 	vmul.f32	s12, s6, s14
 8005d1a:	ee35 5a26 	vadd.f32	s10, s10, s13
 8005d1e:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8005d22:	ee35 6a06 	vadd.f32	s12, s10, s12
 8005d26:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d2a:	ed83 6a00 	vstr	s12, [r3]
 8005d2e:	f1b8 0f00 	cmp.w	r8, #0
 8005d32:	d040      	beq.n	8005db6 <arm_biquad_cascade_df1_f32+0x1d2>
 8005d34:	ed91 5a01 	vldr	s10, [r1, #4]
 8005d38:	ee62 7a24 	vmul.f32	s15, s4, s9
 8005d3c:	ee65 1a04 	vmul.f32	s3, s10, s8
 8005d40:	ee62 6aa5 	vmul.f32	s13, s5, s11
 8005d44:	ee77 5aa1 	vadd.f32	s11, s15, s3
 8005d48:	ee63 7a06 	vmul.f32	s15, s6, s12
 8005d4c:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8005d50:	ee23 7a87 	vmul.f32	s14, s7, s14
 8005d54:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8005d58:	f1b8 0f01 	cmp.w	r8, #1
 8005d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d60:	edc3 7a01 	vstr	s15, [r3, #4]
 8005d64:	d030      	beq.n	8005dc8 <arm_biquad_cascade_df1_f32+0x1e4>
 8005d66:	edd1 5a02 	vldr	s11, [r1, #8]
 8005d6a:	ee25 2a02 	vmul.f32	s4, s10, s4
 8005d6e:	ee64 6a25 	vmul.f32	s13, s8, s11
 8005d72:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8005d76:	ee76 6a82 	vadd.f32	s13, s13, s4
 8005d7a:	ee27 3a83 	vmul.f32	s6, s15, s6
 8005d7e:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8005d82:	ee63 3a86 	vmul.f32	s7, s7, s12
 8005d86:	ee76 6a83 	vadd.f32	s13, s13, s6
 8005d8a:	ee36 7aa3 	vadd.f32	s14, s13, s7
 8005d8e:	ed83 7a02 	vstr	s14, [r3, #8]
 8005d92:	3f01      	subs	r7, #1
 8005d94:	ed45 5a04 	vstr	s11, [r5, #-16]
 8005d98:	ed05 5a03 	vstr	s10, [r5, #-12]
 8005d9c:	ed05 7a02 	vstr	s14, [r5, #-8]
 8005da0:	ed45 7a01 	vstr	s15, [r5, #-4]
 8005da4:	f106 0614 	add.w	r6, r6, #20
 8005da8:	f105 0510 	add.w	r5, r5, #16
 8005dac:	4611      	mov	r1, r2
 8005dae:	f47f af2a 	bne.w	8005c06 <arm_biquad_cascade_df1_f32+0x22>
 8005db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db6:	eef0 7a47 	vmov.f32	s15, s14
 8005dba:	eeb0 5a65 	vmov.f32	s10, s11
 8005dbe:	eeb0 7a46 	vmov.f32	s14, s12
 8005dc2:	eef0 5a64 	vmov.f32	s11, s9
 8005dc6:	e7e4      	b.n	8005d92 <arm_biquad_cascade_df1_f32+0x1ae>
 8005dc8:	eeb0 7a67 	vmov.f32	s14, s15
 8005dcc:	eef0 5a45 	vmov.f32	s11, s10
 8005dd0:	eef0 7a46 	vmov.f32	s15, s12
 8005dd4:	eeb0 5a64 	vmov.f32	s10, s9
 8005dd8:	e7db      	b.n	8005d92 <arm_biquad_cascade_df1_f32+0x1ae>
 8005dda:	4613      	mov	r3, r2
 8005ddc:	e78e      	b.n	8005cfc <arm_biquad_cascade_df1_f32+0x118>
 8005dde:	bf00      	nop

08005de0 <memset>:
 8005de0:	4402      	add	r2, r0
 8005de2:	4603      	mov	r3, r0
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d100      	bne.n	8005dea <memset+0xa>
 8005de8:	4770      	bx	lr
 8005dea:	f803 1b01 	strb.w	r1, [r3], #1
 8005dee:	e7f9      	b.n	8005de4 <memset+0x4>

08005df0 <__libc_init_array>:
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	4d0d      	ldr	r5, [pc, #52]	@ (8005e28 <__libc_init_array+0x38>)
 8005df4:	4c0d      	ldr	r4, [pc, #52]	@ (8005e2c <__libc_init_array+0x3c>)
 8005df6:	1b64      	subs	r4, r4, r5
 8005df8:	10a4      	asrs	r4, r4, #2
 8005dfa:	2600      	movs	r6, #0
 8005dfc:	42a6      	cmp	r6, r4
 8005dfe:	d109      	bne.n	8005e14 <__libc_init_array+0x24>
 8005e00:	4d0b      	ldr	r5, [pc, #44]	@ (8005e30 <__libc_init_array+0x40>)
 8005e02:	4c0c      	ldr	r4, [pc, #48]	@ (8005e34 <__libc_init_array+0x44>)
 8005e04:	f000 f818 	bl	8005e38 <_init>
 8005e08:	1b64      	subs	r4, r4, r5
 8005e0a:	10a4      	asrs	r4, r4, #2
 8005e0c:	2600      	movs	r6, #0
 8005e0e:	42a6      	cmp	r6, r4
 8005e10:	d105      	bne.n	8005e1e <__libc_init_array+0x2e>
 8005e12:	bd70      	pop	{r4, r5, r6, pc}
 8005e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e18:	4798      	blx	r3
 8005e1a:	3601      	adds	r6, #1
 8005e1c:	e7ee      	b.n	8005dfc <__libc_init_array+0xc>
 8005e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e22:	4798      	blx	r3
 8005e24:	3601      	adds	r6, #1
 8005e26:	e7f2      	b.n	8005e0e <__libc_init_array+0x1e>
 8005e28:	08006dcc 	.word	0x08006dcc
 8005e2c:	08006dcc 	.word	0x08006dcc
 8005e30:	08006dcc 	.word	0x08006dcc
 8005e34:	08006dd0 	.word	0x08006dd0

08005e38 <_init>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	bf00      	nop
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr

08005e44 <_fini>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	bf00      	nop
 8005e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4a:	bc08      	pop	{r3}
 8005e4c:	469e      	mov	lr, r3
 8005e4e:	4770      	bx	lr
