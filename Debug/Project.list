
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b68  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08005d2c  08005d2c  00006d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e88  08005e88  00007018  2**0
                  CONTENTS
  4 .ARM          00000008  08005e88  08005e88  00006e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e90  08005e90  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e90  08005e90  00006e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e94  08005e94  00006e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005e98  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000018  08005eb0  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  08005eb0  00007814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ea9  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea8  00000000  00000000  0001bef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001eda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8a  00000000  00000000  0001ff38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023120  00000000  00000000  00020cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c0a  00000000  00000000  00043de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5a93  00000000  00000000  0005a9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0013047f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c1c  00000000  00000000  00130538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00135154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d0a  00000000  00000000  001351ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00135eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005d14 	.word	0x08005d14

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08005d14 	.word	0x08005d14

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	@ 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2f>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009a8:	bf24      	itt	cs
 80009aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b2:	d90d      	bls.n	80009d0 <__aeabi_d2f+0x30>
 80009b4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c8:	bf08      	it	eq
 80009ca:	f020 0001 	biceq.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d4:	d121      	bne.n	8000a1a <__aeabi_d2f+0x7a>
 80009d6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009da:	bfbc      	itt	lt
 80009dc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e0:	4770      	bxlt	lr
 80009e2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ea:	f1c2 0218 	rsb	r2, r2, #24
 80009ee:	f1c2 0c20 	rsb	ip, r2, #32
 80009f2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f6:	fa20 f002 	lsr.w	r0, r0, r2
 80009fa:	bf18      	it	ne
 80009fc:	f040 0001 	orrne.w	r0, r0, #1
 8000a00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a0c:	ea40 000c 	orr.w	r0, r0, ip
 8000a10:	fa23 f302 	lsr.w	r3, r3, r2
 8000a14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a18:	e7cc      	b.n	80009b4 <__aeabi_d2f+0x14>
 8000a1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1e:	d107      	bne.n	8000a30 <__aeabi_d2f+0x90>
 8000a20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a24:	bf1e      	ittt	ne
 8000a26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a2e:	4770      	bxne	lr
 8000a30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_uldivmod>:
 8000a40:	b953      	cbnz	r3, 8000a58 <__aeabi_uldivmod+0x18>
 8000a42:	b94a      	cbnz	r2, 8000a58 <__aeabi_uldivmod+0x18>
 8000a44:	2900      	cmp	r1, #0
 8000a46:	bf08      	it	eq
 8000a48:	2800      	cmpeq	r0, #0
 8000a4a:	bf1c      	itt	ne
 8000a4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a50:	f04f 30ff 	movne.w	r0, #4294967295
 8000a54:	f000 b96a 	b.w	8000d2c <__aeabi_idiv0>
 8000a58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a60:	f000 f806 	bl	8000a70 <__udivmoddi4>
 8000a64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4770      	bx	lr

08000a70 <__udivmoddi4>:
 8000a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a74:	9d08      	ldr	r5, [sp, #32]
 8000a76:	460c      	mov	r4, r1
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d14e      	bne.n	8000b1a <__udivmoddi4+0xaa>
 8000a7c:	4694      	mov	ip, r2
 8000a7e:	458c      	cmp	ip, r1
 8000a80:	4686      	mov	lr, r0
 8000a82:	fab2 f282 	clz	r2, r2
 8000a86:	d962      	bls.n	8000b4e <__udivmoddi4+0xde>
 8000a88:	b14a      	cbz	r2, 8000a9e <__udivmoddi4+0x2e>
 8000a8a:	f1c2 0320 	rsb	r3, r2, #32
 8000a8e:	4091      	lsls	r1, r2
 8000a90:	fa20 f303 	lsr.w	r3, r0, r3
 8000a94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a98:	4319      	orrs	r1, r3
 8000a9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa2:	fa1f f68c 	uxth.w	r6, ip
 8000aa6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aaa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aae:	fb07 1114 	mls	r1, r7, r4, r1
 8000ab2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab6:	fb04 f106 	mul.w	r1, r4, r6
 8000aba:	4299      	cmp	r1, r3
 8000abc:	d90a      	bls.n	8000ad4 <__udivmoddi4+0x64>
 8000abe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ac6:	f080 8112 	bcs.w	8000cee <__udivmoddi4+0x27e>
 8000aca:	4299      	cmp	r1, r3
 8000acc:	f240 810f 	bls.w	8000cee <__udivmoddi4+0x27e>
 8000ad0:	3c02      	subs	r4, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	1a59      	subs	r1, r3, r1
 8000ad6:	fa1f f38e 	uxth.w	r3, lr
 8000ada:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ade:	fb07 1110 	mls	r1, r7, r0, r1
 8000ae2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae6:	fb00 f606 	mul.w	r6, r0, r6
 8000aea:	429e      	cmp	r6, r3
 8000aec:	d90a      	bls.n	8000b04 <__udivmoddi4+0x94>
 8000aee:	eb1c 0303 	adds.w	r3, ip, r3
 8000af2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000af6:	f080 80fc 	bcs.w	8000cf2 <__udivmoddi4+0x282>
 8000afa:	429e      	cmp	r6, r3
 8000afc:	f240 80f9 	bls.w	8000cf2 <__udivmoddi4+0x282>
 8000b00:	4463      	add	r3, ip
 8000b02:	3802      	subs	r0, #2
 8000b04:	1b9b      	subs	r3, r3, r6
 8000b06:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11d      	cbz	r5, 8000b16 <__udivmoddi4+0xa6>
 8000b0e:	40d3      	lsrs	r3, r2
 8000b10:	2200      	movs	r2, #0
 8000b12:	e9c5 3200 	strd	r3, r2, [r5]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d905      	bls.n	8000b2a <__udivmoddi4+0xba>
 8000b1e:	b10d      	cbz	r5, 8000b24 <__udivmoddi4+0xb4>
 8000b20:	e9c5 0100 	strd	r0, r1, [r5]
 8000b24:	2100      	movs	r1, #0
 8000b26:	4608      	mov	r0, r1
 8000b28:	e7f5      	b.n	8000b16 <__udivmoddi4+0xa6>
 8000b2a:	fab3 f183 	clz	r1, r3
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d146      	bne.n	8000bc0 <__udivmoddi4+0x150>
 8000b32:	42a3      	cmp	r3, r4
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0xcc>
 8000b36:	4290      	cmp	r0, r2
 8000b38:	f0c0 80f0 	bcc.w	8000d1c <__udivmoddi4+0x2ac>
 8000b3c:	1a86      	subs	r6, r0, r2
 8000b3e:	eb64 0303 	sbc.w	r3, r4, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	2d00      	cmp	r5, #0
 8000b46:	d0e6      	beq.n	8000b16 <__udivmoddi4+0xa6>
 8000b48:	e9c5 6300 	strd	r6, r3, [r5]
 8000b4c:	e7e3      	b.n	8000b16 <__udivmoddi4+0xa6>
 8000b4e:	2a00      	cmp	r2, #0
 8000b50:	f040 8090 	bne.w	8000c74 <__udivmoddi4+0x204>
 8000b54:	eba1 040c 	sub.w	r4, r1, ip
 8000b58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b5c:	fa1f f78c 	uxth.w	r7, ip
 8000b60:	2101      	movs	r1, #1
 8000b62:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6a:	fb08 4416 	mls	r4, r8, r6, r4
 8000b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b72:	fb07 f006 	mul.w	r0, r7, r6
 8000b76:	4298      	cmp	r0, r3
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x11c>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b82:	d202      	bcs.n	8000b8a <__udivmoddi4+0x11a>
 8000b84:	4298      	cmp	r0, r3
 8000b86:	f200 80cd 	bhi.w	8000d24 <__udivmoddi4+0x2b4>
 8000b8a:	4626      	mov	r6, r4
 8000b8c:	1a1c      	subs	r4, r3, r0
 8000b8e:	fa1f f38e 	uxth.w	r3, lr
 8000b92:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b96:	fb08 4410 	mls	r4, r8, r0, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb00 f707 	mul.w	r7, r0, r7
 8000ba2:	429f      	cmp	r7, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x148>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x146>
 8000bb0:	429f      	cmp	r7, r3
 8000bb2:	f200 80b0 	bhi.w	8000d16 <__udivmoddi4+0x2a6>
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	1bdb      	subs	r3, r3, r7
 8000bba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0x9c>
 8000bc0:	f1c1 0620 	rsb	r6, r1, #32
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bca:	431f      	orrs	r7, r3
 8000bcc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bd0:	fa04 f301 	lsl.w	r3, r4, r1
 8000bd4:	ea43 030c 	orr.w	r3, r3, ip
 8000bd8:	40f4      	lsrs	r4, r6
 8000bda:	fa00 f801 	lsl.w	r8, r0, r1
 8000bde:	0c38      	lsrs	r0, r7, #16
 8000be0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000be4:	fbb4 fef0 	udiv	lr, r4, r0
 8000be8:	fa1f fc87 	uxth.w	ip, r7
 8000bec:	fb00 441e 	mls	r4, r0, lr, r4
 8000bf0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bf4:	fb0e f90c 	mul.w	r9, lr, ip
 8000bf8:	45a1      	cmp	r9, r4
 8000bfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bfe:	d90a      	bls.n	8000c16 <__udivmoddi4+0x1a6>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c06:	f080 8084 	bcs.w	8000d12 <__udivmoddi4+0x2a2>
 8000c0a:	45a1      	cmp	r9, r4
 8000c0c:	f240 8081 	bls.w	8000d12 <__udivmoddi4+0x2a2>
 8000c10:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c14:	443c      	add	r4, r7
 8000c16:	eba4 0409 	sub.w	r4, r4, r9
 8000c1a:	fa1f f983 	uxth.w	r9, r3
 8000c1e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c22:	fb00 4413 	mls	r4, r0, r3, r4
 8000c26:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c2e:	45a4      	cmp	ip, r4
 8000c30:	d907      	bls.n	8000c42 <__udivmoddi4+0x1d2>
 8000c32:	193c      	adds	r4, r7, r4
 8000c34:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c38:	d267      	bcs.n	8000d0a <__udivmoddi4+0x29a>
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0x29a>
 8000c3e:	3b02      	subs	r3, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c46:	fba0 9302 	umull	r9, r3, r0, r2
 8000c4a:	eba4 040c 	sub.w	r4, r4, ip
 8000c4e:	429c      	cmp	r4, r3
 8000c50:	46ce      	mov	lr, r9
 8000c52:	469c      	mov	ip, r3
 8000c54:	d351      	bcc.n	8000cfa <__udivmoddi4+0x28a>
 8000c56:	d04e      	beq.n	8000cf6 <__udivmoddi4+0x286>
 8000c58:	b155      	cbz	r5, 8000c70 <__udivmoddi4+0x200>
 8000c5a:	ebb8 030e 	subs.w	r3, r8, lr
 8000c5e:	eb64 040c 	sbc.w	r4, r4, ip
 8000c62:	fa04 f606 	lsl.w	r6, r4, r6
 8000c66:	40cb      	lsrs	r3, r1
 8000c68:	431e      	orrs	r6, r3
 8000c6a:	40cc      	lsrs	r4, r1
 8000c6c:	e9c5 6400 	strd	r6, r4, [r5]
 8000c70:	2100      	movs	r1, #0
 8000c72:	e750      	b.n	8000b16 <__udivmoddi4+0xa6>
 8000c74:	f1c2 0320 	rsb	r3, r2, #32
 8000c78:	fa20 f103 	lsr.w	r1, r0, r3
 8000c7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c80:	fa24 f303 	lsr.w	r3, r4, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	430c      	orrs	r4, r1
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c90:	fa1f f78c 	uxth.w	r7, ip
 8000c94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c98:	fb08 3110 	mls	r1, r8, r0, r3
 8000c9c:	0c23      	lsrs	r3, r4, #16
 8000c9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca2:	fb00 f107 	mul.w	r1, r0, r7
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x24c>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cb2:	d22c      	bcs.n	8000d0e <__udivmoddi4+0x29e>
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	d92a      	bls.n	8000d0e <__udivmoddi4+0x29e>
 8000cb8:	3802      	subs	r0, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cc4:	fb08 3311 	mls	r3, r8, r1, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb01 f307 	mul.w	r3, r1, r7
 8000cd0:	42a3      	cmp	r3, r4
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x276>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cdc:	d213      	bcs.n	8000d06 <__udivmoddi4+0x296>
 8000cde:	42a3      	cmp	r3, r4
 8000ce0:	d911      	bls.n	8000d06 <__udivmoddi4+0x296>
 8000ce2:	3902      	subs	r1, #2
 8000ce4:	4464      	add	r4, ip
 8000ce6:	1ae4      	subs	r4, r4, r3
 8000ce8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cec:	e739      	b.n	8000b62 <__udivmoddi4+0xf2>
 8000cee:	4604      	mov	r4, r0
 8000cf0:	e6f0      	b.n	8000ad4 <__udivmoddi4+0x64>
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e706      	b.n	8000b04 <__udivmoddi4+0x94>
 8000cf6:	45c8      	cmp	r8, r9
 8000cf8:	d2ae      	bcs.n	8000c58 <__udivmoddi4+0x1e8>
 8000cfa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cfe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d02:	3801      	subs	r0, #1
 8000d04:	e7a8      	b.n	8000c58 <__udivmoddi4+0x1e8>
 8000d06:	4631      	mov	r1, r6
 8000d08:	e7ed      	b.n	8000ce6 <__udivmoddi4+0x276>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	e799      	b.n	8000c42 <__udivmoddi4+0x1d2>
 8000d0e:	4630      	mov	r0, r6
 8000d10:	e7d4      	b.n	8000cbc <__udivmoddi4+0x24c>
 8000d12:	46d6      	mov	lr, sl
 8000d14:	e77f      	b.n	8000c16 <__udivmoddi4+0x1a6>
 8000d16:	4463      	add	r3, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	e74d      	b.n	8000bb8 <__udivmoddi4+0x148>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	4623      	mov	r3, r4
 8000d20:	4608      	mov	r0, r1
 8000d22:	e70f      	b.n	8000b44 <__udivmoddi4+0xd4>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	e730      	b.n	8000b8c <__udivmoddi4+0x11c>
 8000d2a:	bf00      	nop

08000d2c <__aeabi_idiv0>:
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <check_keys>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Per the adafruit keypad library, it seems like they allow polling the keypad
// at 20 us!! i.e. _KEYPAD_SETTLING_DELAY=20us
// We should be able to do close to that too
void check_keys() {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
  uint16_t row_pins[] = { ROW0_Pin, ROW1_Pin, ROW2_Pin, ROW3_Pin };
 8000d36:	4a3a      	ldr	r2, [pc, #232]	@ (8000e20 <check_keys+0xf0>)
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d3e:	e883 0003 	stmia.w	r3, {r0, r1}

  key_detected = 0;
 8000d42:	4b38      	ldr	r3, [pc, #224]	@ (8000e24 <check_keys+0xf4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	e05a      	b.n	8000e04 <check_keys+0xd4>

    // Clear Row0 to Row3; Only valid b/c they are all on GPIOC
    HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000d54:	4834      	ldr	r0, [pc, #208]	@ (8000e28 <check_keys+0xf8>)
 8000d56:	f001 ffd7 	bl	8002d08 <HAL_GPIO_WritePin>

    // Set desired Row
    HAL_GPIO_WritePin(ROW0_GPIO_Port, row_pins[i], GPIO_PIN_SET);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	3310      	adds	r3, #16
 8000d60:	443b      	add	r3, r7
 8000d62:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000d66:	2201      	movs	r2, #1
 8000d68:	4619      	mov	r1, r3
 8000d6a:	482f      	ldr	r0, [pc, #188]	@ (8000e28 <check_keys+0xf8>)
 8000d6c:	f001 ffcc 	bl	8002d08 <HAL_GPIO_WritePin>
    HAL_Delay(0);
 8000d70:	2000      	movs	r0, #0
 8000d72:	f001 f871 	bl	8001e58 <HAL_Delay>

    if (HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin)) {
 8000d76:	2110      	movs	r1, #16
 8000d78:	482c      	ldr	r0, [pc, #176]	@ (8000e2c <check_keys+0xfc>)
 8000d7a:	f001 ffad 	bl	8002cd8 <HAL_GPIO_ReadPin>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d009      	beq.n	8000d98 <check_keys+0x68>
      current_row = i;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	b25a      	sxtb	r2, r3
 8000d88:	4b29      	ldr	r3, [pc, #164]	@ (8000e30 <check_keys+0x100>)
 8000d8a:	701a      	strb	r2, [r3, #0]
      current_col = 0;
 8000d8c:	4b29      	ldr	r3, [pc, #164]	@ (8000e34 <check_keys+0x104>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
      key_detected = 1;
 8000d92:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <check_keys+0xf4>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
    }
    if (HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin)) {
 8000d98:	2120      	movs	r1, #32
 8000d9a:	4824      	ldr	r0, [pc, #144]	@ (8000e2c <check_keys+0xfc>)
 8000d9c:	f001 ff9c 	bl	8002cd8 <HAL_GPIO_ReadPin>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d009      	beq.n	8000dba <check_keys+0x8a>
      current_row = i;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	b25a      	sxtb	r2, r3
 8000daa:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <check_keys+0x100>)
 8000dac:	701a      	strb	r2, [r3, #0]
      current_col = 1;
 8000dae:	4b21      	ldr	r3, [pc, #132]	@ (8000e34 <check_keys+0x104>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
      key_detected = 1;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <check_keys+0xf4>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
    }
    if (HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin)) {
 8000dba:	2140      	movs	r1, #64	@ 0x40
 8000dbc:	481b      	ldr	r0, [pc, #108]	@ (8000e2c <check_keys+0xfc>)
 8000dbe:	f001 ff8b 	bl	8002cd8 <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d009      	beq.n	8000ddc <check_keys+0xac>
      current_row = i;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	b25a      	sxtb	r2, r3
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <check_keys+0x100>)
 8000dce:	701a      	strb	r2, [r3, #0]
      current_col = 2;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <check_keys+0x104>)
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	701a      	strb	r2, [r3, #0]
      key_detected = 1;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <check_keys+0xf4>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
    }
    if (HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin)) {
 8000ddc:	2180      	movs	r1, #128	@ 0x80
 8000dde:	4813      	ldr	r0, [pc, #76]	@ (8000e2c <check_keys+0xfc>)
 8000de0:	f001 ff7a 	bl	8002cd8 <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d009      	beq.n	8000dfe <check_keys+0xce>
      current_row = i;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	b25a      	sxtb	r2, r3
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <check_keys+0x100>)
 8000df0:	701a      	strb	r2, [r3, #0]
      current_col = 3;
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <check_keys+0x104>)
 8000df4:	2203      	movs	r2, #3
 8000df6:	701a      	strb	r2, [r3, #0]
      key_detected = 1;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <check_keys+0xf4>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3301      	adds	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	dda1      	ble.n	8000d4e <check_keys+0x1e>
    }
  }

  // This ensures that after scanning the rows, they are all set
  // to high, so the interrupt detects if ANY key is pressed
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000e10:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <check_keys+0xf8>)
 8000e12:	f001 ff79 	bl	8002d08 <HAL_GPIO_WritePin>

}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	08005d2c 	.word	0x08005d2c
 8000e24:	200006d2 	.word	0x200006d2
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020c00 	.word	0x40020c00
 8000e30:	20000004 	.word	0x20000004
 8000e34:	20000005 	.word	0x20000005

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b08c      	sub	sp, #48	@ 0x30
 8000e3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f000 ff99 	bl	8001d74 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Call FIR init function to initialize the instance structure. */
  arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 8000e42:	4b89      	ldr	r3, [pc, #548]	@ (8001068 <main+0x230>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f107 0008 	add.w	r0, r7, #8
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	4b87      	ldr	r3, [pc, #540]	@ (800106c <main+0x234>)
 8000e4e:	4a88      	ldr	r2, [pc, #544]	@ (8001070 <main+0x238>)
 8000e50:	211d      	movs	r1, #29
 8000e52:	f004 fca3 	bl	800579c <arm_fir_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e56:	f000 fa13 	bl	8001280 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  float32_t output = 0;
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
  float index = 0;
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  float incr = 1;
 8000e66:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000e6a:	623b      	str	r3, [r7, #32]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6c:	f000 fbd2 	bl	8001614 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e70:	f000 fbb0 	bl	80015d4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e74:	f000 fb56 	bl	8001524 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e78:	f000 fb7e 	bl	8001578 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8000e7c:	f000 fa6c 	bl	8001358 <MX_DAC_Init>
  MX_TIM7_Init();
 8000e80:	f000 fb1a 	bl	80014b8 <MX_TIM7_Init>
  MX_TIM6_Init();
 8000e84:	f000 fae2 	bl	800144c <MX_TIM6_Init>
  MX_TIM5_Init();
 8000e88:	f000 fa90 	bl	80013ac <MX_TIM5_Init>

  for (int i = 0; i < SAMPLES/2 - 1; i++){
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	e009      	b.n	8000ea6 <main+0x6e>
  	  square[i] = 1;
 8000e92:	4a78      	ldr	r2, [pc, #480]	@ (8001074 <main+0x23c>)
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000e9e:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < SAMPLES/2 - 1; i++){
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	61fb      	str	r3, [r7, #28]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	2b16      	cmp	r3, #22
 8000eaa:	ddf2      	ble.n	8000e92 <main+0x5a>
    }

    for (int i = SAMPLES/2 - 1; i < SAMPLES - 1; i++){
 8000eac:	2317      	movs	r3, #23
 8000eae:	61bb      	str	r3, [r7, #24]
 8000eb0:	e008      	b.n	8000ec4 <main+0x8c>
    	  square[i] = -1;
 8000eb2:	4a70      	ldr	r2, [pc, #448]	@ (8001074 <main+0x23c>)
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a6f      	ldr	r2, [pc, #444]	@ (8001078 <main+0x240>)
 8000ebc:	601a      	str	r2, [r3, #0]
    for (int i = SAMPLES/2 - 1; i < SAMPLES - 1; i++){
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ec8:	ddf3      	ble.n	8000eb2 <main+0x7a>

//        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2047);

  /* USER CODE BEGIN 2 */
  // Set Row0 to Row3; Only valid b/c they are all on GPIOC
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000ed0:	486a      	ldr	r0, [pc, #424]	@ (800107c <main+0x244>)
 8000ed2:	f001 ff19 	bl	8002d08 <HAL_GPIO_WritePin>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4869      	ldr	r0, [pc, #420]	@ (8001080 <main+0x248>)
 8000eda:	f001 f914 	bl	8002106 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8000ede:	4869      	ldr	r0, [pc, #420]	@ (8001084 <main+0x24c>)
 8000ee0:	f003 fa62 	bl	80043a8 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_Base_Start(&htim5);
 8000ee4:	4868      	ldr	r0, [pc, #416]	@ (8001088 <main+0x250>)
 8000ee6:	f003 f9f7 	bl	80042d8 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (keypad_poll){
 8000eea:	4b68      	ldr	r3, [pc, #416]	@ (800108c <main+0x254>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <main+0xc0>
	  	keypad_poll = 0;
 8000ef2:	4b66      	ldr	r3, [pc, #408]	@ (800108c <main+0x254>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
	  	//current_row = 0;
	  	//poll_keypad();
	  }

    if (key_pressed){
 8000ef8:	4b65      	ldr	r3, [pc, #404]	@ (8001090 <main+0x258>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 8103 	beq.w	8001108 <main+0x2d0>
      // We cannot clear key_pressed here since we haven't
      // figured out which key was actually pressed
      // This is because scanning through keys generates
      // interrupts which re-enables key_pressed, which 
      // we won't be able to properly clear 
      check_keys();
 8000f02:	f7ff ff15 	bl	8000d30 <check_keys>

      if (key_detected) {
 8000f06:	4b63      	ldr	r3, [pc, #396]	@ (8001094 <main+0x25c>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 80fc 	beq.w	8001108 <main+0x2d0>
        if ((current_row == 2) && (current_col == 1)){
 8000f10:	4b61      	ldr	r3, [pc, #388]	@ (8001098 <main+0x260>)
 8000f12:	f993 3000 	ldrsb.w	r3, [r3]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d10b      	bne.n	8000f32 <main+0xfa>
 8000f1a:	4b60      	ldr	r3, [pc, #384]	@ (800109c <main+0x264>)
 8000f1c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d106      	bne.n	8000f32 <main+0xfa>
          // double the frequency
          incr = incr*2;
 8000f24:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f2c:	edc7 7a08 	vstr	s15, [r7, #32]
 8000f30:	e0de      	b.n	80010f0 <main+0x2b8>
        }
        else if ((current_row == 2) && (current_col == 0)){
 8000f32:	4b59      	ldr	r3, [pc, #356]	@ (8001098 <main+0x260>)
 8000f34:	f993 3000 	ldrsb.w	r3, [r3]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d10d      	bne.n	8000f58 <main+0x120>
 8000f3c:	4b57      	ldr	r3, [pc, #348]	@ (800109c <main+0x264>)
 8000f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d108      	bne.n	8000f58 <main+0x120>
          // half the frequency (haven't exactly figured out how to go below 1 kHz)
          incr = incr/2;
 8000f46:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f4a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f52:	edc7 7a08 	vstr	s15, [r7, #32]
 8000f56:	e0cb      	b.n	80010f0 <main+0x2b8>
        }
        else if ((current_row == 3) && (current_col == 1)){
 8000f58:	4b4f      	ldr	r3, [pc, #316]	@ (8001098 <main+0x260>)
 8000f5a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d110      	bne.n	8000f84 <main+0x14c>
 8000f62:	4b4e      	ldr	r3, [pc, #312]	@ (800109c <main+0x264>)
 8000f64:	f993 3000 	ldrsb.w	r3, [r3]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d10b      	bne.n	8000f84 <main+0x14c>
          // Increase volume (if not maximum)
          if (volume_level < 10){
 8000f6c:	4b4c      	ldr	r3, [pc, #304]	@ (80010a0 <main+0x268>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b09      	cmp	r3, #9
 8000f72:	f200 80bd 	bhi.w	80010f0 <main+0x2b8>
            volume_level++;
 8000f76:	4b4a      	ldr	r3, [pc, #296]	@ (80010a0 <main+0x268>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b48      	ldr	r3, [pc, #288]	@ (80010a0 <main+0x268>)
 8000f80:	701a      	strb	r2, [r3, #0]
          if (volume_level < 10){
 8000f82:	e0b5      	b.n	80010f0 <main+0x2b8>
          }
        }
        else if ((current_row == 3) && (current_col == 0)){
 8000f84:	4b44      	ldr	r3, [pc, #272]	@ (8001098 <main+0x260>)
 8000f86:	f993 3000 	ldrsb.w	r3, [r3]
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d110      	bne.n	8000fb0 <main+0x178>
 8000f8e:	4b43      	ldr	r3, [pc, #268]	@ (800109c <main+0x264>)
 8000f90:	f993 3000 	ldrsb.w	r3, [r3]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10b      	bne.n	8000fb0 <main+0x178>
          // Decrease volume (if not minimum)
          if (volume_level > 0){
 8000f98:	4b41      	ldr	r3, [pc, #260]	@ (80010a0 <main+0x268>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80a7 	beq.w	80010f0 <main+0x2b8>
            volume_level--;
 8000fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80010a0 <main+0x268>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b3d      	ldr	r3, [pc, #244]	@ (80010a0 <main+0x268>)
 8000fac:	701a      	strb	r2, [r3, #0]
          if (volume_level > 0){
 8000fae:	e09f      	b.n	80010f0 <main+0x2b8>
          }

        // Control volume of triangular wave
        }
        else if ((current_row == 3) && (current_col == 3)){
 8000fb0:	4b39      	ldr	r3, [pc, #228]	@ (8001098 <main+0x260>)
 8000fb2:	f993 3000 	ldrsb.w	r3, [r3]
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d117      	bne.n	8000fea <main+0x1b2>
 8000fba:	4b38      	ldr	r3, [pc, #224]	@ (800109c <main+0x264>)
 8000fbc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d112      	bne.n	8000fea <main+0x1b2>
          if (trig_vol < 11){
 8000fc4:	4b37      	ldr	r3, [pc, #220]	@ (80010a4 <main+0x26c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b0a      	cmp	r3, #10
 8000fca:	d805      	bhi.n	8000fd8 <main+0x1a0>
            trig_vol++;
 8000fcc:	4b35      	ldr	r3, [pc, #212]	@ (80010a4 <main+0x26c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b33      	ldr	r3, [pc, #204]	@ (80010a4 <main+0x26c>)
 8000fd6:	701a      	strb	r2, [r3, #0]
          }
          HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, (trig_vol << 8));
 8000fd8:	4b32      	ldr	r3, [pc, #200]	@ (80010a4 <main+0x26c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4827      	ldr	r0, [pc, #156]	@ (8001080 <main+0x248>)
 8000fe4:	f001 f9b9 	bl	800235a <HAL_DACEx_TriangleWaveGenerate>
 8000fe8:	e082      	b.n	80010f0 <main+0x2b8>
        }
        else if ((current_row == 3) && (current_col == 2)){
 8000fea:	4b2b      	ldr	r3, [pc, #172]	@ (8001098 <main+0x260>)
 8000fec:	f993 3000 	ldrsb.w	r3, [r3]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d117      	bne.n	8001024 <main+0x1ec>
 8000ff4:	4b29      	ldr	r3, [pc, #164]	@ (800109c <main+0x264>)
 8000ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d112      	bne.n	8001024 <main+0x1ec>
          if (trig_vol > 0){
 8000ffe:	4b29      	ldr	r3, [pc, #164]	@ (80010a4 <main+0x26c>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <main+0x1da>
            trig_vol--;
 8001006:	4b27      	ldr	r3, [pc, #156]	@ (80010a4 <main+0x26c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	3b01      	subs	r3, #1
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b25      	ldr	r3, [pc, #148]	@ (80010a4 <main+0x26c>)
 8001010:	701a      	strb	r2, [r3, #0]
          }
          HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, (trig_vol << 8));
 8001012:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <main+0x26c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	461a      	mov	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	4818      	ldr	r0, [pc, #96]	@ (8001080 <main+0x248>)
 800101e:	f001 f99c 	bl	800235a <HAL_DACEx_TriangleWaveGenerate>
 8001022:	e065      	b.n	80010f0 <main+0x2b8>

          // Control frequency of triangular wave
        }
        else if ((current_row == 2) && (current_col == 3)){
 8001024:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <main+0x260>)
 8001026:	f993 3000 	ldrsb.w	r3, [r3]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d13e      	bne.n	80010ac <main+0x274>
 800102e:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <main+0x264>)
 8001030:	f993 3000 	ldrsb.w	r3, [r3]
 8001034:	2b03      	cmp	r3, #3
 8001036:	d139      	bne.n	80010ac <main+0x274>
          // increase freq
          if (trig_freq > 1){
 8001038:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <main+0x270>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d905      	bls.n	800104c <main+0x214>
            trig_freq = trig_freq >> 1;
 8001040:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <main+0x270>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <main+0x270>)
 800104a:	801a      	strh	r2, [r3, #0]
          }
          htim5.Init.Period = trig_freq;
 800104c:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <main+0x270>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <main+0x250>)
 8001054:	60da      	str	r2, [r3, #12]
          if (HAL_TIM_Base_Init(&htim5) != HAL_OK){
 8001056:	480c      	ldr	r0, [pc, #48]	@ (8001088 <main+0x250>)
 8001058:	f003 f8ee 	bl	8004238 <HAL_TIM_Base_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d046      	beq.n	80010f0 <main+0x2b8>
            Error_Handler();
 8001062:	f000 fbc1 	bl	80017e8 <Error_Handler>
          if (HAL_TIM_Base_Init(&htim5) != HAL_OK){
 8001066:	e043      	b.n	80010f0 <main+0x2b8>
 8001068:	20000008 	.word	0x20000008
 800106c:	20000798 	.word	0x20000798
 8001070:	08005df4 	.word	0x08005df4
 8001074:	200006d8 	.word	0x200006d8
 8001078:	bf800000 	.word	0xbf800000
 800107c:	40020800 	.word	0x40020800
 8001080:	20000034 	.word	0x20000034
 8001084:	20000138 	.word	0x20000138
 8001088:	200000a8 	.word	0x200000a8
 800108c:	200006d0 	.word	0x200006d0
 8001090:	200006d1 	.word	0x200006d1
 8001094:	200006d2 	.word	0x200006d2
 8001098:	20000004 	.word	0x20000004
 800109c:	20000005 	.word	0x20000005
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000001 	.word	0x20000001
 80010a8:	20000002 	.word	0x20000002
          }
        }
        else if ((current_row == 2) && (current_col == 2)){
 80010ac:	4b62      	ldr	r3, [pc, #392]	@ (8001238 <main+0x400>)
 80010ae:	f993 3000 	ldrsb.w	r3, [r3]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d11c      	bne.n	80010f0 <main+0x2b8>
 80010b6:	4b61      	ldr	r3, [pc, #388]	@ (800123c <main+0x404>)
 80010b8:	f993 3000 	ldrsb.w	r3, [r3]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d117      	bne.n	80010f0 <main+0x2b8>
          // increase freq
          if (trig_freq < 1000){
 80010c0:	4b5f      	ldr	r3, [pc, #380]	@ (8001240 <main+0x408>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010c8:	d205      	bcs.n	80010d6 <main+0x29e>
            trig_freq = trig_freq << 1;
 80010ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001240 <main+0x408>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001240 <main+0x408>)
 80010d4:	801a      	strh	r2, [r3, #0]
          }
          htim5.Init.Period = trig_freq;
 80010d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001240 <main+0x408>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b59      	ldr	r3, [pc, #356]	@ (8001244 <main+0x40c>)
 80010de:	60da      	str	r2, [r3, #12]
          if (HAL_TIM_Base_Init(&htim5) != HAL_OK){
 80010e0:	4858      	ldr	r0, [pc, #352]	@ (8001244 <main+0x40c>)
 80010e2:	f003 f8a9 	bl	8004238 <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <main+0x2b8>
            Error_Handler();
 80010ec:	f000 fb7c 	bl	80017e8 <Error_Handler>
          }
        }

        // Clear keypress and keydetect
        key_detected = 0;
 80010f0:	4b55      	ldr	r3, [pc, #340]	@ (8001248 <main+0x410>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
        key_pressed = 0;
 80010f6:	4b55      	ldr	r3, [pc, #340]	@ (800124c <main+0x414>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
        current_row = -1;
 80010fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001238 <main+0x400>)
 80010fe:	22ff      	movs	r2, #255	@ 0xff
 8001100:	701a      	strb	r2, [r3, #0]
        current_col = -1;
 8001102:	4b4e      	ldr	r3, [pc, #312]	@ (800123c <main+0x404>)
 8001104:	22ff      	movs	r2, #255	@ 0xff
 8001106:	701a      	strb	r2, [r3, #0]
      }
    }

	  if (new_sample){
 8001108:	4b51      	ldr	r3, [pc, #324]	@ (8001250 <main+0x418>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	f43f aeec 	beq.w	8000eea <main+0xb2>
		  new_sample = 0;
 8001112:	4b4f      	ldr	r3, [pc, #316]	@ (8001250 <main+0x418>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]

		  const float32_t *waveform = (volume_level % 2 == 0) ? sine : square;
 8001118:	4b4e      	ldr	r3, [pc, #312]	@ (8001254 <main+0x41c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <main+0x2f2>
 8001126:	4b4c      	ldr	r3, [pc, #304]	@ (8001258 <main+0x420>)
 8001128:	e000      	b.n	800112c <main+0x2f4>
 800112a:	4b4c      	ldr	r3, [pc, #304]	@ (800125c <main+0x424>)
 800112c:	617b      	str	r3, [r7, #20]

	  	  if (filter_en){
 800112e:	4b4c      	ldr	r3, [pc, #304]	@ (8001260 <main+0x428>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d019      	beq.n	800116a <main+0x332>
	  		  arm_fir_f32(&S, waveform + (uint32_t)(index)%SAMPLES, &output, blockSize);
 8001136:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800113a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800113e:	ee17 1a90 	vmov	r1, s15
 8001142:	4b48      	ldr	r3, [pc, #288]	@ (8001264 <main+0x42c>)
 8001144:	fba3 2301 	umull	r2, r3, r3, r1
 8001148:	095a      	lsrs	r2, r3, #5
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	1aca      	subs	r2, r1, r3
 8001154:	0093      	lsls	r3, r2, #2
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	18d1      	adds	r1, r2, r3
 800115a:	4b43      	ldr	r3, [pc, #268]	@ (8001268 <main+0x430>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	1d3a      	adds	r2, r7, #4
 8001160:	f107 0008 	add.w	r0, r7, #8
 8001164:	f004 fb2a 	bl	80057bc <arm_fir_f32>
 8001168:	e02f      	b.n	80011ca <main+0x392>
	  	  }else{
	  		  output = waveform[(uint32_t)(index) % SAMPLES] * (volume_level / 10.0);
 800116a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800116e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001172:	ee17 1a90 	vmov	r1, s15
 8001176:	4b3b      	ldr	r3, [pc, #236]	@ (8001264 <main+0x42c>)
 8001178:	fba3 2301 	umull	r2, r3, r3, r1
 800117c:	095a      	lsrs	r2, r3, #5
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	1aca      	subs	r2, r1, r3
 8001188:	0093      	lsls	r3, r2, #2
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4413      	add	r3, r2
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f99b 	bl	80004cc <__aeabi_f2d>
 8001196:	4604      	mov	r4, r0
 8001198:	460d      	mov	r5, r1
 800119a:	4b2e      	ldr	r3, [pc, #184]	@ (8001254 <main+0x41c>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f982 	bl	80004a8 <__aeabi_i2d>
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b30      	ldr	r3, [pc, #192]	@ (800126c <main+0x434>)
 80011aa:	f7ff fb11 	bl	80007d0 <__aeabi_ddiv>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff f9e1 	bl	800057c <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fbed 	bl	80009a0 <__aeabi_d2f>
 80011c6:	4603      	mov	r3, r0
 80011c8:	607b      	str	r3, [r7, #4]
	  	  }

	  	  	  output *= 4095;
 80011ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ce:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001270 <main+0x438>
 80011d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d6:	edc7 7a01 	vstr	s15, [r7, #4]
	  	  	  output += 2047;
 80011da:	edd7 7a01 	vldr	s15, [r7, #4]
 80011de:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001274 <main+0x43c>
 80011e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011e6:	edc7 7a01 	vstr	s15, [r7, #4]
	  	  	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint16_t)output);
 80011ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f2:	ee17 3a90 	vmov	r3, s15
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	481e      	ldr	r0, [pc, #120]	@ (8001278 <main+0x440>)
 80011fe:	f001 f82e 	bl	800225e <HAL_DAC_SetValue>


	  	  	  index += incr;
 8001202:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001206:	edd7 7a08 	vldr	s15, [r7, #32]
 800120a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	  	  	  if (index >= SAMPLES){
 8001212:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001216:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800127c <main+0x444>
 800121a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	db07      	blt.n	8001234 <main+0x3fc>
	  	  		  index -= SAMPLES; // wrap around
 8001224:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001228:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800127c <main+0x444>
 800122c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001230:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	  if (keypad_poll){
 8001234:	e659      	b.n	8000eea <main+0xb2>
 8001236:	bf00      	nop
 8001238:	20000004 	.word	0x20000004
 800123c:	20000005 	.word	0x20000005
 8001240:	20000002 	.word	0x20000002
 8001244:	200000a8 	.word	0x200000a8
 8001248:	200006d2 	.word	0x200006d2
 800124c:	200006d1 	.word	0x200006d1
 8001250:	200006d4 	.word	0x200006d4
 8001254:	20000000 	.word	0x20000000
 8001258:	08005d34 	.word	0x08005d34
 800125c:	200006d8 	.word	0x200006d8
 8001260:	200006d3 	.word	0x200006d3
 8001264:	aaaaaaab 	.word	0xaaaaaaab
 8001268:	20000008 	.word	0x20000008
 800126c:	40240000 	.word	0x40240000
 8001270:	457ff000 	.word	0x457ff000
 8001274:	44ffe000 	.word	0x44ffe000
 8001278:	20000034 	.word	0x20000034
 800127c:	42400000 	.word	0x42400000

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b094      	sub	sp, #80	@ 0x50
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	2234      	movs	r2, #52	@ 0x34
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f004 fd14 	bl	8005cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <SystemClock_Config+0xd0>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	4a28      	ldr	r2, [pc, #160]	@ (8001350 <SystemClock_Config+0xd0>)
 80012ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b4:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <SystemClock_Config+0xd0>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c0:	2300      	movs	r3, #0
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	4b23      	ldr	r3, [pc, #140]	@ (8001354 <SystemClock_Config+0xd4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a22      	ldr	r2, [pc, #136]	@ (8001354 <SystemClock_Config+0xd4>)
 80012ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b20      	ldr	r3, [pc, #128]	@ (8001354 <SystemClock_Config+0xd4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012dc:	2301      	movs	r3, #1
 80012de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80012e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e6:	2302      	movs	r3, #2
 80012e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012f0:	2308      	movs	r3, #8
 80012f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012fe:	2307      	movs	r3, #7
 8001300:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001302:	2302      	movs	r3, #2
 8001304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	4618      	mov	r0, r3
 800130c:	f002 fcf6 	bl	8003cfc <HAL_RCC_OscConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001316:	f000 fa67 	bl	80017e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131a:	230f      	movs	r3, #15
 800131c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 800131e:	2303      	movs	r3, #3
 8001320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001326:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800132a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800132c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001330:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	2105      	movs	r1, #5
 8001338:	4618      	mov	r0, r3
 800133a:	f001 fe6b 	bl	8003014 <HAL_RCC_ClockConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001344:	f000 fa50 	bl	80017e8 <Error_Handler>
  }
}
 8001348:	bf00      	nop
 800134a:	3750      	adds	r7, #80	@ 0x50
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000

08001358 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <MX_DAC_Init+0x4c>)
 8001368:	4a0f      	ldr	r2, [pc, #60]	@ (80013a8 <MX_DAC_Init+0x50>)
 800136a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800136c:	480d      	ldr	r0, [pc, #52]	@ (80013a4 <MX_DAC_Init+0x4c>)
 800136e:	f000 fea8 	bl	80020c2 <HAL_DAC_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001378:	f000 fa36 	bl	80017e8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 800137c:	231c      	movs	r3, #28
 800137e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001384:	463b      	mov	r3, r7
 8001386:	2200      	movs	r2, #0
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	@ (80013a4 <MX_DAC_Init+0x4c>)
 800138c:	f000 ff96 	bl	80022bc <HAL_DAC_ConfigChannel>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001396:	f000 fa27 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000034 	.word	0x20000034
 80013a8:	40007400 	.word	0x40007400

080013ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c0:	463b      	mov	r3, r7
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <MX_TIM5_Init+0x94>)
 80013ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001444 <MX_TIM5_Init+0x98>)
 80013cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <MX_TIM5_Init+0x94>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_TIM5_Init+0x94>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = trig_freq;	// 19 for 1 kHz
 80013da:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <MX_TIM5_Init+0x9c>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <MX_TIM5_Init+0x94>)
 80013e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <MX_TIM5_Init+0x94>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <MX_TIM5_Init+0x94>)
 80013ec:	2280      	movs	r2, #128	@ 0x80
 80013ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013f0:	4813      	ldr	r0, [pc, #76]	@ (8001440 <MX_TIM5_Init+0x94>)
 80013f2:	f002 ff21 	bl	8004238 <HAL_TIM_Base_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80013fc:	f000 f9f4 	bl	80017e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001400:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001404:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4619      	mov	r1, r3
 800140c:	480c      	ldr	r0, [pc, #48]	@ (8001440 <MX_TIM5_Init+0x94>)
 800140e:	f003 f943 	bl	8004698 <HAL_TIM_ConfigClockSource>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001418:	f000 f9e6 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800141c:	2320      	movs	r3, #32
 800141e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_TIM5_Init+0x94>)
 800142a:	f003 fb69 	bl	8004b00 <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001434:	f000 f9d8 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200000a8 	.word	0x200000a8
 8001444:	40000c00 	.word	0x40000c00
 8001448:	20000002 	.word	0x20000002

0800144c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <MX_TIM6_Init+0x64>)
 800145c:	4a15      	ldr	r2, [pc, #84]	@ (80014b4 <MX_TIM6_Init+0x68>)
 800145e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400 - 1;
 8001460:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <MX_TIM6_Init+0x64>)
 8001462:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001466:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <MX_TIM6_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <MX_TIM6_Init+0x64>)
 8001470:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001474:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <MX_TIM6_Init+0x64>)
 8001478:	2280      	movs	r2, #128	@ 0x80
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800147c:	480c      	ldr	r0, [pc, #48]	@ (80014b0 <MX_TIM6_Init+0x64>)
 800147e:	f002 fedb 	bl	8004238 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001488:	f000 f9ae 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <MX_TIM6_Init+0x64>)
 800149a:	f003 fb31 	bl	8004b00 <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80014a4:	f000 f9a0 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200000f0 	.word	0x200000f0
 80014b4:	40001000 	.word	0x40001000

080014b8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <MX_TIM7_Init+0x64>)
 80014c8:	4a15      	ldr	r2, [pc, #84]	@ (8001520 <MX_TIM7_Init+0x68>)
 80014ca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80014cc:	4b13      	ldr	r3, [pc, #76]	@ (800151c <MX_TIM7_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b12      	ldr	r3, [pc, #72]	@ (800151c <MX_TIM7_Init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1750-1;
 80014d8:	4b10      	ldr	r3, [pc, #64]	@ (800151c <MX_TIM7_Init+0x64>)
 80014da:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 80014de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e0:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <MX_TIM7_Init+0x64>)
 80014e2:	2280      	movs	r2, #128	@ 0x80
 80014e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014e6:	480d      	ldr	r0, [pc, #52]	@ (800151c <MX_TIM7_Init+0x64>)
 80014e8:	f002 fea6 	bl	8004238 <HAL_TIM_Base_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80014f2:	f000 f979 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	@ (800151c <MX_TIM7_Init+0x64>)
 8001504:	f003 fafc 	bl	8004b00 <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800150e:	f000 f96b 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000138 	.word	0x20000138
 8001520:	40001400 	.word	0x40001400

08001524 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <MX_USART3_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 800155c:	f003 fb60 	bl	8004c20 <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f000 f93f 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000180 	.word	0x20000180
 8001574:	40004800 	.word	0x40004800

08001578 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800157e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001582:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001584:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001586:	2206      	movs	r2, #6
 8001588:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800158c:	2202      	movs	r2, #2
 800158e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001590:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001598:	2202      	movs	r2, #2
 800159a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159e:	2201      	movs	r2, #1
 80015a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015bc:	f001 fbe1 	bl	8002d82 <HAL_PCD_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015c6:	f000 f90f 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200001c4 	.word	0x200001c4

080015d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <MX_DMA_Init+0x3c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001610 <MX_DMA_Init+0x3c>)
 80015e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <MX_DMA_Init+0x3c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2010      	movs	r0, #16
 80015fc:	f000 fd2b 	bl	8002056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001600:	2010      	movs	r0, #16
 8001602:	f000 fd44 	bl	800208e <HAL_NVIC_EnableIRQ>

}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800

08001614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08c      	sub	sp, #48	@ 0x30
 8001618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
 800162e:	4b69      	ldr	r3, [pc, #420]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a68      	ldr	r2, [pc, #416]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b66      	ldr	r3, [pc, #408]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	4b62      	ldr	r3, [pc, #392]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4a61      	ldr	r2, [pc, #388]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 8001650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4b5f      	ldr	r3, [pc, #380]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b5b      	ldr	r3, [pc, #364]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a5a      	ldr	r2, [pc, #360]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b58      	ldr	r3, [pc, #352]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b54      	ldr	r3, [pc, #336]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a53      	ldr	r2, [pc, #332]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b51      	ldr	r3, [pc, #324]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	4b4d      	ldr	r3, [pc, #308]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a4c      	ldr	r2, [pc, #304]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b4a      	ldr	r3, [pc, #296]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	4b46      	ldr	r3, [pc, #280]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a45      	ldr	r2, [pc, #276]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 80016c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b43      	ldr	r3, [pc, #268]	@ (80017d4 <MX_GPIO_Init+0x1c0>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80016d8:	483f      	ldr	r0, [pc, #252]	@ (80017d8 <MX_GPIO_Init+0x1c4>)
 80016da:	f001 fb15 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2140      	movs	r1, #64	@ 0x40
 80016e2:	483e      	ldr	r0, [pc, #248]	@ (80017dc <MX_GPIO_Init+0x1c8>)
 80016e4:	f001 fb10 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80016ee:	483c      	ldr	r0, [pc, #240]	@ (80017e0 <MX_GPIO_Init+0x1cc>)
 80016f0:	f001 fb0a 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4619      	mov	r1, r3
 800170a:	4835      	ldr	r0, [pc, #212]	@ (80017e0 <MX_GPIO_Init+0x1cc>)
 800170c:	f001 f950 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001710:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	4619      	mov	r1, r3
 8001728:	482b      	ldr	r0, [pc, #172]	@ (80017d8 <MX_GPIO_Init+0x1c4>)
 800172a:	f001 f941 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800172e:	2340      	movs	r3, #64	@ 0x40
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	4619      	mov	r1, r3
 8001744:	4825      	ldr	r0, [pc, #148]	@ (80017dc <MX_GPIO_Init+0x1c8>)
 8001746:	f001 f933 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	4619      	mov	r1, r3
 800175c:	481f      	ldr	r0, [pc, #124]	@ (80017dc <MX_GPIO_Init+0x1c8>)
 800175e:	f001 f927 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8001762:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	4819      	ldr	r0, [pc, #100]	@ (80017e0 <MX_GPIO_Init+0x1cc>)
 800177c:	f001 f918 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin;
 8001780:	23f0      	movs	r3, #240	@ 0xf0
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001784:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800178a:	2302      	movs	r3, #2
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	4619      	mov	r1, r3
 8001794:	4813      	ldr	r0, [pc, #76]	@ (80017e4 <MX_GPIO_Init+0x1d0>)
 8001796:	f001 f90b 	bl	80029b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	200a      	movs	r0, #10
 80017a0:	f000 fc59 	bl	8002056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017a4:	200a      	movs	r0, #10
 80017a6:	f000 fc72 	bl	800208e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	2017      	movs	r0, #23
 80017b0:	f000 fc51 	bl	8002056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017b4:	2017      	movs	r0, #23
 80017b6:	f000 fc6a 	bl	800208e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	2028      	movs	r0, #40	@ 0x28
 80017c0:	f000 fc49 	bl	8002056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017c4:	2028      	movs	r0, #40	@ 0x28
 80017c6:	f000 fc62 	bl	800208e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ca:	bf00      	nop
 80017cc:	3730      	adds	r7, #48	@ 0x30
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020400 	.word	0x40020400
 80017dc:	40021800 	.word	0x40021800
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020c00 	.word	0x40020c00

080017e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <Error_Handler+0x8>

080017f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <HAL_MspInit+0x4c>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	4a0f      	ldr	r2, [pc, #60]	@ (8001840 <HAL_MspInit+0x4c>)
 8001804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001808:	6453      	str	r3, [r2, #68]	@ 0x44
 800180a:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <HAL_MspInit+0x4c>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <HAL_MspInit+0x4c>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	4a08      	ldr	r2, [pc, #32]	@ (8001840 <HAL_MspInit+0x4c>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001824:	6413      	str	r3, [r2, #64]	@ 0x40
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_MspInit+0x4c>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800

08001844 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	@ 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a34      	ldr	r2, [pc, #208]	@ (8001934 <HAL_DAC_MspInit+0xf0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d161      	bne.n	800192a <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b33      	ldr	r3, [pc, #204]	@ (8001938 <HAL_DAC_MspInit+0xf4>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	4a32      	ldr	r2, [pc, #200]	@ (8001938 <HAL_DAC_MspInit+0xf4>)
 8001870:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001874:	6413      	str	r3, [r2, #64]	@ 0x40
 8001876:	4b30      	ldr	r3, [pc, #192]	@ (8001938 <HAL_DAC_MspInit+0xf4>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b2c      	ldr	r3, [pc, #176]	@ (8001938 <HAL_DAC_MspInit+0xf4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a2b      	ldr	r2, [pc, #172]	@ (8001938 <HAL_DAC_MspInit+0xf4>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b29      	ldr	r3, [pc, #164]	@ (8001938 <HAL_DAC_MspInit+0xf4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800189e:	2310      	movs	r3, #16
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a2:	2303      	movs	r3, #3
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	4822      	ldr	r0, [pc, #136]	@ (800193c <HAL_DAC_MspInit+0xf8>)
 80018b2:	f001 f87d 	bl	80029b0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80018b6:	4b22      	ldr	r3, [pc, #136]	@ (8001940 <HAL_DAC_MspInit+0xfc>)
 80018b8:	4a22      	ldr	r2, [pc, #136]	@ (8001944 <HAL_DAC_MspInit+0x100>)
 80018ba:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80018bc:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <HAL_DAC_MspInit+0xfc>)
 80018be:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80018c2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001940 <HAL_DAC_MspInit+0xfc>)
 80018c6:	2240      	movs	r2, #64	@ 0x40
 80018c8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <HAL_DAC_MspInit+0xfc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001940 <HAL_DAC_MspInit+0xfc>)
 80018d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018d6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018d8:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <HAL_DAC_MspInit+0xfc>)
 80018da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018de:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018e0:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <HAL_DAC_MspInit+0xfc>)
 80018e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018e6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80018e8:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <HAL_DAC_MspInit+0xfc>)
 80018ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018ee:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 80018f0:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <HAL_DAC_MspInit+0xfc>)
 80018f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018f6:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018f8:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <HAL_DAC_MspInit+0xfc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80018fe:	4810      	ldr	r0, [pc, #64]	@ (8001940 <HAL_DAC_MspInit+0xfc>)
 8001900:	f000 fd6c 	bl	80023dc <HAL_DMA_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800190a:	f7ff ff6d 	bl	80017e8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a0b      	ldr	r2, [pc, #44]	@ (8001940 <HAL_DAC_MspInit+0xfc>)
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <HAL_DAC_MspInit+0xfc>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	2036      	movs	r0, #54	@ 0x36
 8001920:	f000 fb99 	bl	8002056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001924:	2036      	movs	r0, #54	@ 0x36
 8001926:	f000 fbb2 	bl	800208e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	@ 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40007400 	.word	0x40007400
 8001938:	40023800 	.word	0x40023800
 800193c:	40020000 	.word	0x40020000
 8001940:	20000048 	.word	0x20000048
 8001944:	40026088 	.word	0x40026088

08001948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a26      	ldr	r2, [pc, #152]	@ (80019f0 <HAL_TIM_Base_MspInit+0xa8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d10e      	bne.n	8001978 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	4b25      	ldr	r3, [pc, #148]	@ (80019f4 <HAL_TIM_Base_MspInit+0xac>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	4a24      	ldr	r2, [pc, #144]	@ (80019f4 <HAL_TIM_Base_MspInit+0xac>)
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	6413      	str	r3, [r2, #64]	@ 0x40
 800196a:	4b22      	ldr	r3, [pc, #136]	@ (80019f4 <HAL_TIM_Base_MspInit+0xac>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001976:	e036      	b.n	80019e6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <HAL_TIM_Base_MspInit+0xb0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d116      	bne.n	80019b0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <HAL_TIM_Base_MspInit+0xac>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a1a      	ldr	r2, [pc, #104]	@ (80019f4 <HAL_TIM_Base_MspInit+0xac>)
 800198c:	f043 0310 	orr.w	r3, r3, #16
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <HAL_TIM_Base_MspInit+0xac>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	2036      	movs	r0, #54	@ 0x36
 80019a4:	f000 fb57 	bl	8002056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019a8:	2036      	movs	r0, #54	@ 0x36
 80019aa:	f000 fb70 	bl	800208e <HAL_NVIC_EnableIRQ>
}
 80019ae:	e01a      	b.n	80019e6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a11      	ldr	r2, [pc, #68]	@ (80019fc <HAL_TIM_Base_MspInit+0xb4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d115      	bne.n	80019e6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <HAL_TIM_Base_MspInit+0xac>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	4a0c      	ldr	r2, [pc, #48]	@ (80019f4 <HAL_TIM_Base_MspInit+0xac>)
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ca:	4b0a      	ldr	r3, [pc, #40]	@ (80019f4 <HAL_TIM_Base_MspInit+0xac>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2037      	movs	r0, #55	@ 0x37
 80019dc:	f000 fb3b 	bl	8002056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019e0:	2037      	movs	r0, #55	@ 0x37
 80019e2:	f000 fb54 	bl	800208e <HAL_NVIC_EnableIRQ>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40000c00 	.word	0x40000c00
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40001000 	.word	0x40001000
 80019fc:	40001400 	.word	0x40001400

08001a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a19      	ldr	r2, [pc, #100]	@ (8001a84 <HAL_UART_MspInit+0x84>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d12c      	bne.n	8001a7c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <HAL_UART_MspInit+0x88>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	4a17      	ldr	r2, [pc, #92]	@ (8001a88 <HAL_UART_MspInit+0x88>)
 8001a2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_UART_MspInit+0x88>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <HAL_UART_MspInit+0x88>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a10      	ldr	r2, [pc, #64]	@ (8001a88 <HAL_UART_MspInit+0x88>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a88 <HAL_UART_MspInit+0x88>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <HAL_UART_MspInit+0x8c>)
 8001a78:	f000 ff9a 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	@ 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40004800 	.word	0x40004800
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020c00 	.word	0x40020c00

08001a90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0a0      	sub	sp, #128	@ 0x80
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	225c      	movs	r2, #92	@ 0x5c
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f004 f903 	bl	8005cbc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001abe:	d14e      	bne.n	8001b5e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001ac0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ac4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f001 fbba 	bl	8003248 <HAL_RCCEx_PeriphCLKConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001ada:	f7ff fe85 	bl	80017e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b21      	ldr	r3, [pc, #132]	@ (8001b68 <HAL_PCD_MspInit+0xd8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	4a20      	ldr	r2, [pc, #128]	@ (8001b68 <HAL_PCD_MspInit+0xd8>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aee:	4b1e      	ldr	r3, [pc, #120]	@ (8001b68 <HAL_PCD_MspInit+0xd8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001afa:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001afe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b0c:	230a      	movs	r3, #10
 8001b0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b14:	4619      	mov	r1, r3
 8001b16:	4815      	ldr	r0, [pc, #84]	@ (8001b6c <HAL_PCD_MspInit+0xdc>)
 8001b18:	f000 ff4a 	bl	80029b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b22:	2300      	movs	r3, #0
 8001b24:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480e      	ldr	r0, [pc, #56]	@ (8001b6c <HAL_PCD_MspInit+0xdc>)
 8001b32:	f000 ff3d 	bl	80029b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b36:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <HAL_PCD_MspInit+0xd8>)
 8001b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b68 <HAL_PCD_MspInit+0xd8>)
 8001b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b40:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <HAL_PCD_MspInit+0xd8>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	4a07      	ldr	r2, [pc, #28]	@ (8001b68 <HAL_PCD_MspInit+0xd8>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b52:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <HAL_PCD_MspInit+0xd8>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3780      	adds	r7, #128	@ 0x80
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020000 	.word	0x40020000

08001b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <NMI_Handler+0x4>

08001b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <MemManage_Handler+0x4>

08001b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <BusFault_Handler+0x4>

08001b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <UsageFault_Handler+0x4>

08001b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc6:	f000 f927 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_FLAG(COL0_Pin)){
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <EXTI4_IRQHandler+0x20>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <EXTI4_IRQHandler+0x16>
    key_pressed = 1;
 8001be0:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <EXTI4_IRQHandler+0x24>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL0_Pin);
 8001be6:	2010      	movs	r0, #16
 8001be8:	f001 f8a8 	bl	8002d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40013c00 	.word	0x40013c00
 8001bf4:	200006d1 	.word	0x200006d1

08001bf8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001bfc:	4802      	ldr	r0, [pc, #8]	@ (8001c08 <DMA1_Stream5_IRQHandler+0x10>)
 8001bfe:	f000 fc9b 	bl	8002538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000048 	.word	0x20000048

08001c0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  // Checks if any col is active is pressed
  if (__HAL_GPIO_EXTI_GET_FLAG(COL1_Pin) ||
 8001c10:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <EXTI9_5_IRQHandler+0x44>)
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10b      	bne.n	8001c34 <EXTI9_5_IRQHandler+0x28>
      __HAL_GPIO_EXTI_GET_FLAG(COL2_Pin) ||
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <EXTI9_5_IRQHandler+0x44>)
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if (__HAL_GPIO_EXTI_GET_FLAG(COL1_Pin) ||
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <EXTI9_5_IRQHandler+0x28>
      __HAL_GPIO_EXTI_GET_FLAG(COL3_Pin)) {
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <EXTI9_5_IRQHandler+0x44>)
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      __HAL_GPIO_EXTI_GET_FLAG(COL2_Pin) ||
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <EXTI9_5_IRQHandler+0x2e>
    key_pressed = 1;
 8001c34:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <EXTI9_5_IRQHandler+0x48>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL1_Pin);
 8001c3a:	2020      	movs	r0, #32
 8001c3c:	f001 f87e 	bl	8002d3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL2_Pin);
 8001c40:	2040      	movs	r0, #64	@ 0x40
 8001c42:	f001 f87b 	bl	8002d3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL3_Pin);
 8001c46:	2080      	movs	r0, #128	@ 0x80
 8001c48:	f001 f878 	bl	8002d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40013c00 	.word	0x40013c00
 8001c54:	200006d1 	.word	0x200006d1

08001c58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (HAL_GetTick() - dead_time >= 50){
 8001c5c:	f000 f8f0 	bl	8001e40 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <EXTI15_10_IRQHandler+0x54>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b31      	cmp	r3, #49	@ 0x31
 8001c6a:	d90f      	bls.n	8001c8c <EXTI15_10_IRQHandler+0x34>
	    if (__HAL_GPIO_EXTI_GET_FLAG(USER_Btn_Pin)) {
 8001c6c:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <EXTI15_10_IRQHandler+0x58>)
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d009      	beq.n	8001c8c <EXTI15_10_IRQHandler+0x34>
	      // Your code here
	    	filter_en = !filter_en;
 8001c78:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <EXTI15_10_IRQHandler+0x5c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <EXTI15_10_IRQHandler+0x5c>)
 8001c8a:	701a      	strb	r2, [r3, #0]
	    }
	  }

	HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001c8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c90:	f001 f854 	bl	8002d3c <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001c94:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c98:	f001 f850 	bl	8002d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  dead_time = HAL_GetTick();
 8001c9c:	f000 f8d0 	bl	8001e40 <HAL_GetTick>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a02      	ldr	r2, [pc, #8]	@ (8001cac <EXTI15_10_IRQHandler+0x54>)
 8001ca4:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000080c 	.word	0x2000080c
 8001cb0:	40013c00 	.word	0x40013c00
 8001cb4:	200006d3 	.word	0x200006d3

08001cb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	keypad_poll = 1;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <TIM6_DAC_IRQHandler+0x1c>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001cc2:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <TIM6_DAC_IRQHandler+0x20>)
 8001cc4:	f000 fa71 	bl	80021aa <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001cc8:	4804      	ldr	r0, [pc, #16]	@ (8001cdc <TIM6_DAC_IRQHandler+0x24>)
 8001cca:	f002 fbdd 	bl	8004488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200006d0 	.word	0x200006d0
 8001cd8:	20000034 	.word	0x20000034
 8001cdc:	200000f0 	.word	0x200000f0

08001ce0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	new_sample = 1;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	@ (8001cf4 <TIM7_IRQHandler+0x14>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001cea:	4803      	ldr	r0, [pc, #12]	@ (8001cf8 <TIM7_IRQHandler+0x18>)
 8001cec:	f002 fbcc 	bl	8004488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200006d4 	.word	0x200006d4
 8001cf8:	20000138 	.word	0x20000138

08001cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <SystemInit+0x20>)
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d06:	4a05      	ldr	r2, [pc, #20]	@ (8001d1c <SystemInit+0x20>)
 8001d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d24:	480d      	ldr	r0, [pc, #52]	@ (8001d5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d26:	490e      	ldr	r1, [pc, #56]	@ (8001d60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d28:	4a0e      	ldr	r2, [pc, #56]	@ (8001d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d2c:	e002      	b.n	8001d34 <LoopCopyDataInit>

08001d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d32:	3304      	adds	r3, #4

08001d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d38:	d3f9      	bcc.n	8001d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d3c:	4c0b      	ldr	r4, [pc, #44]	@ (8001d6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d40:	e001      	b.n	8001d46 <LoopFillZerobss>

08001d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d44:	3204      	adds	r2, #4

08001d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d48:	d3fb      	bcc.n	8001d42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d4a:	f7ff ffd7 	bl	8001cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f003 ffbd 	bl	8005ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d52:	f7ff f871 	bl	8000e38 <main>
  bx  lr    
 8001d56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d60:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001d64:	08005e98 	.word	0x08005e98
  ldr r2, =_sbss
 8001d68:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001d6c:	20000814 	.word	0x20000814

08001d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC_IRQHandler>
	...

08001d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d78:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <HAL_Init+0x40>)
 8001d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <HAL_Init+0x40>)
 8001d8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a07      	ldr	r2, [pc, #28]	@ (8001db4 <HAL_Init+0x40>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f000 f94f 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f000 f808 	bl	8001db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da8:	f7ff fd24 	bl	80017f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_InitTick+0x54>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_InitTick+0x58>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f967 	bl	80020aa <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00e      	b.n	8001e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d80a      	bhi.n	8001e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f000 f92f 	bl	8002056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4a06      	ldr	r2, [pc, #24]	@ (8001e14 <HAL_InitTick+0x5c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000000c 	.word	0x2000000c
 8001e10:	20000014 	.word	0x20000014
 8001e14:	20000010 	.word	0x20000010

08001e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000014 	.word	0x20000014
 8001e3c:	20000810 	.word	0x20000810

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000810 	.word	0x20000810

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff ffee 	bl	8001e40 <HAL_GetTick>
 8001e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_Delay+0x44>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e7e:	bf00      	nop
 8001e80:	f7ff ffde 	bl	8001e40 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000014 	.word	0x20000014

08001ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed2:	4a04      	ldr	r2, [pc, #16]	@ (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	60d3      	str	r3, [r2, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eec:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <__NVIC_GetPriorityGrouping+0x18>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	f003 0307 	and.w	r3, r3, #7
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db0b      	blt.n	8001f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	4907      	ldr	r1, [pc, #28]	@ (8001f3c <__NVIC_EnableIRQ+0x38>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	2001      	movs	r0, #1
 8001f26:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	@ (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	@ (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	@ 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	@ 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800200c:	d301      	bcc.n	8002012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2301      	movs	r3, #1
 8002010:	e00f      	b.n	8002032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <SysTick_Config+0x40>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201a:	210f      	movs	r1, #15
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f7ff ff8e 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	@ (800203c <SysTick_Config+0x40>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	@ (800203c <SysTick_Config+0x40>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff29 	bl	8001ea0 <__NVIC_SetPriorityGrouping>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002068:	f7ff ff3e 	bl	8001ee8 <__NVIC_GetPriorityGrouping>
 800206c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f7ff ff8e 	bl	8001f94 <NVIC_EncodePriority>
 8002078:	4602      	mov	r2, r0
 800207a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff5d 	bl	8001f40 <__NVIC_SetPriority>
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff31 	bl	8001f04 <__NVIC_EnableIRQ>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ffa2 	bl	8001ffc <SysTick_Config>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e014      	b.n	80020fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	791b      	ldrb	r3, [r3, #4]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d105      	bne.n	80020ea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff fbad 	bl	8001844 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2202      	movs	r2, #2
 80020ee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	795b      	ldrb	r3, [r3, #5]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_DAC_Start+0x16>
 8002118:	2302      	movs	r3, #2
 800211a:	e040      	b.n	800219e <HAL_DAC_Start+0x98>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2202      	movs	r2, #2
 8002126:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6819      	ldr	r1, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2201      	movs	r2, #1
 8002136:	409a      	lsls	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10f      	bne.n	8002166 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002150:	2b3c      	cmp	r3, #60	@ 0x3c
 8002152:	d11d      	bne.n	8002190 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	e014      	b.n	8002190 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	213c      	movs	r1, #60	@ 0x3c
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	429a      	cmp	r2, r3
 800217e:	d107      	bne.n	8002190 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0202 	orr.w	r2, r2, #2
 800218e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021c0:	d120      	bne.n	8002204 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021d0:	d118      	bne.n	8002204 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2204      	movs	r2, #4
 80021d6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021fc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f852 	bl	80022a8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800220e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002212:	d120      	bne.n	8002256 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800221a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800221e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002222:	d118      	bne.n	8002256 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2204      	movs	r2, #4
 8002228:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f043 0202 	orr.w	r2, r3, #2
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800223e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800224e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f8b9 	bl	80023c8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800225e:	b480      	push	{r7}
 8002260:	b087      	sub	sp, #28
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	3308      	adds	r3, #8
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e004      	b.n	8002292 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	3314      	adds	r3, #20
 8002290:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	461a      	mov	r2, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	795b      	ldrb	r3, [r3, #5]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_DAC_ConfigChannel+0x18>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e03c      	b.n	800234e <HAL_DAC_ConfigChannel+0x92>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2202      	movs	r2, #2
 80022de:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	4013      	ands	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6819      	ldr	r1, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	22c0      	movs	r2, #192	@ 0xc0
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	400a      	ands	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	795b      	ldrb	r3, [r3, #5]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_DACEx_TriangleWaveGenerate+0x18>
 800236e:	2302      	movs	r3, #2
 8002370:	e024      	b.n	80023bc <HAL_DACEx_TriangleWaveGenerate+0x62>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2202      	movs	r2, #2
 800237c:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	ea02 0103 	and.w	r1, r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	409a      	lsls	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff fd2a 	bl	8001e40 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e099      	b.n	800252c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002418:	e00f      	b.n	800243a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800241a:	f7ff fd11 	bl	8001e40 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b05      	cmp	r3, #5
 8002426:	d908      	bls.n	800243a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2203      	movs	r2, #3
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e078      	b.n	800252c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e8      	bne.n	800241a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4b38      	ldr	r3, [pc, #224]	@ (8002534 <HAL_DMA_Init+0x158>)
 8002454:	4013      	ands	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002466:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002472:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800247e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	2b04      	cmp	r3, #4
 8002492:	d107      	bne.n	80024a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	4313      	orrs	r3, r2
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f023 0307 	bic.w	r3, r3, #7
 80024ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d117      	bne.n	80024fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00e      	beq.n	80024fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f9e9 	bl	80028b8 <DMA_CheckFifoParam>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2240      	movs	r2, #64	@ 0x40
 80024f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024fa:	2301      	movs	r3, #1
 80024fc:	e016      	b.n	800252c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f9a0 	bl	800284c <DMA_CalcBaseAndBitshift>
 800250c:	4603      	mov	r3, r0
 800250e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002514:	223f      	movs	r2, #63	@ 0x3f
 8002516:	409a      	lsls	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	f010803f 	.word	0xf010803f

08002538 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002544:	4b8e      	ldr	r3, [pc, #568]	@ (8002780 <HAL_DMA_IRQHandler+0x248>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a8e      	ldr	r2, [pc, #568]	@ (8002784 <HAL_DMA_IRQHandler+0x24c>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	0a9b      	lsrs	r3, r3, #10
 8002550:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002556:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002562:	2208      	movs	r2, #8
 8002564:	409a      	lsls	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d01a      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d013      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0204 	bic.w	r2, r2, #4
 800258a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002590:	2208      	movs	r2, #8
 8002592:	409a      	lsls	r2, r3
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a8:	2201      	movs	r2, #1
 80025aa:	409a      	lsls	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d012      	beq.n	80025da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c6:	2201      	movs	r2, #1
 80025c8:	409a      	lsls	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d2:	f043 0202 	orr.w	r2, r3, #2
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025de:	2204      	movs	r2, #4
 80025e0:	409a      	lsls	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d012      	beq.n	8002610 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00b      	beq.n	8002610 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fc:	2204      	movs	r2, #4
 80025fe:	409a      	lsls	r2, r3
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002608:	f043 0204 	orr.w	r2, r3, #4
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002614:	2210      	movs	r2, #16
 8002616:	409a      	lsls	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d043      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d03c      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002632:	2210      	movs	r2, #16
 8002634:	409a      	lsls	r2, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d018      	beq.n	800267a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d108      	bne.n	8002668 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d024      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	4798      	blx	r3
 8002666:	e01f      	b.n	80026a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01b      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	4798      	blx	r3
 8002678:	e016      	b.n	80026a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d107      	bne.n	8002698 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0208 	bic.w	r2, r2, #8
 8002696:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ac:	2220      	movs	r2, #32
 80026ae:	409a      	lsls	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 808f 	beq.w	80027d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8087 	beq.w	80027d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ce:	2220      	movs	r2, #32
 80026d0:	409a      	lsls	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b05      	cmp	r3, #5
 80026e0:	d136      	bne.n	8002750 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0216 	bic.w	r2, r2, #22
 80026f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002700:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <HAL_DMA_IRQHandler+0x1da>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0208 	bic.w	r2, r2, #8
 8002720:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002726:	223f      	movs	r2, #63	@ 0x3f
 8002728:	409a      	lsls	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002742:	2b00      	cmp	r3, #0
 8002744:	d07e      	beq.n	8002844 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
        }
        return;
 800274e:	e079      	b.n	8002844 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d01d      	beq.n	800279a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10d      	bne.n	8002788 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002770:	2b00      	cmp	r3, #0
 8002772:	d031      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
 800277c:	e02c      	b.n	80027d8 <HAL_DMA_IRQHandler+0x2a0>
 800277e:	bf00      	nop
 8002780:	2000000c 	.word	0x2000000c
 8002784:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d023      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	4798      	blx	r3
 8002798:	e01e      	b.n	80027d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10f      	bne.n	80027c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0210 	bic.w	r2, r2, #16
 80027b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d032      	beq.n	8002846 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d022      	beq.n	8002832 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2205      	movs	r2, #5
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	3301      	adds	r3, #1
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	429a      	cmp	r2, r3
 800280e:	d307      	bcc.n	8002820 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f2      	bne.n	8002804 <HAL_DMA_IRQHandler+0x2cc>
 800281e:	e000      	b.n	8002822 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002820:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	4798      	blx	r3
 8002842:	e000      	b.n	8002846 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002844:	bf00      	nop
    }
  }
}
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3b10      	subs	r3, #16
 800285c:	4a14      	ldr	r2, [pc, #80]	@ (80028b0 <DMA_CalcBaseAndBitshift+0x64>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002866:	4a13      	ldr	r2, [pc, #76]	@ (80028b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d909      	bls.n	800288e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002882:	f023 0303 	bic.w	r3, r3, #3
 8002886:	1d1a      	adds	r2, r3, #4
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	659a      	str	r2, [r3, #88]	@ 0x58
 800288c:	e007      	b.n	800289e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	aaaaaaab 	.word	0xaaaaaaab
 80028b4:	08005e80 	.word	0x08005e80

080028b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11f      	bne.n	8002912 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d856      	bhi.n	8002986 <DMA_CheckFifoParam+0xce>
 80028d8:	a201      	add	r2, pc, #4	@ (adr r2, 80028e0 <DMA_CheckFifoParam+0x28>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	080028f1 	.word	0x080028f1
 80028e4:	08002903 	.word	0x08002903
 80028e8:	080028f1 	.word	0x080028f1
 80028ec:	08002987 	.word	0x08002987
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d046      	beq.n	800298a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002900:	e043      	b.n	800298a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002906:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800290a:	d140      	bne.n	800298e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002910:	e03d      	b.n	800298e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800291a:	d121      	bne.n	8002960 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d837      	bhi.n	8002992 <DMA_CheckFifoParam+0xda>
 8002922:	a201      	add	r2, pc, #4	@ (adr r2, 8002928 <DMA_CheckFifoParam+0x70>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	08002939 	.word	0x08002939
 800292c:	0800293f 	.word	0x0800293f
 8002930:	08002939 	.word	0x08002939
 8002934:	08002951 	.word	0x08002951
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	e030      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d025      	beq.n	8002996 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800294e:	e022      	b.n	8002996 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002958:	d11f      	bne.n	800299a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800295e:	e01c      	b.n	800299a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d903      	bls.n	800296e <DMA_CheckFifoParam+0xb6>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d003      	beq.n	8002974 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800296c:	e018      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
      break;
 8002972:	e015      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	e00b      	b.n	800299e <DMA_CheckFifoParam+0xe6>
      break;
 8002986:	bf00      	nop
 8002988:	e00a      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800298a:	bf00      	nop
 800298c:	e008      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800298e:	bf00      	nop
 8002990:	e006      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002992:	bf00      	nop
 8002994:	e004      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002996:	bf00      	nop
 8002998:	e002      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800299a:	bf00      	nop
 800299c:	e000      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800299e:	bf00      	nop
    }
  } 
  
  return status; 
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	@ 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e165      	b.n	8002c98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f040 8154 	bne.w	8002c92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d005      	beq.n	8002a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d130      	bne.n	8002a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 0201 	and.w	r2, r3, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d017      	beq.n	8002aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d123      	bne.n	8002af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80ae 	beq.w	8002c92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002cb0 <HAL_GPIO_Init+0x300>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002cb0 <HAL_GPIO_Init+0x300>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b46:	4b5a      	ldr	r3, [pc, #360]	@ (8002cb0 <HAL_GPIO_Init+0x300>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a58      	ldr	r2, [pc, #352]	@ (8002cb4 <HAL_GPIO_Init+0x304>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a4f      	ldr	r2, [pc, #316]	@ (8002cb8 <HAL_GPIO_Init+0x308>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d025      	beq.n	8002bca <HAL_GPIO_Init+0x21a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4e      	ldr	r2, [pc, #312]	@ (8002cbc <HAL_GPIO_Init+0x30c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d01f      	beq.n	8002bc6 <HAL_GPIO_Init+0x216>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4d      	ldr	r2, [pc, #308]	@ (8002cc0 <HAL_GPIO_Init+0x310>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d019      	beq.n	8002bc2 <HAL_GPIO_Init+0x212>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4c      	ldr	r2, [pc, #304]	@ (8002cc4 <HAL_GPIO_Init+0x314>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_GPIO_Init+0x20e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4b      	ldr	r2, [pc, #300]	@ (8002cc8 <HAL_GPIO_Init+0x318>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00d      	beq.n	8002bba <HAL_GPIO_Init+0x20a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8002ccc <HAL_GPIO_Init+0x31c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d007      	beq.n	8002bb6 <HAL_GPIO_Init+0x206>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a49      	ldr	r2, [pc, #292]	@ (8002cd0 <HAL_GPIO_Init+0x320>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_GPIO_Init+0x202>
 8002bae:	2306      	movs	r3, #6
 8002bb0:	e00c      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bb2:	2307      	movs	r3, #7
 8002bb4:	e00a      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bb6:	2305      	movs	r3, #5
 8002bb8:	e008      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e004      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e002      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	f002 0203 	and.w	r2, r2, #3
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	4093      	lsls	r3, r2
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bdc:	4935      	ldr	r1, [pc, #212]	@ (8002cb4 <HAL_GPIO_Init+0x304>)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bea:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c0e:	4a31      	ldr	r2, [pc, #196]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c14:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c38:	4a26      	ldr	r2, [pc, #152]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c3e:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c62:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c68:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c8c:	4a11      	ldr	r2, [pc, #68]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3301      	adds	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b0f      	cmp	r3, #15
 8002c9c:	f67f ae96 	bls.w	80029cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3724      	adds	r7, #36	@ 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	40020400 	.word	0x40020400
 8002cc0:	40020800 	.word	0x40020800
 8002cc4:	40020c00 	.word	0x40020c00
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40021400 	.word	0x40021400
 8002cd0:	40021800 	.word	0x40021800
 8002cd4:	40013c00 	.word	0x40013c00

08002cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e001      	b.n	8002cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	807b      	strh	r3, [r7, #2]
 8002d14:	4613      	mov	r3, r2
 8002d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d18:	787b      	ldrb	r3, [r7, #1]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d1e:	887a      	ldrh	r2, [r7, #2]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d24:	e003      	b.n	8002d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d26:	887b      	ldrh	r3, [r7, #2]
 8002d28:	041a      	lsls	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	619a      	str	r2, [r3, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d46:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d52:	4a05      	ldr	r2, [pc, #20]	@ (8002d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f806 	bl	8002d6c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40013c00 	.word	0x40013c00

08002d6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d84:	b08f      	sub	sp, #60	@ 0x3c
 8002d86:	af0a      	add	r7, sp, #40	@ 0x28
 8002d88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e116      	b.n	8002fc2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe fe6e 	bl	8001a90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2203      	movs	r2, #3
 8002db8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f002 fa47 	bl	8005266 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	687e      	ldr	r6, [r7, #4]
 8002de0:	466d      	mov	r5, sp
 8002de2:	f106 0410 	add.w	r4, r6, #16
 8002de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002df2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002df6:	1d33      	adds	r3, r6, #4
 8002df8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dfa:	6838      	ldr	r0, [r7, #0]
 8002dfc:	f002 f9d2 	bl	80051a4 <USB_CoreInit>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0d7      	b.n	8002fc2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f002 fa35 	bl	8005288 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
 8002e22:	e04a      	b.n	8002eba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	333d      	adds	r3, #61	@ 0x3d
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	333c      	adds	r3, #60	@ 0x3c
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	b298      	uxth	r0, r3
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3344      	adds	r3, #68	@ 0x44
 8002e60:	4602      	mov	r2, r0
 8002e62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	3340      	adds	r3, #64	@ 0x40
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	3348      	adds	r3, #72	@ 0x48
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	334c      	adds	r3, #76	@ 0x4c
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	3354      	adds	r3, #84	@ 0x54
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
 8002eba:	7bfa      	ldrb	r2, [r7, #15]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d3af      	bcc.n	8002e24 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	73fb      	strb	r3, [r7, #15]
 8002ec8:	e044      	b.n	8002f54 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002ef2:	7bfa      	ldrb	r2, [r7, #15]
 8002ef4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ef6:	7bfa      	ldrb	r2, [r7, #15]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	3301      	adds	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d3b5      	bcc.n	8002eca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	687e      	ldr	r6, [r7, #4]
 8002f66:	466d      	mov	r5, sp
 8002f68:	f106 0410 	add.w	r4, r6, #16
 8002f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f78:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f7c:	1d33      	adds	r3, r6, #4
 8002f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f80:	6838      	ldr	r0, [r7, #0]
 8002f82:	f002 f9cd 	bl	8005320 <USB_DevInit>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e014      	b.n	8002fc2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d102      	bne.n	8002fb6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f80a 	bl	8002fca <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f002 fb8b 	bl	80056d6 <USB_DevDisconnect>

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffc:	f043 0303 	orr.w	r3, r3, #3
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0cc      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003028:	4b68      	ldr	r3, [pc, #416]	@ (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d90c      	bls.n	8003050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b65      	ldr	r3, [pc, #404]	@ (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b63      	ldr	r3, [pc, #396]	@ (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0b8      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d020      	beq.n	800309e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003068:	4b59      	ldr	r3, [pc, #356]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a58      	ldr	r2, [pc, #352]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003080:	4b53      	ldr	r3, [pc, #332]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a52      	ldr	r2, [pc, #328]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800308a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b50      	ldr	r3, [pc, #320]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	494d      	ldr	r1, [pc, #308]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d044      	beq.n	8003134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b47      	ldr	r3, [pc, #284]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d119      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e07f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d003      	beq.n	80030d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d2:	4b3f      	ldr	r3, [pc, #252]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e06f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e2:	4b3b      	ldr	r3, [pc, #236]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e067      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f2:	4b37      	ldr	r3, [pc, #220]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f023 0203 	bic.w	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4934      	ldr	r1, [pc, #208]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	4313      	orrs	r3, r2
 8003102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003104:	f7fe fe9c 	bl	8001e40 <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	e00a      	b.n	8003122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310c:	f7fe fe98 	bl	8001e40 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e04f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	4b2b      	ldr	r3, [pc, #172]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 020c 	and.w	r2, r3, #12
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	429a      	cmp	r2, r3
 8003132:	d1eb      	bne.n	800310c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003134:	4b25      	ldr	r3, [pc, #148]	@ (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d20c      	bcs.n	800315c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b22      	ldr	r3, [pc, #136]	@ (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b20      	ldr	r3, [pc, #128]	@ (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e032      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003168:	4b19      	ldr	r3, [pc, #100]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4916      	ldr	r1, [pc, #88]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003186:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	490e      	ldr	r1, [pc, #56]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800319a:	f000 fb7f 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800319e:	4602      	mov	r2, r0
 80031a0:	4b0b      	ldr	r3, [pc, #44]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	490a      	ldr	r1, [pc, #40]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	5ccb      	ldrb	r3, [r1, r3]
 80031ae:	fa22 f303 	lsr.w	r3, r2, r3
 80031b2:	4a09      	ldr	r2, [pc, #36]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031b6:	4b09      	ldr	r3, [pc, #36]	@ (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fdfc 	bl	8001db8 <HAL_InitTick>

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023c00 	.word	0x40023c00
 80031d0:	40023800 	.word	0x40023800
 80031d4:	08005e68 	.word	0x08005e68
 80031d8:	2000000c 	.word	0x2000000c
 80031dc:	20000010 	.word	0x20000010

080031e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e4:	4b03      	ldr	r3, [pc, #12]	@ (80031f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	2000000c 	.word	0x2000000c

080031f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031fc:	f7ff fff0 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0a9b      	lsrs	r3, r3, #10
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4903      	ldr	r1, [pc, #12]	@ (800321c <HAL_RCC_GetPCLK1Freq+0x24>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	08005e78 	.word	0x08005e78

08003220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003224:	f7ff ffdc 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b05      	ldr	r3, [pc, #20]	@ (8003240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	0b5b      	lsrs	r3, r3, #13
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4903      	ldr	r1, [pc, #12]	@ (8003244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40023800 	.word	0x40023800
 8003244:	08005e78 	.word	0x08005e78

08003248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08c      	sub	sp, #48	@ 0x30
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003280:	4b6f      	ldr	r3, [pc, #444]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003282:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003286:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328e:	496c      	ldr	r1, [pc, #432]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800329e:	2301      	movs	r3, #1
 80032a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d010      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80032ae:	4b64      	ldr	r3, [pc, #400]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032b4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032bc:	4960      	ldr	r1, [pc, #384]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80032cc:	2301      	movs	r3, #1
 80032ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d017      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032dc:	4b58      	ldr	r3, [pc, #352]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	4955      	ldr	r1, [pc, #340]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032fa:	d101      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80032fc:	2301      	movs	r3, #1
 80032fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003308:	2301      	movs	r3, #1
 800330a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d017      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003318:	4b49      	ldr	r3, [pc, #292]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800331a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800331e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003326:	4946      	ldr	r1, [pc, #280]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003336:	d101      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003344:	2301      	movs	r3, #1
 8003346:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 808a 	beq.w	800346a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	4b39      	ldr	r3, [pc, #228]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	4a38      	ldr	r2, [pc, #224]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003364:	6413      	str	r3, [r2, #64]	@ 0x40
 8003366:	4b36      	ldr	r3, [pc, #216]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003372:	4b34      	ldr	r3, [pc, #208]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a33      	ldr	r2, [pc, #204]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800337c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800337e:	f7fe fd5f 	bl	8001e40 <HAL_GetTick>
 8003382:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003386:	f7fe fd5b 	bl	8001e40 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e278      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003398:	4b2a      	ldr	r3, [pc, #168]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033a4:	4b26      	ldr	r3, [pc, #152]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ac:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d02f      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033bc:	6a3a      	ldr	r2, [r7, #32]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d028      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ca:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003448 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033d8:	4a19      	ldr	r2, [pc, #100]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033de:	4b18      	ldr	r3, [pc, #96]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d114      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80033ea:	f7fe fd29 	bl	8001e40 <HAL_GetTick>
 80033ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fe fd25 	bl	8001e40 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e240      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	4b0d      	ldr	r3, [pc, #52]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ee      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800341c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003420:	d114      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003422:	4b07      	ldr	r3, [pc, #28]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003436:	4902      	ldr	r1, [pc, #8]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003438:	4313      	orrs	r3, r2
 800343a:	608b      	str	r3, [r1, #8]
 800343c:	e00c      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	40007000 	.word	0x40007000
 8003448:	42470e40 	.word	0x42470e40
 800344c:	4b4a      	ldr	r3, [pc, #296]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a49      	ldr	r2, [pc, #292]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003452:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003456:	6093      	str	r3, [r2, #8]
 8003458:	4b47      	ldr	r3, [pc, #284]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800345a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	4944      	ldr	r1, [pc, #272]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003466:	4313      	orrs	r3, r2
 8003468:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800347c:	4b3f      	ldr	r3, [pc, #252]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800347e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800348c:	4b3a      	ldr	r3, [pc, #232]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800348e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003492:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349a:	4937      	ldr	r1, [pc, #220]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034ae:	4b32      	ldr	r3, [pc, #200]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034bc:	492e      	ldr	r1, [pc, #184]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d011      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034d0:	4b29      	ldr	r3, [pc, #164]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034de:	4926      	ldr	r1, [pc, #152]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034ee:	d101      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80034f0:	2301      	movs	r3, #1
 80034f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003500:	4b1d      	ldr	r3, [pc, #116]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003506:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	491a      	ldr	r1, [pc, #104]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351e:	2b00      	cmp	r3, #0
 8003520:	d011      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003522:	4b15      	ldr	r3, [pc, #84]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003528:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003530:	4911      	ldr	r1, [pc, #68]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003540:	d101      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003542:	2301      	movs	r3, #1
 8003544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d005      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003554:	f040 80ff 	bne.w	8003756 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003558:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800355e:	f7fe fc6f 	bl	8001e40 <HAL_GetTick>
 8003562:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003564:	e00e      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003566:	f7fe fc6b 	bl	8001e40 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d907      	bls.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e188      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003578:	40023800 	.word	0x40023800
 800357c:	424711e0 	.word	0x424711e0
 8003580:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003584:	4b7e      	ldr	r3, [pc, #504]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ea      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d009      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d028      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d124      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80035b8:	4b71      	ldr	r3, [pc, #452]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035be:	0c1b      	lsrs	r3, r3, #16
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	3301      	adds	r3, #1
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035d0:	0e1b      	lsrs	r3, r3, #24
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	019b      	lsls	r3, r3, #6
 80035e2:	431a      	orrs	r2, r3
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	085b      	lsrs	r3, r3, #1
 80035e8:	3b01      	subs	r3, #1
 80035ea:	041b      	lsls	r3, r3, #16
 80035ec:	431a      	orrs	r2, r3
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	061b      	lsls	r3, r3, #24
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	071b      	lsls	r3, r3, #28
 80035fa:	4961      	ldr	r1, [pc, #388]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003620:	2b00      	cmp	r3, #0
 8003622:	d035      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003628:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800362c:	d130      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800362e:	4b54      	ldr	r3, [pc, #336]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	3301      	adds	r3, #1
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003640:	4b4f      	ldr	r3, [pc, #316]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003646:	0f1b      	lsrs	r3, r3, #28
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	019b      	lsls	r3, r3, #6
 8003658:	431a      	orrs	r2, r3
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	3b01      	subs	r3, #1
 8003660:	041b      	lsls	r3, r3, #16
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	061b      	lsls	r3, r3, #24
 800366a:	431a      	orrs	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	071b      	lsls	r3, r3, #28
 8003670:	4943      	ldr	r1, [pc, #268]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003678:	4b41      	ldr	r3, [pc, #260]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800367a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800367e:	f023 021f 	bic.w	r2, r3, #31
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003686:	3b01      	subs	r3, #1
 8003688:	493d      	ldr	r1, [pc, #244]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003698:	2b00      	cmp	r3, #0
 800369a:	d029      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036a4:	d124      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80036a6:	4b36      	ldr	r3, [pc, #216]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ac:	0c1b      	lsrs	r3, r3, #16
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	3301      	adds	r3, #1
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036b8:	4b31      	ldr	r3, [pc, #196]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036be:	0f1b      	lsrs	r3, r3, #28
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	019b      	lsls	r3, r3, #6
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	3b01      	subs	r3, #1
 80036da:	041b      	lsls	r3, r3, #16
 80036dc:	431a      	orrs	r2, r3
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	061b      	lsls	r3, r3, #24
 80036e2:	431a      	orrs	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	071b      	lsls	r3, r3, #28
 80036e8:	4925      	ldr	r1, [pc, #148]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d016      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	019b      	lsls	r3, r3, #6
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	3b01      	subs	r3, #1
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	071b      	lsls	r3, r3, #28
 8003722:	4917      	ldr	r1, [pc, #92]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800372a:	4b16      	ldr	r3, [pc, #88]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003730:	f7fe fb86 	bl	8001e40 <HAL_GetTick>
 8003734:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003738:	f7fe fb82 	bl	8001e40 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e09f      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800374a:	4b0d      	ldr	r3, [pc, #52]	@ (8003780 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003758:	2b01      	cmp	r3, #1
 800375a:	f040 8095 	bne.w	8003888 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800375e:	4b0a      	ldr	r3, [pc, #40]	@ (8003788 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003764:	f7fe fb6c 	bl	8001e40 <HAL_GetTick>
 8003768:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800376a:	e00f      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800376c:	f7fe fb68 	bl	8001e40 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d908      	bls.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e085      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800
 8003784:	42470068 	.word	0x42470068
 8003788:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800378c:	4b41      	ldr	r3, [pc, #260]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003794:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003798:	d0e8      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x566>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d02b      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d127      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80037c2:	4b34      	ldr	r3, [pc, #208]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c8:	0c1b      	lsrs	r3, r3, #16
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	3301      	adds	r3, #1
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	019b      	lsls	r3, r3, #6
 80037de:	431a      	orrs	r2, r3
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	085b      	lsrs	r3, r3, #1
 80037e4:	3b01      	subs	r3, #1
 80037e6:	041b      	lsls	r3, r3, #16
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	061b      	lsls	r3, r3, #24
 80037f0:	4928      	ldr	r1, [pc, #160]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037f8:	4b26      	ldr	r3, [pc, #152]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037fe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003806:	3b01      	subs	r3, #1
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	4922      	ldr	r1, [pc, #136]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01d      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003822:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003826:	d118      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003828:	4b1a      	ldr	r3, [pc, #104]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382e:	0e1b      	lsrs	r3, r3, #24
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	019b      	lsls	r3, r3, #6
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	3b01      	subs	r3, #1
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	431a      	orrs	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	4910      	ldr	r1, [pc, #64]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800385a:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003860:	f7fe faee 	bl	8001e40 <HAL_GetTick>
 8003864:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003868:	f7fe faea 	bl	8001e40 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e007      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800387a:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003882:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003886:	d1ef      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3730      	adds	r7, #48	@ 0x30
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	42470070 	.word	0x42470070

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a0:	b0ae      	sub	sp, #184	@ 0xb8
 80038a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038c2:	4bcb      	ldr	r3, [pc, #812]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	f200 8206 	bhi.w	8003cdc <HAL_RCC_GetSysClockFreq+0x440>
 80038d0:	a201      	add	r2, pc, #4	@ (adr r2, 80038d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	0800390d 	.word	0x0800390d
 80038dc:	08003cdd 	.word	0x08003cdd
 80038e0:	08003cdd 	.word	0x08003cdd
 80038e4:	08003cdd 	.word	0x08003cdd
 80038e8:	08003915 	.word	0x08003915
 80038ec:	08003cdd 	.word	0x08003cdd
 80038f0:	08003cdd 	.word	0x08003cdd
 80038f4:	08003cdd 	.word	0x08003cdd
 80038f8:	0800391d 	.word	0x0800391d
 80038fc:	08003cdd 	.word	0x08003cdd
 8003900:	08003cdd 	.word	0x08003cdd
 8003904:	08003cdd 	.word	0x08003cdd
 8003908:	08003b0d 	.word	0x08003b0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800390c:	4bb9      	ldr	r3, [pc, #740]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0x358>)
 800390e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003912:	e1e7      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003914:	4bb8      	ldr	r3, [pc, #736]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003916:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800391a:	e1e3      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800391c:	4bb4      	ldr	r3, [pc, #720]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003928:	4bb1      	ldr	r3, [pc, #708]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d071      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003934:	4bae      	ldr	r3, [pc, #696]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	099b      	lsrs	r3, r3, #6
 800393a:	2200      	movs	r2, #0
 800393c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003940:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003944:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003956:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800395a:	4622      	mov	r2, r4
 800395c:	462b      	mov	r3, r5
 800395e:	f04f 0000 	mov.w	r0, #0
 8003962:	f04f 0100 	mov.w	r1, #0
 8003966:	0159      	lsls	r1, r3, #5
 8003968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800396c:	0150      	lsls	r0, r2, #5
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4621      	mov	r1, r4
 8003974:	1a51      	subs	r1, r2, r1
 8003976:	6439      	str	r1, [r7, #64]	@ 0x40
 8003978:	4629      	mov	r1, r5
 800397a:	eb63 0301 	sbc.w	r3, r3, r1
 800397e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800398c:	4649      	mov	r1, r9
 800398e:	018b      	lsls	r3, r1, #6
 8003990:	4641      	mov	r1, r8
 8003992:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003996:	4641      	mov	r1, r8
 8003998:	018a      	lsls	r2, r1, #6
 800399a:	4641      	mov	r1, r8
 800399c:	1a51      	subs	r1, r2, r1
 800399e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039a0:	4649      	mov	r1, r9
 80039a2:	eb63 0301 	sbc.w	r3, r3, r1
 80039a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80039b4:	4649      	mov	r1, r9
 80039b6:	00cb      	lsls	r3, r1, #3
 80039b8:	4641      	mov	r1, r8
 80039ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039be:	4641      	mov	r1, r8
 80039c0:	00ca      	lsls	r2, r1, #3
 80039c2:	4610      	mov	r0, r2
 80039c4:	4619      	mov	r1, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	4622      	mov	r2, r4
 80039ca:	189b      	adds	r3, r3, r2
 80039cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ce:	462b      	mov	r3, r5
 80039d0:	460a      	mov	r2, r1
 80039d2:	eb42 0303 	adc.w	r3, r2, r3
 80039d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039e4:	4629      	mov	r1, r5
 80039e6:	024b      	lsls	r3, r1, #9
 80039e8:	4621      	mov	r1, r4
 80039ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039ee:	4621      	mov	r1, r4
 80039f0:	024a      	lsls	r2, r1, #9
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a04:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003a08:	f7fd f81a 	bl	8000a40 <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4613      	mov	r3, r2
 8003a12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a16:	e067      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a18:	4b75      	ldr	r3, [pc, #468]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	099b      	lsrs	r3, r3, #6
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a24:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a32:	2300      	movs	r3, #0
 8003a34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a36:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003a3a:	4622      	mov	r2, r4
 8003a3c:	462b      	mov	r3, r5
 8003a3e:	f04f 0000 	mov.w	r0, #0
 8003a42:	f04f 0100 	mov.w	r1, #0
 8003a46:	0159      	lsls	r1, r3, #5
 8003a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a4c:	0150      	lsls	r0, r2, #5
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4621      	mov	r1, r4
 8003a54:	1a51      	subs	r1, r2, r1
 8003a56:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a58:	4629      	mov	r1, r5
 8003a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003a6c:	4649      	mov	r1, r9
 8003a6e:	018b      	lsls	r3, r1, #6
 8003a70:	4641      	mov	r1, r8
 8003a72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a76:	4641      	mov	r1, r8
 8003a78:	018a      	lsls	r2, r1, #6
 8003a7a:	4641      	mov	r1, r8
 8003a7c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a80:	4649      	mov	r1, r9
 8003a82:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a92:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a9a:	4692      	mov	sl, r2
 8003a9c:	469b      	mov	fp, r3
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	eb1a 0303 	adds.w	r3, sl, r3
 8003aa4:	623b      	str	r3, [r7, #32]
 8003aa6:	462b      	mov	r3, r5
 8003aa8:	eb4b 0303 	adc.w	r3, fp, r3
 8003aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003aba:	4629      	mov	r1, r5
 8003abc:	028b      	lsls	r3, r1, #10
 8003abe:	4621      	mov	r1, r4
 8003ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	028a      	lsls	r2, r1, #10
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ad4:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ad6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003ada:	f7fc ffb1 	bl	8000a40 <__aeabi_uldivmod>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ae8:	4b41      	ldr	r3, [pc, #260]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	3301      	adds	r3, #1
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003afe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b0a:	e0eb      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b0c:	4b38      	ldr	r3, [pc, #224]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b18:	4b35      	ldr	r3, [pc, #212]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d06b      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b24:	4b32      	ldr	r3, [pc, #200]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	099b      	lsrs	r3, r3, #6
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b36:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b38:	2300      	movs	r3, #0
 8003b3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b40:	4622      	mov	r2, r4
 8003b42:	462b      	mov	r3, r5
 8003b44:	f04f 0000 	mov.w	r0, #0
 8003b48:	f04f 0100 	mov.w	r1, #0
 8003b4c:	0159      	lsls	r1, r3, #5
 8003b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b52:	0150      	lsls	r0, r2, #5
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4621      	mov	r1, r4
 8003b5a:	1a51      	subs	r1, r2, r1
 8003b5c:	61b9      	str	r1, [r7, #24]
 8003b5e:	4629      	mov	r1, r5
 8003b60:	eb63 0301 	sbc.w	r3, r3, r1
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b72:	4659      	mov	r1, fp
 8003b74:	018b      	lsls	r3, r1, #6
 8003b76:	4651      	mov	r1, sl
 8003b78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b7c:	4651      	mov	r1, sl
 8003b7e:	018a      	lsls	r2, r1, #6
 8003b80:	4651      	mov	r1, sl
 8003b82:	ebb2 0801 	subs.w	r8, r2, r1
 8003b86:	4659      	mov	r1, fp
 8003b88:	eb63 0901 	sbc.w	r9, r3, r1
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ba0:	4690      	mov	r8, r2
 8003ba2:	4699      	mov	r9, r3
 8003ba4:	4623      	mov	r3, r4
 8003ba6:	eb18 0303 	adds.w	r3, r8, r3
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	462b      	mov	r3, r5
 8003bae:	eb49 0303 	adc.w	r3, r9, r3
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	024b      	lsls	r3, r1, #9
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bca:	4621      	mov	r1, r4
 8003bcc:	024a      	lsls	r2, r1, #9
 8003bce:	4610      	mov	r0, r2
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bda:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003bdc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003be0:	f7fc ff2e 	bl	8000a40 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bee:	e065      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x420>
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	00f42400 	.word	0x00f42400
 8003bf8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfc:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	099b      	lsrs	r3, r3, #6
 8003c02:	2200      	movs	r2, #0
 8003c04:	4618      	mov	r0, r3
 8003c06:	4611      	mov	r1, r2
 8003c08:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c0e:	2300      	movs	r3, #0
 8003c10:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c12:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003c16:	4642      	mov	r2, r8
 8003c18:	464b      	mov	r3, r9
 8003c1a:	f04f 0000 	mov.w	r0, #0
 8003c1e:	f04f 0100 	mov.w	r1, #0
 8003c22:	0159      	lsls	r1, r3, #5
 8003c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c28:	0150      	lsls	r0, r2, #5
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4641      	mov	r1, r8
 8003c30:	1a51      	subs	r1, r2, r1
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	4649      	mov	r1, r9
 8003c36:	eb63 0301 	sbc.w	r3, r3, r1
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c48:	4659      	mov	r1, fp
 8003c4a:	018b      	lsls	r3, r1, #6
 8003c4c:	4651      	mov	r1, sl
 8003c4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c52:	4651      	mov	r1, sl
 8003c54:	018a      	lsls	r2, r1, #6
 8003c56:	4651      	mov	r1, sl
 8003c58:	1a54      	subs	r4, r2, r1
 8003c5a:	4659      	mov	r1, fp
 8003c5c:	eb63 0501 	sbc.w	r5, r3, r1
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	00eb      	lsls	r3, r5, #3
 8003c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c6e:	00e2      	lsls	r2, r4, #3
 8003c70:	4614      	mov	r4, r2
 8003c72:	461d      	mov	r5, r3
 8003c74:	4643      	mov	r3, r8
 8003c76:	18e3      	adds	r3, r4, r3
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	eb45 0303 	adc.w	r3, r5, r3
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c8e:	4629      	mov	r1, r5
 8003c90:	028b      	lsls	r3, r1, #10
 8003c92:	4621      	mov	r1, r4
 8003c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c98:	4621      	mov	r1, r4
 8003c9a:	028a      	lsls	r2, r1, #10
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ca8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003caa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003cae:	f7fc fec7 	bl	8000a40 <__aeabi_uldivmod>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	0f1b      	lsrs	r3, r3, #28
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cda:	e003      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cdc:	4b06      	ldr	r3, [pc, #24]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003cde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ce2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	37b8      	adds	r7, #184	@ 0xb8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	00f42400 	.word	0x00f42400

08003cfc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e28d      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8083 	beq.w	8003e22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d1c:	4b94      	ldr	r3, [pc, #592]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d019      	beq.n	8003d5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d28:	4b91      	ldr	r3, [pc, #580]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d106      	bne.n	8003d42 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d34:	4b8e      	ldr	r3, [pc, #568]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d40:	d00c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d42:	4b8b      	ldr	r3, [pc, #556]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d4a:	2b0c      	cmp	r3, #12
 8003d4c:	d112      	bne.n	8003d74 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4e:	4b88      	ldr	r3, [pc, #544]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d5a:	d10b      	bne.n	8003d74 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	4b84      	ldr	r3, [pc, #528]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d05b      	beq.n	8003e20 <HAL_RCC_OscConfig+0x124>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d157      	bne.n	8003e20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e25a      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d7c:	d106      	bne.n	8003d8c <HAL_RCC_OscConfig+0x90>
 8003d7e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a7b      	ldr	r2, [pc, #492]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e01d      	b.n	8003dc8 <HAL_RCC_OscConfig+0xcc>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0xb4>
 8003d96:	4b76      	ldr	r3, [pc, #472]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a75      	ldr	r2, [pc, #468]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003d9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b73      	ldr	r3, [pc, #460]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a72      	ldr	r2, [pc, #456]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0xcc>
 8003db0:	4b6f      	ldr	r3, [pc, #444]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b6c      	ldr	r3, [pc, #432]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a6b      	ldr	r2, [pc, #428]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fe f836 	bl	8001e40 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fe f832 	bl	8001e40 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	@ 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e21f      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b61      	ldr	r3, [pc, #388]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xdc>
 8003df6:	e014      	b.n	8003e22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fe f822 	bl	8001e40 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fe f81e 	bl	8001e40 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	@ 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e20b      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	4b57      	ldr	r3, [pc, #348]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x104>
 8003e1e:	e000      	b.n	8003e22 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d06f      	beq.n	8003f0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e2e:	4b50      	ldr	r3, [pc, #320]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d017      	beq.n	8003e6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e3a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d105      	bne.n	8003e52 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e46:	4b4a      	ldr	r3, [pc, #296]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e52:	4b47      	ldr	r3, [pc, #284]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e5a:	2b0c      	cmp	r3, #12
 8003e5c:	d11c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5e:	4b44      	ldr	r3, [pc, #272]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d116      	bne.n	8003e98 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6a:	4b41      	ldr	r3, [pc, #260]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_RCC_OscConfig+0x186>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d001      	beq.n	8003e82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e1d3      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e82:	4b3b      	ldr	r3, [pc, #236]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4937      	ldr	r1, [pc, #220]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e96:	e03a      	b.n	8003f0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d020      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea0:	4b34      	ldr	r3, [pc, #208]	@ (8003f74 <HAL_RCC_OscConfig+0x278>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fd ffcb 	bl	8001e40 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eae:	f7fd ffc7 	bl	8001e40 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e1b4      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ecc:	4b28      	ldr	r3, [pc, #160]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4925      	ldr	r1, [pc, #148]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	600b      	str	r3, [r1, #0]
 8003ee0:	e015      	b.n	8003f0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee2:	4b24      	ldr	r3, [pc, #144]	@ (8003f74 <HAL_RCC_OscConfig+0x278>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fd ffaa 	bl	8001e40 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef0:	f7fd ffa6 	bl	8001e40 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e193      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f02:	4b1b      	ldr	r3, [pc, #108]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d036      	beq.n	8003f88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d016      	beq.n	8003f50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f22:	4b15      	ldr	r3, [pc, #84]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f28:	f7fd ff8a 	bl	8001e40 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f30:	f7fd ff86 	bl	8001e40 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e173      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f42:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <HAL_RCC_OscConfig+0x274>)
 8003f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x234>
 8003f4e:	e01b      	b.n	8003f88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f50:	4b09      	ldr	r3, [pc, #36]	@ (8003f78 <HAL_RCC_OscConfig+0x27c>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7fd ff73 	bl	8001e40 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f5c:	e00e      	b.n	8003f7c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f5e:	f7fd ff6f 	bl	8001e40 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d907      	bls.n	8003f7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e15c      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
 8003f70:	40023800 	.word	0x40023800
 8003f74:	42470000 	.word	0x42470000
 8003f78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f7c:	4b8a      	ldr	r3, [pc, #552]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 8003f7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1ea      	bne.n	8003f5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 8097 	beq.w	80040c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f96:	2300      	movs	r3, #0
 8003f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f9a:	4b83      	ldr	r3, [pc, #524]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10f      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	4b7f      	ldr	r3, [pc, #508]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	4a7e      	ldr	r2, [pc, #504]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 8003fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc6:	4b79      	ldr	r3, [pc, #484]	@ (80041ac <HAL_RCC_OscConfig+0x4b0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d118      	bne.n	8004004 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd2:	4b76      	ldr	r3, [pc, #472]	@ (80041ac <HAL_RCC_OscConfig+0x4b0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a75      	ldr	r2, [pc, #468]	@ (80041ac <HAL_RCC_OscConfig+0x4b0>)
 8003fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fde:	f7fd ff2f 	bl	8001e40 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe6:	f7fd ff2b 	bl	8001e40 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e118      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff8:	4b6c      	ldr	r3, [pc, #432]	@ (80041ac <HAL_RCC_OscConfig+0x4b0>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d106      	bne.n	800401a <HAL_RCC_OscConfig+0x31e>
 800400c:	4b66      	ldr	r3, [pc, #408]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004010:	4a65      	ldr	r2, [pc, #404]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6713      	str	r3, [r2, #112]	@ 0x70
 8004018:	e01c      	b.n	8004054 <HAL_RCC_OscConfig+0x358>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b05      	cmp	r3, #5
 8004020:	d10c      	bne.n	800403c <HAL_RCC_OscConfig+0x340>
 8004022:	4b61      	ldr	r3, [pc, #388]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004026:	4a60      	ldr	r2, [pc, #384]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 8004028:	f043 0304 	orr.w	r3, r3, #4
 800402c:	6713      	str	r3, [r2, #112]	@ 0x70
 800402e:	4b5e      	ldr	r3, [pc, #376]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004032:	4a5d      	ldr	r2, [pc, #372]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	6713      	str	r3, [r2, #112]	@ 0x70
 800403a:	e00b      	b.n	8004054 <HAL_RCC_OscConfig+0x358>
 800403c:	4b5a      	ldr	r3, [pc, #360]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004040:	4a59      	ldr	r2, [pc, #356]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	6713      	str	r3, [r2, #112]	@ 0x70
 8004048:	4b57      	ldr	r3, [pc, #348]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404c:	4a56      	ldr	r2, [pc, #344]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 800404e:	f023 0304 	bic.w	r3, r3, #4
 8004052:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d015      	beq.n	8004088 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405c:	f7fd fef0 	bl	8001e40 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004062:	e00a      	b.n	800407a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004064:	f7fd feec 	bl	8001e40 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e0d7      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407a:	4b4b      	ldr	r3, [pc, #300]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0ee      	beq.n	8004064 <HAL_RCC_OscConfig+0x368>
 8004086:	e014      	b.n	80040b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004088:	f7fd feda 	bl	8001e40 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408e:	e00a      	b.n	80040a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004090:	f7fd fed6 	bl	8001e40 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e0c1      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a6:	4b40      	ldr	r3, [pc, #256]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1ee      	bne.n	8004090 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040b2:	7dfb      	ldrb	r3, [r7, #23]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d105      	bne.n	80040c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b8:	4b3b      	ldr	r3, [pc, #236]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 80040ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040bc:	4a3a      	ldr	r2, [pc, #232]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 80040be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80ad 	beq.w	8004228 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ce:	4b36      	ldr	r3, [pc, #216]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d060      	beq.n	800419c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d145      	bne.n	800416e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e2:	4b33      	ldr	r3, [pc, #204]	@ (80041b0 <HAL_RCC_OscConfig+0x4b4>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd feaa 	bl	8001e40 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fd fea6 	bl	8001e40 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e093      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	4b29      	ldr	r3, [pc, #164]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	019b      	lsls	r3, r3, #6
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	3b01      	subs	r3, #1
 8004128:	041b      	lsls	r3, r3, #16
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004138:	071b      	lsls	r3, r3, #28
 800413a:	491b      	ldr	r1, [pc, #108]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 800413c:	4313      	orrs	r3, r2
 800413e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004140:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <HAL_RCC_OscConfig+0x4b4>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004146:	f7fd fe7b 	bl	8001e40 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414e:	f7fd fe77 	bl	8001e40 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e064      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004160:	4b11      	ldr	r3, [pc, #68]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x452>
 800416c:	e05c      	b.n	8004228 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416e:	4b10      	ldr	r3, [pc, #64]	@ (80041b0 <HAL_RCC_OscConfig+0x4b4>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fd fe64 	bl	8001e40 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417c:	f7fd fe60 	bl	8001e40 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e04d      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418e:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <HAL_RCC_OscConfig+0x4ac>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x480>
 800419a:	e045      	b.n	8004228 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d107      	bne.n	80041b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e040      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
 80041a8:	40023800 	.word	0x40023800
 80041ac:	40007000 	.word	0x40007000
 80041b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004234 <HAL_RCC_OscConfig+0x538>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d030      	beq.n	8004224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d129      	bne.n	8004224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d122      	bne.n	8004224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041e4:	4013      	ands	r3, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d119      	bne.n	8004224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	085b      	lsrs	r3, r3, #1
 80041fc:	3b01      	subs	r3, #1
 80041fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d10f      	bne.n	8004224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d107      	bne.n	8004224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800

08004238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e041      	b.n	80042ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fd fb72 	bl	8001948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f000 fb08 	bl	800488c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d001      	beq.n	80042f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e046      	b.n	800437e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a23      	ldr	r2, [pc, #140]	@ (800438c <HAL_TIM_Base_Start+0xb4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d022      	beq.n	8004348 <HAL_TIM_Base_Start+0x70>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430a:	d01d      	beq.n	8004348 <HAL_TIM_Base_Start+0x70>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1f      	ldr	r2, [pc, #124]	@ (8004390 <HAL_TIM_Base_Start+0xb8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d018      	beq.n	8004348 <HAL_TIM_Base_Start+0x70>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1e      	ldr	r2, [pc, #120]	@ (8004394 <HAL_TIM_Base_Start+0xbc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d013      	beq.n	8004348 <HAL_TIM_Base_Start+0x70>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1c      	ldr	r2, [pc, #112]	@ (8004398 <HAL_TIM_Base_Start+0xc0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00e      	beq.n	8004348 <HAL_TIM_Base_Start+0x70>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1b      	ldr	r2, [pc, #108]	@ (800439c <HAL_TIM_Base_Start+0xc4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d009      	beq.n	8004348 <HAL_TIM_Base_Start+0x70>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a19      	ldr	r2, [pc, #100]	@ (80043a0 <HAL_TIM_Base_Start+0xc8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d004      	beq.n	8004348 <HAL_TIM_Base_Start+0x70>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a18      	ldr	r2, [pc, #96]	@ (80043a4 <HAL_TIM_Base_Start+0xcc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d111      	bne.n	800436c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b06      	cmp	r3, #6
 8004358:	d010      	beq.n	800437c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0201 	orr.w	r2, r2, #1
 8004368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436a:	e007      	b.n	800437c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40010000 	.word	0x40010000
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800
 8004398:	40000c00 	.word	0x40000c00
 800439c:	40010400 	.word	0x40010400
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40001800 	.word	0x40001800

080043a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d001      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e04e      	b.n	800445e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a23      	ldr	r2, [pc, #140]	@ (800446c <HAL_TIM_Base_Start_IT+0xc4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d022      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x80>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ea:	d01d      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x80>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004470 <HAL_TIM_Base_Start_IT+0xc8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d018      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x80>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004474 <HAL_TIM_Base_Start_IT+0xcc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d013      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x80>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1c      	ldr	r2, [pc, #112]	@ (8004478 <HAL_TIM_Base_Start_IT+0xd0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00e      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x80>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1b      	ldr	r2, [pc, #108]	@ (800447c <HAL_TIM_Base_Start_IT+0xd4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d009      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x80>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a19      	ldr	r2, [pc, #100]	@ (8004480 <HAL_TIM_Base_Start_IT+0xd8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x80>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a18      	ldr	r2, [pc, #96]	@ (8004484 <HAL_TIM_Base_Start_IT+0xdc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d111      	bne.n	800444c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b06      	cmp	r3, #6
 8004438:	d010      	beq.n	800445c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0201 	orr.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444a:	e007      	b.n	800445c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40010000 	.word	0x40010000
 8004470:	40000400 	.word	0x40000400
 8004474:	40000800 	.word	0x40000800
 8004478:	40000c00 	.word	0x40000c00
 800447c:	40010400 	.word	0x40010400
 8004480:	40014000 	.word	0x40014000
 8004484:	40001800 	.word	0x40001800

08004488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b02      	cmp	r3, #2
 800449c:	d122      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d11b      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0202 	mvn.w	r2, #2
 80044b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f9bf 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 80044d0:	e005      	b.n	80044de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f9b1 	bl	800483a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f9c2 	bl	8004862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d122      	bne.n	8004538 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d11b      	bne.n	8004538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0204 	mvn.w	r2, #4
 8004508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f995 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 8004524:	e005      	b.n	8004532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f987 	bl	800483a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f998 	bl	8004862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b08      	cmp	r3, #8
 8004544:	d122      	bne.n	800458c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b08      	cmp	r3, #8
 8004552:	d11b      	bne.n	800458c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f06f 0208 	mvn.w	r2, #8
 800455c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2204      	movs	r2, #4
 8004562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f96b 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 8004578:	e005      	b.n	8004586 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f95d 	bl	800483a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f96e 	bl	8004862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b10      	cmp	r3, #16
 8004598:	d122      	bne.n	80045e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d11b      	bne.n	80045e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0210 	mvn.w	r2, #16
 80045b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2208      	movs	r2, #8
 80045b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f941 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 80045cc:	e005      	b.n	80045da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f933 	bl	800483a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f944 	bl	8004862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d10e      	bne.n	800460c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d107      	bne.n	800460c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0201 	mvn.w	r2, #1
 8004604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f90d 	bl	8004826 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004616:	2b80      	cmp	r3, #128	@ 0x80
 8004618:	d10e      	bne.n	8004638 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004624:	2b80      	cmp	r3, #128	@ 0x80
 8004626:	d107      	bne.n	8004638 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 faea 	bl	8004c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004642:	2b40      	cmp	r3, #64	@ 0x40
 8004644:	d10e      	bne.n	8004664 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004650:	2b40      	cmp	r3, #64	@ 0x40
 8004652:	d107      	bne.n	8004664 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f909 	bl	8004876 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b20      	cmp	r3, #32
 8004670:	d10e      	bne.n	8004690 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b20      	cmp	r3, #32
 800467e:	d107      	bne.n	8004690 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0220 	mvn.w	r2, #32
 8004688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fab4 	bl	8004bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_TIM_ConfigClockSource+0x1c>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e0b4      	b.n	800481e <HAL_TIM_ConfigClockSource+0x186>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ec:	d03e      	beq.n	800476c <HAL_TIM_ConfigClockSource+0xd4>
 80046ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046f2:	f200 8087 	bhi.w	8004804 <HAL_TIM_ConfigClockSource+0x16c>
 80046f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046fa:	f000 8086 	beq.w	800480a <HAL_TIM_ConfigClockSource+0x172>
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004702:	d87f      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x16c>
 8004704:	2b70      	cmp	r3, #112	@ 0x70
 8004706:	d01a      	beq.n	800473e <HAL_TIM_ConfigClockSource+0xa6>
 8004708:	2b70      	cmp	r3, #112	@ 0x70
 800470a:	d87b      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x16c>
 800470c:	2b60      	cmp	r3, #96	@ 0x60
 800470e:	d050      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004710:	2b60      	cmp	r3, #96	@ 0x60
 8004712:	d877      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x16c>
 8004714:	2b50      	cmp	r3, #80	@ 0x50
 8004716:	d03c      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0xfa>
 8004718:	2b50      	cmp	r3, #80	@ 0x50
 800471a:	d873      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x16c>
 800471c:	2b40      	cmp	r3, #64	@ 0x40
 800471e:	d058      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004720:	2b40      	cmp	r3, #64	@ 0x40
 8004722:	d86f      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x16c>
 8004724:	2b30      	cmp	r3, #48	@ 0x30
 8004726:	d064      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004728:	2b30      	cmp	r3, #48	@ 0x30
 800472a:	d86b      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x16c>
 800472c:	2b20      	cmp	r3, #32
 800472e:	d060      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004730:	2b20      	cmp	r3, #32
 8004732:	d867      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x16c>
 8004734:	2b00      	cmp	r3, #0
 8004736:	d05c      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004738:	2b10      	cmp	r3, #16
 800473a:	d05a      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x15a>
 800473c:	e062      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6899      	ldr	r1, [r3, #8]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f000 f9b7 	bl	8004ac0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004760:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	609a      	str	r2, [r3, #8]
      break;
 800476a:	e04f      	b.n	800480c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6899      	ldr	r1, [r3, #8]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f000 f9a0 	bl	8004ac0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800478e:	609a      	str	r2, [r3, #8]
      break;
 8004790:	e03c      	b.n	800480c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6859      	ldr	r1, [r3, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	461a      	mov	r2, r3
 80047a0:	f000 f914 	bl	80049cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2150      	movs	r1, #80	@ 0x50
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f96d 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 80047b0:	e02c      	b.n	800480c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	6859      	ldr	r1, [r3, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	461a      	mov	r2, r3
 80047c0:	f000 f933 	bl	8004a2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2160      	movs	r1, #96	@ 0x60
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f95d 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 80047d0:	e01c      	b.n	800480c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6859      	ldr	r1, [r3, #4]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	461a      	mov	r2, r3
 80047e0:	f000 f8f4 	bl	80049cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2140      	movs	r1, #64	@ 0x40
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f94d 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 80047f0:	e00c      	b.n	800480c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4619      	mov	r1, r3
 80047fc:	4610      	mov	r0, r2
 80047fe:	f000 f944 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 8004802:	e003      	b.n	800480c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
      break;
 8004808:	e000      	b.n	800480c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800480a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a40      	ldr	r2, [pc, #256]	@ (80049a0 <TIM_Base_SetConfig+0x114>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048aa:	d00f      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a3d      	ldr	r2, [pc, #244]	@ (80049a4 <TIM_Base_SetConfig+0x118>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00b      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3c      	ldr	r2, [pc, #240]	@ (80049a8 <TIM_Base_SetConfig+0x11c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3b      	ldr	r2, [pc, #236]	@ (80049ac <TIM_Base_SetConfig+0x120>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3a      	ldr	r2, [pc, #232]	@ (80049b0 <TIM_Base_SetConfig+0x124>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2f      	ldr	r2, [pc, #188]	@ (80049a0 <TIM_Base_SetConfig+0x114>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d02b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ec:	d027      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2c      	ldr	r2, [pc, #176]	@ (80049a4 <TIM_Base_SetConfig+0x118>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d023      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2b      	ldr	r2, [pc, #172]	@ (80049a8 <TIM_Base_SetConfig+0x11c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01f      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2a      	ldr	r2, [pc, #168]	@ (80049ac <TIM_Base_SetConfig+0x120>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a29      	ldr	r2, [pc, #164]	@ (80049b0 <TIM_Base_SetConfig+0x124>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d017      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a28      	ldr	r2, [pc, #160]	@ (80049b4 <TIM_Base_SetConfig+0x128>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a27      	ldr	r2, [pc, #156]	@ (80049b8 <TIM_Base_SetConfig+0x12c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00f      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a26      	ldr	r2, [pc, #152]	@ (80049bc <TIM_Base_SetConfig+0x130>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a25      	ldr	r2, [pc, #148]	@ (80049c0 <TIM_Base_SetConfig+0x134>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a24      	ldr	r2, [pc, #144]	@ (80049c4 <TIM_Base_SetConfig+0x138>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a23      	ldr	r2, [pc, #140]	@ (80049c8 <TIM_Base_SetConfig+0x13c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a0a      	ldr	r2, [pc, #40]	@ (80049a0 <TIM_Base_SetConfig+0x114>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_Base_SetConfig+0xf8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a0c      	ldr	r2, [pc, #48]	@ (80049b0 <TIM_Base_SetConfig+0x124>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d103      	bne.n	800498c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	615a      	str	r2, [r3, #20]
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40010400 	.word	0x40010400
 80049b4:	40014000 	.word	0x40014000
 80049b8:	40014400 	.word	0x40014400
 80049bc:	40014800 	.word	0x40014800
 80049c0:	40001800 	.word	0x40001800
 80049c4:	40001c00 	.word	0x40001c00
 80049c8:	40002000 	.word	0x40002000

080049cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f023 0201 	bic.w	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f023 030a 	bic.w	r3, r3, #10
 8004a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	621a      	str	r2, [r3, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b087      	sub	sp, #28
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	f023 0210 	bic.w	r2, r3, #16
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	031b      	lsls	r3, r3, #12
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f043 0307 	orr.w	r3, r3, #7
 8004aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	609a      	str	r2, [r3, #8]
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	021a      	lsls	r2, r3, #8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	609a      	str	r2, [r3, #8]
}
 8004af4:	bf00      	nop
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e05a      	b.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a21      	ldr	r2, [pc, #132]	@ (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d022      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b64:	d01d      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d018      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1b      	ldr	r2, [pc, #108]	@ (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d013      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00e      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a18      	ldr	r2, [pc, #96]	@ (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a17      	ldr	r2, [pc, #92]	@ (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a15      	ldr	r2, [pc, #84]	@ (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d10c      	bne.n	8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800
 8004be8:	40000c00 	.word	0x40000c00
 8004bec:	40010400 	.word	0x40010400
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40001800 	.word	0x40001800

08004bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e03f      	b.n	8004cb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc feda 	bl	8001a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	@ 0x24
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f829 	bl	8004cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc0:	b0c0      	sub	sp, #256	@ 0x100
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd8:	68d9      	ldr	r1, [r3, #12]
 8004cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	ea40 0301 	orr.w	r3, r0, r1
 8004ce4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d14:	f021 010c 	bic.w	r1, r1, #12
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d22:	430b      	orrs	r3, r1
 8004d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d36:	6999      	ldr	r1, [r3, #24]
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	ea40 0301 	orr.w	r3, r0, r1
 8004d42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b8f      	ldr	r3, [pc, #572]	@ (8004f88 <UART_SetConfig+0x2cc>)
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d005      	beq.n	8004d5c <UART_SetConfig+0xa0>
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4b8d      	ldr	r3, [pc, #564]	@ (8004f8c <UART_SetConfig+0x2d0>)
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d104      	bne.n	8004d66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d5c:	f7fe fa60 	bl	8003220 <HAL_RCC_GetPCLK2Freq>
 8004d60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d64:	e003      	b.n	8004d6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d66:	f7fe fa47 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 8004d6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d78:	f040 810c 	bne.w	8004f94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d80:	2200      	movs	r2, #0
 8004d82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d8e:	4622      	mov	r2, r4
 8004d90:	462b      	mov	r3, r5
 8004d92:	1891      	adds	r1, r2, r2
 8004d94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d96:	415b      	adcs	r3, r3
 8004d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d9e:	4621      	mov	r1, r4
 8004da0:	eb12 0801 	adds.w	r8, r2, r1
 8004da4:	4629      	mov	r1, r5
 8004da6:	eb43 0901 	adc.w	r9, r3, r1
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dbe:	4690      	mov	r8, r2
 8004dc0:	4699      	mov	r9, r3
 8004dc2:	4623      	mov	r3, r4
 8004dc4:	eb18 0303 	adds.w	r3, r8, r3
 8004dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004dcc:	462b      	mov	r3, r5
 8004dce:	eb49 0303 	adc.w	r3, r9, r3
 8004dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004de2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004de6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004dea:	460b      	mov	r3, r1
 8004dec:	18db      	adds	r3, r3, r3
 8004dee:	653b      	str	r3, [r7, #80]	@ 0x50
 8004df0:	4613      	mov	r3, r2
 8004df2:	eb42 0303 	adc.w	r3, r2, r3
 8004df6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004df8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004dfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e00:	f7fb fe1e 	bl	8000a40 <__aeabi_uldivmod>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4b61      	ldr	r3, [pc, #388]	@ (8004f90 <UART_SetConfig+0x2d4>)
 8004e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	011c      	lsls	r4, r3, #4
 8004e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e24:	4642      	mov	r2, r8
 8004e26:	464b      	mov	r3, r9
 8004e28:	1891      	adds	r1, r2, r2
 8004e2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e2c:	415b      	adcs	r3, r3
 8004e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e34:	4641      	mov	r1, r8
 8004e36:	eb12 0a01 	adds.w	sl, r2, r1
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e54:	4692      	mov	sl, r2
 8004e56:	469b      	mov	fp, r3
 8004e58:	4643      	mov	r3, r8
 8004e5a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e62:	464b      	mov	r3, r9
 8004e64:	eb4b 0303 	adc.w	r3, fp, r3
 8004e68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e80:	460b      	mov	r3, r1
 8004e82:	18db      	adds	r3, r3, r3
 8004e84:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e86:	4613      	mov	r3, r2
 8004e88:	eb42 0303 	adc.w	r3, r2, r3
 8004e8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e96:	f7fb fdd3 	bl	8000a40 <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8004f90 <UART_SetConfig+0x2d4>)
 8004ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2264      	movs	r2, #100	@ 0x64
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	1acb      	subs	r3, r1, r3
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004eb6:	4b36      	ldr	r3, [pc, #216]	@ (8004f90 <UART_SetConfig+0x2d4>)
 8004eb8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ec4:	441c      	add	r4, r3
 8004ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ed0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ed4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ed8:	4642      	mov	r2, r8
 8004eda:	464b      	mov	r3, r9
 8004edc:	1891      	adds	r1, r2, r2
 8004ede:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ee0:	415b      	adcs	r3, r3
 8004ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ee8:	4641      	mov	r1, r8
 8004eea:	1851      	adds	r1, r2, r1
 8004eec:	6339      	str	r1, [r7, #48]	@ 0x30
 8004eee:	4649      	mov	r1, r9
 8004ef0:	414b      	adcs	r3, r1
 8004ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f00:	4659      	mov	r1, fp
 8004f02:	00cb      	lsls	r3, r1, #3
 8004f04:	4651      	mov	r1, sl
 8004f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f0a:	4651      	mov	r1, sl
 8004f0c:	00ca      	lsls	r2, r1, #3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	4619      	mov	r1, r3
 8004f12:	4603      	mov	r3, r0
 8004f14:	4642      	mov	r2, r8
 8004f16:	189b      	adds	r3, r3, r2
 8004f18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	460a      	mov	r2, r1
 8004f20:	eb42 0303 	adc.w	r3, r2, r3
 8004f24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	18db      	adds	r3, r3, r3
 8004f40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f42:	4613      	mov	r3, r2
 8004f44:	eb42 0303 	adc.w	r3, r2, r3
 8004f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f52:	f7fb fd75 	bl	8000a40 <__aeabi_uldivmod>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f90 <UART_SetConfig+0x2d4>)
 8004f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	2164      	movs	r1, #100	@ 0x64
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	3332      	adds	r3, #50	@ 0x32
 8004f6e:	4a08      	ldr	r2, [pc, #32]	@ (8004f90 <UART_SetConfig+0x2d4>)
 8004f70:	fba2 2303 	umull	r2, r3, r2, r3
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	f003 0207 	and.w	r2, r3, #7
 8004f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4422      	add	r2, r4
 8004f82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f84:	e106      	b.n	8005194 <UART_SetConfig+0x4d8>
 8004f86:	bf00      	nop
 8004f88:	40011000 	.word	0x40011000
 8004f8c:	40011400 	.word	0x40011400
 8004f90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004fa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004fa6:	4642      	mov	r2, r8
 8004fa8:	464b      	mov	r3, r9
 8004faa:	1891      	adds	r1, r2, r2
 8004fac:	6239      	str	r1, [r7, #32]
 8004fae:	415b      	adcs	r3, r3
 8004fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fb6:	4641      	mov	r1, r8
 8004fb8:	1854      	adds	r4, r2, r1
 8004fba:	4649      	mov	r1, r9
 8004fbc:	eb43 0501 	adc.w	r5, r3, r1
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	00eb      	lsls	r3, r5, #3
 8004fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fce:	00e2      	lsls	r2, r4, #3
 8004fd0:	4614      	mov	r4, r2
 8004fd2:	461d      	mov	r5, r3
 8004fd4:	4643      	mov	r3, r8
 8004fd6:	18e3      	adds	r3, r4, r3
 8004fd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fdc:	464b      	mov	r3, r9
 8004fde:	eb45 0303 	adc.w	r3, r5, r3
 8004fe2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ff2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005002:	4629      	mov	r1, r5
 8005004:	008b      	lsls	r3, r1, #2
 8005006:	4621      	mov	r1, r4
 8005008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800500c:	4621      	mov	r1, r4
 800500e:	008a      	lsls	r2, r1, #2
 8005010:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005014:	f7fb fd14 	bl	8000a40 <__aeabi_uldivmod>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4b60      	ldr	r3, [pc, #384]	@ (80051a0 <UART_SetConfig+0x4e4>)
 800501e:	fba3 2302 	umull	r2, r3, r3, r2
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	011c      	lsls	r4, r3, #4
 8005026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800502a:	2200      	movs	r2, #0
 800502c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005030:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005034:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005038:	4642      	mov	r2, r8
 800503a:	464b      	mov	r3, r9
 800503c:	1891      	adds	r1, r2, r2
 800503e:	61b9      	str	r1, [r7, #24]
 8005040:	415b      	adcs	r3, r3
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005048:	4641      	mov	r1, r8
 800504a:	1851      	adds	r1, r2, r1
 800504c:	6139      	str	r1, [r7, #16]
 800504e:	4649      	mov	r1, r9
 8005050:	414b      	adcs	r3, r1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005060:	4659      	mov	r1, fp
 8005062:	00cb      	lsls	r3, r1, #3
 8005064:	4651      	mov	r1, sl
 8005066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800506a:	4651      	mov	r1, sl
 800506c:	00ca      	lsls	r2, r1, #3
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	4603      	mov	r3, r0
 8005074:	4642      	mov	r2, r8
 8005076:	189b      	adds	r3, r3, r2
 8005078:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800507c:	464b      	mov	r3, r9
 800507e:	460a      	mov	r2, r1
 8005080:	eb42 0303 	adc.w	r3, r2, r3
 8005084:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005092:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80050a0:	4649      	mov	r1, r9
 80050a2:	008b      	lsls	r3, r1, #2
 80050a4:	4641      	mov	r1, r8
 80050a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050aa:	4641      	mov	r1, r8
 80050ac:	008a      	lsls	r2, r1, #2
 80050ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80050b2:	f7fb fcc5 	bl	8000a40 <__aeabi_uldivmod>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	4b38      	ldr	r3, [pc, #224]	@ (80051a0 <UART_SetConfig+0x4e4>)
 80050be:	fba3 2301 	umull	r2, r3, r3, r1
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	2264      	movs	r2, #100	@ 0x64
 80050c6:	fb02 f303 	mul.w	r3, r2, r3
 80050ca:	1acb      	subs	r3, r1, r3
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	3332      	adds	r3, #50	@ 0x32
 80050d0:	4a33      	ldr	r2, [pc, #204]	@ (80051a0 <UART_SetConfig+0x4e4>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050dc:	441c      	add	r4, r3
 80050de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050e2:	2200      	movs	r2, #0
 80050e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80050e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80050e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050ec:	4642      	mov	r2, r8
 80050ee:	464b      	mov	r3, r9
 80050f0:	1891      	adds	r1, r2, r2
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	415b      	adcs	r3, r3
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050fc:	4641      	mov	r1, r8
 80050fe:	1851      	adds	r1, r2, r1
 8005100:	6039      	str	r1, [r7, #0]
 8005102:	4649      	mov	r1, r9
 8005104:	414b      	adcs	r3, r1
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005114:	4659      	mov	r1, fp
 8005116:	00cb      	lsls	r3, r1, #3
 8005118:	4651      	mov	r1, sl
 800511a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800511e:	4651      	mov	r1, sl
 8005120:	00ca      	lsls	r2, r1, #3
 8005122:	4610      	mov	r0, r2
 8005124:	4619      	mov	r1, r3
 8005126:	4603      	mov	r3, r0
 8005128:	4642      	mov	r2, r8
 800512a:	189b      	adds	r3, r3, r2
 800512c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800512e:	464b      	mov	r3, r9
 8005130:	460a      	mov	r2, r1
 8005132:	eb42 0303 	adc.w	r3, r2, r3
 8005136:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	663b      	str	r3, [r7, #96]	@ 0x60
 8005142:	667a      	str	r2, [r7, #100]	@ 0x64
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005150:	4649      	mov	r1, r9
 8005152:	008b      	lsls	r3, r1, #2
 8005154:	4641      	mov	r1, r8
 8005156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800515a:	4641      	mov	r1, r8
 800515c:	008a      	lsls	r2, r1, #2
 800515e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005162:	f7fb fc6d 	bl	8000a40 <__aeabi_uldivmod>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4b0d      	ldr	r3, [pc, #52]	@ (80051a0 <UART_SetConfig+0x4e4>)
 800516c:	fba3 1302 	umull	r1, r3, r3, r2
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	2164      	movs	r1, #100	@ 0x64
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	3332      	adds	r3, #50	@ 0x32
 800517e:	4a08      	ldr	r2, [pc, #32]	@ (80051a0 <UART_SetConfig+0x4e4>)
 8005180:	fba2 2303 	umull	r2, r3, r2, r3
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	f003 020f 	and.w	r2, r3, #15
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4422      	add	r2, r4
 8005192:	609a      	str	r2, [r3, #8]
}
 8005194:	bf00      	nop
 8005196:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800519a:	46bd      	mov	sp, r7
 800519c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051a0:	51eb851f 	.word	0x51eb851f

080051a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051a4:	b084      	sub	sp, #16
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b084      	sub	sp, #16
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	f107 001c 	add.w	r0, r7, #28
 80051b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d122      	bne.n	8005202 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80051d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d105      	bne.n	80051f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa9c 	bl	8005734 <USB_CoreReset>
 80051fc:	4603      	mov	r3, r0
 80051fe:	73fb      	strb	r3, [r7, #15]
 8005200:	e01a      	b.n	8005238 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fa90 	bl	8005734 <USB_CoreReset>
 8005214:	4603      	mov	r3, r0
 8005216:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005222:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	639a      	str	r2, [r3, #56]	@ 0x38
 800522a:	e005      	b.n	8005238 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005230:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523a:	2b01      	cmp	r3, #1
 800523c:	d10b      	bne.n	8005256 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f043 0206 	orr.w	r2, r3, #6
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f043 0220 	orr.w	r2, r3, #32
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005256:	7bfb      	ldrb	r3, [r7, #15]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005262:	b004      	add	sp, #16
 8005264:	4770      	bx	lr

08005266 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f023 0201 	bic.w	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d115      	bne.n	80052d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052b6:	2001      	movs	r0, #1
 80052b8:	f7fc fdce 	bl	8001e58 <HAL_Delay>
      ms++;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3301      	adds	r3, #1
 80052c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fa28 	bl	8005718 <USB_GetMode>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d01e      	beq.n	800530c <USB_SetCurrentMode+0x84>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b31      	cmp	r3, #49	@ 0x31
 80052d2:	d9f0      	bls.n	80052b6 <USB_SetCurrentMode+0x2e>
 80052d4:	e01a      	b.n	800530c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d115      	bne.n	8005308 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052e8:	2001      	movs	r0, #1
 80052ea:	f7fc fdb5 	bl	8001e58 <HAL_Delay>
      ms++;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3301      	adds	r3, #1
 80052f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fa0f 	bl	8005718 <USB_GetMode>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <USB_SetCurrentMode+0x84>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b31      	cmp	r3, #49	@ 0x31
 8005304:	d9f0      	bls.n	80052e8 <USB_SetCurrentMode+0x60>
 8005306:	e001      	b.n	800530c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e005      	b.n	8005318 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b32      	cmp	r3, #50	@ 0x32
 8005310:	d101      	bne.n	8005316 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005320:	b084      	sub	sp, #16
 8005322:	b580      	push	{r7, lr}
 8005324:	b086      	sub	sp, #24
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800532e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	e009      	b.n	8005354 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	3340      	adds	r3, #64	@ 0x40
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	2200      	movs	r2, #0
 800534c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	3301      	adds	r3, #1
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b0e      	cmp	r3, #14
 8005358:	d9f2      	bls.n	8005340 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800535a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d11c      	bne.n	800539a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800536e:	f043 0302 	orr.w	r3, r3, #2
 8005372:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005378:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	e005      	b.n	80053a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053ac:	461a      	mov	r2, r3
 80053ae:	2300      	movs	r3, #0
 80053b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b8:	4619      	mov	r1, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053c0:	461a      	mov	r2, r3
 80053c2:	680b      	ldr	r3, [r1, #0]
 80053c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d10c      	bne.n	80053e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d104      	bne.n	80053dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053d2:	2100      	movs	r1, #0
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f965 	bl	80056a4 <USB_SetDevSpeed>
 80053da:	e008      	b.n	80053ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053dc:	2101      	movs	r1, #1
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f960 	bl	80056a4 <USB_SetDevSpeed>
 80053e4:	e003      	b.n	80053ee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053e6:	2103      	movs	r1, #3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f95b 	bl	80056a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053ee:	2110      	movs	r1, #16
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f8f3 	bl	80055dc <USB_FlushTxFifo>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f91f 	bl	8005644 <USB_FlushRxFifo>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005416:	461a      	mov	r2, r3
 8005418:	2300      	movs	r3, #0
 800541a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005422:	461a      	mov	r2, r3
 8005424:	2300      	movs	r3, #0
 8005426:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800542e:	461a      	mov	r2, r3
 8005430:	2300      	movs	r3, #0
 8005432:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005434:	2300      	movs	r3, #0
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	e043      	b.n	80054c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800544c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005450:	d118      	bne.n	8005484 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005464:	461a      	mov	r2, r3
 8005466:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	e013      	b.n	8005496 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800547a:	461a      	mov	r2, r3
 800547c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	e008      	b.n	8005496 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005490:	461a      	mov	r2, r3
 8005492:	2300      	movs	r3, #0
 8005494:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a2:	461a      	mov	r2, r3
 80054a4:	2300      	movs	r3, #0
 80054a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b4:	461a      	mov	r2, r3
 80054b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	3301      	adds	r3, #1
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d3b7      	bcc.n	800543a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ca:	2300      	movs	r3, #0
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	e043      	b.n	8005558 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054e6:	d118      	bne.n	800551a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fa:	461a      	mov	r2, r3
 80054fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e013      	b.n	800552c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005510:	461a      	mov	r2, r3
 8005512:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	e008      	b.n	800552c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005526:	461a      	mov	r2, r3
 8005528:	2300      	movs	r3, #0
 800552a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005538:	461a      	mov	r2, r3
 800553a:	2300      	movs	r3, #0
 800553c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554a:	461a      	mov	r2, r3
 800554c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005550:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	3301      	adds	r3, #1
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	429a      	cmp	r2, r3
 800555e:	d3b7      	bcc.n	80054d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800556e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005572:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005580:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005584:	2b00      	cmp	r3, #0
 8005586:	d105      	bne.n	8005594 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f043 0210 	orr.w	r2, r3, #16
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	4b0f      	ldr	r3, [pc, #60]	@ (80055d8 <USB_DevInit+0x2b8>)
 800559a:	4313      	orrs	r3, r2
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d005      	beq.n	80055b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	f043 0208 	orr.w	r2, r3, #8
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d107      	bne.n	80055c8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055c0:	f043 0304 	orr.w	r3, r3, #4
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055d4:	b004      	add	sp, #16
 80055d6:	4770      	bx	lr
 80055d8:	803c3800 	.word	0x803c3800

080055dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3301      	adds	r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a13      	ldr	r2, [pc, #76]	@ (8005640 <USB_FlushTxFifo+0x64>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d901      	bls.n	80055fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e01b      	b.n	8005634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	daf2      	bge.n	80055ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	019b      	lsls	r3, r3, #6
 800560c:	f043 0220 	orr.w	r2, r3, #32
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3301      	adds	r3, #1
 8005618:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4a08      	ldr	r2, [pc, #32]	@ (8005640 <USB_FlushTxFifo+0x64>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d901      	bls.n	8005626 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e006      	b.n	8005634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b20      	cmp	r3, #32
 8005630:	d0f0      	beq.n	8005614 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	00030d40 	.word	0x00030d40

08005644 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	3301      	adds	r3, #1
 8005654:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4a11      	ldr	r2, [pc, #68]	@ (80056a0 <USB_FlushRxFifo+0x5c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d901      	bls.n	8005662 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e018      	b.n	8005694 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	daf2      	bge.n	8005650 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2210      	movs	r2, #16
 8005672:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3301      	adds	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4a08      	ldr	r2, [pc, #32]	@ (80056a0 <USB_FlushRxFifo+0x5c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d901      	bls.n	8005686 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e006      	b.n	8005694 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b10      	cmp	r3, #16
 8005690:	d0f0      	beq.n	8005674 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	00030d40 	.word	0x00030d40

080056a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056c4:	4313      	orrs	r3, r2
 80056c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b085      	sub	sp, #20
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80056f0:	f023 0303 	bic.w	r3, r3, #3
 80056f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	f003 0301 	and.w	r3, r3, #1
}
 8005728:	4618      	mov	r0, r3
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3301      	adds	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4a13      	ldr	r2, [pc, #76]	@ (8005798 <USB_CoreReset+0x64>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d901      	bls.n	8005752 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e01b      	b.n	800578a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	daf2      	bge.n	8005740 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f043 0201 	orr.w	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3301      	adds	r3, #1
 800576e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a09      	ldr	r2, [pc, #36]	@ (8005798 <USB_CoreReset+0x64>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e006      	b.n	800578a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b01      	cmp	r3, #1
 8005786:	d0f0      	beq.n	800576a <USB_CoreReset+0x36>

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	00030d40 	.word	0x00030d40

0800579c <arm_fir_init_f32>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	9c04      	ldr	r4, [sp, #16]
 80057a0:	6082      	str	r2, [r0, #8]
 80057a2:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80057a6:	3c01      	subs	r4, #1
 80057a8:	440c      	add	r4, r1
 80057aa:	8001      	strh	r1, [r0, #0]
 80057ac:	4605      	mov	r5, r0
 80057ae:	00a2      	lsls	r2, r4, #2
 80057b0:	4618      	mov	r0, r3
 80057b2:	2100      	movs	r1, #0
 80057b4:	f000 fa82 	bl	8005cbc <memset>
 80057b8:	6068      	str	r0, [r5, #4]
 80057ba:	bd38      	pop	{r3, r4, r5, pc}

080057bc <arm_fir_f32>:
 80057bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c0:	ed2d 8b10 	vpush	{d8-d15}
 80057c4:	b08b      	sub	sp, #44	@ 0x2c
 80057c6:	f8b0 8000 	ldrh.w	r8, [r0]
 80057ca:	9003      	str	r0, [sp, #12]
 80057cc:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 80057d0:	461e      	mov	r6, r3
 80057d2:	9304      	str	r3, [sp, #16]
 80057d4:	f108 4380 	add.w	r3, r8, #1073741824	@ 0x40000000
 80057d8:	3b01      	subs	r3, #1
 80057da:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 80057de:	08f3      	lsrs	r3, r6, #3
 80057e0:	9002      	str	r0, [sp, #8]
 80057e2:	9500      	str	r5, [sp, #0]
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	f000 81f1 	beq.w	8005bcc <arm_fir_f32+0x410>
 80057ea:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 80057ee:	f100 0620 	add.w	r6, r0, #32
 80057f2:	9405      	str	r4, [sp, #20]
 80057f4:	0164      	lsls	r4, r4, #5
 80057f6:	4420      	add	r0, r4
 80057f8:	f008 0a07 	and.w	sl, r8, #7
 80057fc:	9607      	str	r6, [sp, #28]
 80057fe:	9006      	str	r0, [sp, #24]
 8005800:	469c      	mov	ip, r3
 8005802:	4650      	mov	r0, sl
 8005804:	4623      	mov	r3, r4
 8005806:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800580a:	f8cd 8020 	str.w	r8, [sp, #32]
 800580e:	1937      	adds	r7, r6, r4
 8005810:	f109 0b1c 	add.w	fp, r9, #28
 8005814:	f8dd e014 	ldr.w	lr, [sp, #20]
 8005818:	9209      	str	r2, [sp, #36]	@ 0x24
 800581a:	f8cd 9014 	str.w	r9, [sp, #20]
 800581e:	f101 0620 	add.w	r6, r1, #32
 8005822:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005826:	9106      	str	r1, [sp, #24]
 8005828:	3520      	adds	r5, #32
 800582a:	f102 0420 	add.w	r4, r2, #32
 800582e:	4698      	mov	r8, r3
 8005830:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8005834:	f845 3c20 	str.w	r3, [r5, #-32]
 8005838:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800583c:	f845 3c1c 	str.w	r3, [r5, #-28]
 8005840:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8005844:	f845 3c18 	str.w	r3, [r5, #-24]
 8005848:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800584c:	f845 3c14 	str.w	r3, [r5, #-20]
 8005850:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8005854:	f845 3c10 	str.w	r3, [r5, #-16]
 8005858:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800585c:	f845 3c0c 	str.w	r3, [r5, #-12]
 8005860:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005864:	f845 3c08 	str.w	r3, [r5, #-8]
 8005868:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800586c:	f845 3c04 	str.w	r3, [r5, #-4]
 8005870:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 8005874:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 8005878:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 800587c:	ed5b 0a04 	vldr	s1, [fp, #-16]
 8005880:	ed1b 0a03 	vldr	s0, [fp, #-12]
 8005884:	ed1b 8a02 	vldr	s16, [fp, #-8]
 8005888:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800588c:	eddf 6af5 	vldr	s13, [pc, #980]	@ 8005c64 <arm_fir_f32+0x4a8>
 8005890:	465a      	mov	r2, fp
 8005892:	f1be 0f00 	cmp.w	lr, #0
 8005896:	f000 81fe 	beq.w	8005c96 <arm_fir_f32+0x4da>
 800589a:	f10b 0120 	add.w	r1, fp, #32
 800589e:	eef0 ba66 	vmov.f32	s23, s13
 80058a2:	eeb0 6a66 	vmov.f32	s12, s13
 80058a6:	eeb0 9a66 	vmov.f32	s18, s13
 80058aa:	eef0 9a66 	vmov.f32	s19, s13
 80058ae:	eeb0 aa66 	vmov.f32	s20, s13
 80058b2:	eef0 aa66 	vmov.f32	s21, s13
 80058b6:	eeb0 ba66 	vmov.f32	s22, s13
 80058ba:	460a      	mov	r2, r1
 80058bc:	4653      	mov	r3, sl
 80058be:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 80058c2:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 80058c6:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 80058ca:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 80058ce:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 80058d2:	ed53 ca04 	vldr	s25, [r3, #-16]
 80058d6:	ed53 2a03 	vldr	s5, [r3, #-12]
 80058da:	ed13 4a02 	vldr	s8, [r3, #-8]
 80058de:	ed13 5a01 	vldr	s10, [r3, #-4]
 80058e2:	ee67 fa02 	vmul.f32	s31, s14, s4
 80058e6:	ee27 da21 	vmul.f32	s26, s14, s3
 80058ea:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 80058ee:	ee27 ca01 	vmul.f32	s24, s14, s2
 80058f2:	ee27 3a20 	vmul.f32	s6, s14, s1
 80058f6:	ee67 3a00 	vmul.f32	s7, s14, s0
 80058fa:	ee67 5a08 	vmul.f32	s11, s14, s16
 80058fe:	ee27 fa28 	vmul.f32	s30, s14, s17
 8005902:	ee67 7a24 	vmul.f32	s15, s14, s9
 8005906:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800590a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800590e:	ee6e faa1 	vmul.f32	s31, s29, s3
 8005912:	ee2e da81 	vmul.f32	s26, s29, s2
 8005916:	ed52 1a06 	vldr	s3, [r2, #-24]	@ 0xffffffe8
 800591a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800591e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005922:	ee2e caa0 	vmul.f32	s24, s29, s1
 8005926:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800592a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800592e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005932:	ee6e 3a88 	vmul.f32	s7, s29, s16
 8005936:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800593a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800593e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005942:	ee24 faae 	vmul.f32	s30, s9, s29
 8005946:	ee6e ea82 	vmul.f32	s29, s29, s4
 800594a:	ee2e 7a01 	vmul.f32	s14, s28, s2
 800594e:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8005952:	ed12 1a05 	vldr	s2, [r2, #-20]	@ 0xffffffec
 8005956:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800595a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800595e:	ee2e da20 	vmul.f32	s26, s28, s1
 8005962:	ee2e ca00 	vmul.f32	s24, s28, s0
 8005966:	ee73 9a29 	vadd.f32	s19, s6, s19
 800596a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800596e:	ee2e 3a08 	vmul.f32	s6, s28, s16
 8005972:	ee6e 3a28 	vmul.f32	s7, s28, s17
 8005976:	ee35 6a86 	vadd.f32	s12, s11, s12
 800597a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800597e:	ee64 5a8e 	vmul.f32	s11, s9, s28
 8005982:	ee22 fa0e 	vmul.f32	s30, s4, s28
 8005986:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800598a:	ee2e ea21 	vmul.f32	s28, s28, s3
 800598e:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 8005992:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8005996:	ed52 0a04 	vldr	s1, [r2, #-16]
 800599a:	ee2d da80 	vmul.f32	s26, s27, s0
 800599e:	ee37 ba0b 	vadd.f32	s22, s14, s22
 80059a2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80059a6:	ee73 9a29 	vadd.f32	s19, s6, s19
 80059aa:	ee2d ca88 	vmul.f32	s24, s27, s16
 80059ae:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 80059b2:	ee33 9a89 	vadd.f32	s18, s7, s18
 80059b6:	ee35 6a86 	vadd.f32	s12, s11, s12
 80059ba:	ee64 3aad 	vmul.f32	s7, s9, s27
 80059be:	ee62 5a2d 	vmul.f32	s11, s4, s27
 80059c2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80059c6:	ee7e 7a27 	vadd.f32	s15, s28, s15
 80059ca:	ee21 faad 	vmul.f32	s30, s3, s27
 80059ce:	ee6d da81 	vmul.f32	s27, s27, s2
 80059d2:	ee6c fa80 	vmul.f32	s31, s25, s0
 80059d6:	ee36 ba8b 	vadd.f32	s22, s13, s22
 80059da:	ed12 0a03 	vldr	s0, [r2, #-12]
 80059de:	ee3d da2a 	vadd.f32	s26, s26, s21
 80059e2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80059e6:	ee6c aa88 	vmul.f32	s21, s25, s16
 80059ea:	ee2c caa8 	vmul.f32	s24, s25, s17
 80059ee:	ee73 9a29 	vadd.f32	s19, s6, s19
 80059f2:	ee33 9a89 	vadd.f32	s18, s7, s18
 80059f6:	ee24 3aac 	vmul.f32	s6, s9, s25
 80059fa:	ee62 3a2c 	vmul.f32	s7, s4, s25
 80059fe:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005a02:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8005a06:	ee61 5aac 	vmul.f32	s11, s3, s25
 8005a0a:	ee21 fa2c 	vmul.f32	s30, s2, s25
 8005a0e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8005a12:	ee6c caa0 	vmul.f32	s25, s25, s1
 8005a16:	ee62 ea88 	vmul.f32	s29, s5, s16
 8005a1a:	ee3a da8d 	vadd.f32	s26, s21, s26
 8005a1e:	ed12 8a02 	vldr	s16, [r2, #-8]
 8005a22:	ee62 aaa8 	vmul.f32	s21, s5, s17
 8005a26:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8005a2a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8005a2e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005a32:	ee24 caa2 	vmul.f32	s24, s9, s5
 8005a36:	ee22 3a22 	vmul.f32	s6, s4, s5
 8005a3a:	ee33 9a89 	vadd.f32	s18, s7, s18
 8005a3e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005a42:	ee61 3aa2 	vmul.f32	s7, s3, s5
 8005a46:	ee61 5a22 	vmul.f32	s11, s2, s5
 8005a4a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8005a4e:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8005a52:	ee20 faa2 	vmul.f32	s30, s1, s5
 8005a56:	ee62 2a80 	vmul.f32	s5, s5, s0
 8005a5a:	ee7e fa8b 	vadd.f32	s31, s29, s22
 8005a5e:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8005a62:	ee24 ba28 	vmul.f32	s22, s8, s17
 8005a66:	ee7a aa8d 	vadd.f32	s21, s21, s26
 8005a6a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8005a6e:	ee24 da84 	vmul.f32	s26, s9, s8
 8005a72:	ee22 ca04 	vmul.f32	s24, s4, s8
 8005a76:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005a7a:	ee33 9a89 	vadd.f32	s18, s7, s18
 8005a7e:	ee21 3a84 	vmul.f32	s6, s3, s8
 8005a82:	ee61 3a04 	vmul.f32	s7, s2, s8
 8005a86:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005a8a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8005a8e:	ee60 5a84 	vmul.f32	s11, s1, s8
 8005a92:	ee20 7a04 	vmul.f32	s14, s0, s8
 8005a96:	ee64 6a08 	vmul.f32	s13, s8, s16
 8005a9a:	ed52 8a01 	vldr	s17, [r2, #-4]
 8005a9e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005aa2:	ee33 9a89 	vadd.f32	s18, s7, s18
 8005aa6:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005aaa:	ee37 7a2b 	vadd.f32	s14, s14, s23
 8005aae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005ab2:	ee3b ba2f 	vadd.f32	s22, s22, s31
 8005ab6:	ee64 4a85 	vmul.f32	s9, s9, s10
 8005aba:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8005abe:	ee22 4a05 	vmul.f32	s8, s4, s10
 8005ac2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8005ac6:	ee61 2a85 	vmul.f32	s5, s3, s10
 8005aca:	ee21 3a05 	vmul.f32	s6, s2, s10
 8005ace:	ee60 3a85 	vmul.f32	s7, s1, s10
 8005ad2:	ee60 5a05 	vmul.f32	s11, s0, s10
 8005ad6:	ee68 ba05 	vmul.f32	s23, s16, s10
 8005ada:	ee65 7a28 	vmul.f32	s15, s10, s17
 8005ade:	3320      	adds	r3, #32
 8005ae0:	429f      	cmp	r7, r3
 8005ae2:	ee34 ba8b 	vadd.f32	s22, s9, s22
 8005ae6:	ee74 aa2a 	vadd.f32	s21, s8, s21
 8005aea:	ee32 aa8a 	vadd.f32	s20, s5, s20
 8005aee:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005af2:	ee33 9a89 	vadd.f32	s18, s7, s18
 8005af6:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005afa:	ee7b ba87 	vadd.f32	s23, s23, s14
 8005afe:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8005b02:	f102 0220 	add.w	r2, r2, #32
 8005b06:	f47f aeda 	bne.w	80058be <arm_fir_f32+0x102>
 8005b0a:	eb0b 0208 	add.w	r2, fp, r8
 8005b0e:	46cb      	mov	fp, r9
 8005b10:	b3a0      	cbz	r0, 8005b7c <arm_fir_f32+0x3c0>
 8005b12:	4603      	mov	r3, r0
 8005b14:	ecfb 7a01 	vldmia	fp!, {s15}
 8005b18:	ecf2 5a01 	vldmia	r2!, {s11}
 8005b1c:	ee27 2a82 	vmul.f32	s4, s15, s4
 8005b20:	ee67 2aa1 	vmul.f32	s5, s15, s3
 8005b24:	ee27 3a81 	vmul.f32	s6, s15, s2
 8005b28:	ee67 3aa0 	vmul.f32	s7, s15, s1
 8005b2c:	ee27 4a80 	vmul.f32	s8, s15, s0
 8005b30:	ee67 4a88 	vmul.f32	s9, s15, s16
 8005b34:	ee27 5aa8 	vmul.f32	s10, s15, s17
 8005b38:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	ee3b ba02 	vadd.f32	s22, s22, s4
 8005b42:	ee7a aaa2 	vadd.f32	s21, s21, s5
 8005b46:	eeb0 2a61 	vmov.f32	s4, s3
 8005b4a:	ee3a aa03 	vadd.f32	s20, s20, s6
 8005b4e:	eef0 1a41 	vmov.f32	s3, s2
 8005b52:	ee79 9aa3 	vadd.f32	s19, s19, s7
 8005b56:	eeb0 1a60 	vmov.f32	s2, s1
 8005b5a:	ee39 9a04 	vadd.f32	s18, s18, s8
 8005b5e:	eef0 0a40 	vmov.f32	s1, s0
 8005b62:	ee36 6a24 	vadd.f32	s12, s12, s9
 8005b66:	eeb0 0a48 	vmov.f32	s0, s16
 8005b6a:	ee7b ba85 	vadd.f32	s23, s23, s10
 8005b6e:	eeb0 8a68 	vmov.f32	s16, s17
 8005b72:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005b76:	eef0 8a65 	vmov.f32	s17, s11
 8005b7a:	d1cb      	bne.n	8005b14 <arm_fir_f32+0x358>
 8005b7c:	f1bc 0c01 	subs.w	ip, ip, #1
 8005b80:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 8005b84:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 8005b88:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 8005b8c:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 8005b90:	ed04 9a04 	vstr	s18, [r4, #-16]
 8005b94:	ed04 6a03 	vstr	s12, [r4, #-12]
 8005b98:	ed44 ba02 	vstr	s23, [r4, #-8]
 8005b9c:	ed44 6a01 	vstr	s13, [r4, #-4]
 8005ba0:	f106 0620 	add.w	r6, r6, #32
 8005ba4:	f105 0520 	add.w	r5, r5, #32
 8005ba8:	f104 0420 	add.w	r4, r4, #32
 8005bac:	468b      	mov	fp, r1
 8005bae:	f47f ae3f 	bne.w	8005830 <arm_fir_f32+0x74>
 8005bb2:	9b01      	ldr	r3, [sp, #4]
 8005bb4:	9800      	ldr	r0, [sp, #0]
 8005bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bbc:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 8005bc0:	015b      	lsls	r3, r3, #5
 8005bc2:	4418      	add	r0, r3
 8005bc4:	4419      	add	r1, r3
 8005bc6:	441a      	add	r2, r3
 8005bc8:	4499      	add	r9, r3
 8005bca:	9000      	str	r0, [sp, #0]
 8005bcc:	9b04      	ldr	r3, [sp, #16]
 8005bce:	f013 0707 	ands.w	r7, r3, #7
 8005bd2:	d020      	beq.n	8005c16 <arm_fir_f32+0x45a>
 8005bd4:	00bf      	lsls	r7, r7, #2
 8005bd6:	9e00      	ldr	r6, [sp, #0]
 8005bd8:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005bdc:	eb01 0c07 	add.w	ip, r1, r7
 8005be0:	464d      	mov	r5, r9
 8005be2:	f851 3b04 	ldr.w	r3, [r1], #4
 8005be6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005c64 <arm_fir_f32+0x4a8>
 8005bea:	f846 3b04 	str.w	r3, [r6], #4
 8005bee:	4674      	mov	r4, lr
 8005bf0:	4643      	mov	r3, r8
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	ecf0 7a01 	vldmia	r0!, {s15}
 8005bf8:	ecf4 6a01 	vldmia	r4!, {s13}
 8005bfc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005c00:	3b01      	subs	r3, #1
 8005c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c06:	d1f5      	bne.n	8005bf4 <arm_fir_f32+0x438>
 8005c08:	4561      	cmp	r1, ip
 8005c0a:	eca2 7a01 	vstmia	r2!, {s14}
 8005c0e:	f105 0504 	add.w	r5, r5, #4
 8005c12:	d1e6      	bne.n	8005be2 <arm_fir_f32+0x426>
 8005c14:	44b9      	add	r9, r7
 8005c16:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	ea5f 0498 	movs.w	r4, r8, lsr #2
 8005c20:	685d      	ldr	r5, [r3, #4]
 8005c22:	d021      	beq.n	8005c68 <arm_fir_f32+0x4ac>
 8005c24:	f109 0210 	add.w	r2, r9, #16
 8005c28:	f105 0310 	add.w	r3, r5, #16
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8005c32:	f843 0c10 	str.w	r0, [r3, #-16]
 8005c36:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8005c3a:	f843 0c0c 	str.w	r0, [r3, #-12]
 8005c3e:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8005c42:	f843 0c08 	str.w	r0, [r3, #-8]
 8005c46:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8005c4a:	f843 0c04 	str.w	r0, [r3, #-4]
 8005c4e:	3901      	subs	r1, #1
 8005c50:	f102 0210 	add.w	r2, r2, #16
 8005c54:	f103 0310 	add.w	r3, r3, #16
 8005c58:	d1e9      	bne.n	8005c2e <arm_fir_f32+0x472>
 8005c5a:	0124      	lsls	r4, r4, #4
 8005c5c:	44a1      	add	r9, r4
 8005c5e:	4425      	add	r5, r4
 8005c60:	e002      	b.n	8005c68 <arm_fir_f32+0x4ac>
 8005c62:	bf00      	nop
 8005c64:	00000000 	.word	0x00000000
 8005c68:	f018 0803 	ands.w	r8, r8, #3
 8005c6c:	d00e      	beq.n	8005c8c <arm_fir_f32+0x4d0>
 8005c6e:	f8d9 3000 	ldr.w	r3, [r9]
 8005c72:	602b      	str	r3, [r5, #0]
 8005c74:	f1b8 0801 	subs.w	r8, r8, #1
 8005c78:	d008      	beq.n	8005c8c <arm_fir_f32+0x4d0>
 8005c7a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005c7e:	606b      	str	r3, [r5, #4]
 8005c80:	f1b8 0f01 	cmp.w	r8, #1
 8005c84:	bf1c      	itt	ne
 8005c86:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 8005c8a:	60ab      	strne	r3, [r5, #8]
 8005c8c:	b00b      	add	sp, #44	@ 0x2c
 8005c8e:	ecbd 8b10 	vpop	{d8-d15}
 8005c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c96:	eef0 ba66 	vmov.f32	s23, s13
 8005c9a:	eeb0 6a66 	vmov.f32	s12, s13
 8005c9e:	eeb0 9a66 	vmov.f32	s18, s13
 8005ca2:	eef0 9a66 	vmov.f32	s19, s13
 8005ca6:	eeb0 aa66 	vmov.f32	s20, s13
 8005caa:	eef0 aa66 	vmov.f32	s21, s13
 8005cae:	eeb0 ba66 	vmov.f32	s22, s13
 8005cb2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005cb6:	f102 0120 	add.w	r1, r2, #32
 8005cba:	e729      	b.n	8005b10 <arm_fir_f32+0x354>

08005cbc <memset>:
 8005cbc:	4402      	add	r2, r0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d100      	bne.n	8005cc6 <memset+0xa>
 8005cc4:	4770      	bx	lr
 8005cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cca:	e7f9      	b.n	8005cc0 <memset+0x4>

08005ccc <__libc_init_array>:
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	4d0d      	ldr	r5, [pc, #52]	@ (8005d04 <__libc_init_array+0x38>)
 8005cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8005d08 <__libc_init_array+0x3c>)
 8005cd2:	1b64      	subs	r4, r4, r5
 8005cd4:	10a4      	asrs	r4, r4, #2
 8005cd6:	2600      	movs	r6, #0
 8005cd8:	42a6      	cmp	r6, r4
 8005cda:	d109      	bne.n	8005cf0 <__libc_init_array+0x24>
 8005cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8005d0c <__libc_init_array+0x40>)
 8005cde:	4c0c      	ldr	r4, [pc, #48]	@ (8005d10 <__libc_init_array+0x44>)
 8005ce0:	f000 f818 	bl	8005d14 <_init>
 8005ce4:	1b64      	subs	r4, r4, r5
 8005ce6:	10a4      	asrs	r4, r4, #2
 8005ce8:	2600      	movs	r6, #0
 8005cea:	42a6      	cmp	r6, r4
 8005cec:	d105      	bne.n	8005cfa <__libc_init_array+0x2e>
 8005cee:	bd70      	pop	{r4, r5, r6, pc}
 8005cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf4:	4798      	blx	r3
 8005cf6:	3601      	adds	r6, #1
 8005cf8:	e7ee      	b.n	8005cd8 <__libc_init_array+0xc>
 8005cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cfe:	4798      	blx	r3
 8005d00:	3601      	adds	r6, #1
 8005d02:	e7f2      	b.n	8005cea <__libc_init_array+0x1e>
 8005d04:	08005e90 	.word	0x08005e90
 8005d08:	08005e90 	.word	0x08005e90
 8005d0c:	08005e90 	.word	0x08005e90
 8005d10:	08005e94 	.word	0x08005e94

08005d14 <_init>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr

08005d20 <_fini>:
 8005d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d22:	bf00      	nop
 8005d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d26:	bc08      	pop	{r3}
 8005d28:	469e      	mov	lr, r3
 8005d2a:	4770      	bx	lr
