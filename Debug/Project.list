
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c1c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08004de0  08004de0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f2c  08004f2c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f34  08004f34  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f38  08004f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  20000014  08004f50  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  08004f50  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170bb  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef1  00000000  00000000  000370ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00039ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  0003b1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a0f  00000000  00000000  0003c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172dc  00000000  00000000  00060cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2936  00000000  00000000  00077fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0015a8e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c9c  00000000  00000000  0015a9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000d0a  00000000  00000000  0015f64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004dc8 	.word	0x08004dc8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08004dc8 	.word	0x08004dc8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 031c 	add.w	r3, r7, #28
 8000512:	2234      	movs	r2, #52	; 0x34
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f004 fc4e 	bl	8004db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 0308 	add.w	r3, r7, #8
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <SystemClock_Config+0xd0>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a28      	ldr	r2, [pc, #160]	; (80005d8 <SystemClock_Config+0xd0>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <SystemClock_Config+0xd0>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	603b      	str	r3, [r7, #0]
 800054c:	4b23      	ldr	r3, [pc, #140]	; (80005dc <SystemClock_Config+0xd4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a22      	ldr	r2, [pc, #136]	; (80005dc <SystemClock_Config+0xd4>)
 8000552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b20      	ldr	r3, [pc, #128]	; (80005dc <SystemClock_Config+0xd4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000560:	603b      	str	r3, [r7, #0]
 8000562:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000568:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800056c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000580:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800058a:	2302      	movs	r3, #2
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fdd6 	bl	8003144 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800059e:	f000 fa57 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80005a6:	2303      	movs	r3, #3
 80005a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	2105      	movs	r1, #5
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 ff4b 	bl	800245c <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80005cc:	f000 fa40 	bl	8000a50 <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	; 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC3_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80005f2:	4b21      	ldr	r3, [pc, #132]	; (8000678 <MX_ADC3_Init+0x98>)
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <MX_ADC3_Init+0x9c>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <MX_ADC3_Init+0x98>)
 80005fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005fe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_ADC3_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_ADC3_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_ADC3_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_ADC3_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_ADC3_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_ADC3_Init+0x98>)
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <MX_ADC3_Init+0xa0>)
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_ADC3_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_ADC3_Init+0x98>)
 800062e:	2201      	movs	r2, #1
 8000630:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_ADC3_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_ADC3_Init+0x98>)
 800063c:	2201      	movs	r2, #1
 800063e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <MX_ADC3_Init+0x98>)
 8000642:	f000 feff 	bl	8001444 <HAL_ADC_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800064c:	f000 fa00 	bl	8000a50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000650:	230f      	movs	r3, #15
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000654:	2301      	movs	r3, #1
 8000656:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_ADC3_Init+0x98>)
 8000662:	f000 ff33 	bl	80014cc <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800066c:	f000 f9f0 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000030 	.word	0x20000030
 800067c:	40012200 	.word	0x40012200
 8000680:	0f000001 	.word	0x0f000001

08000684 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800068a:	463b      	mov	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_DAC_Init+0x4c>)
 8000694:	4a0f      	ldr	r2, [pc, #60]	; (80006d4 <MX_DAC_Init+0x50>)
 8000696:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <MX_DAC_Init+0x4c>)
 800069a:	f001 fa56 	bl	8001b4a <HAL_DAC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006a4:	f000 f9d4 	bl	8000a50 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	4619      	mov	r1, r3
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <MX_DAC_Init+0x4c>)
 80006b8:	f001 fb44 	bl	8001d44 <HAL_DAC_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80006c2:	f000 f9c5 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000078 	.word	0x20000078
 80006d4:	40007400 	.word	0x40007400

080006d8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM7_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006de:	463b      	mov	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_TIM7_Init+0x64>)
 80006e8:	4a15      	ldr	r2, [pc, #84]	; (8000740 <MX_TIM7_Init+0x68>)
 80006ea:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_TIM7_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_TIM7_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1750-1;
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_TIM7_Init+0x64>)
 80006fa:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80006fe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_TIM7_Init+0x64>)
 8000702:	2280      	movs	r2, #128	; 0x80
 8000704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000706:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_TIM7_Init+0x64>)
 8000708:	f002 ffba 	bl	8003680 <HAL_TIM_Base_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000712:	f000 f99d 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_TIM7_Init+0x64>)
 8000724:	f003 fa46 	bl	8003bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800072e:	f000 f98f 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000d4 	.word	0x200000d4
 8000740:	40001400 	.word	0x40001400

08000744 <MX_TIM6_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM6_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim6.Instance = TIM6;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_TIM6_Init+0x64>)
 8000754:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_TIM6_Init+0x68>)
 8000756:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400 - 1;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_TIM6_Init+0x64>)
 800075a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800075e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_TIM6_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;//1750-1;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_TIM6_Init+0x64>)
 8000768:	f240 32e7 	movw	r2, #999	; 0x3e7
 800076c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_TIM6_Init+0x64>)
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <MX_TIM6_Init+0x64>)
 8000776:	f002 ff83 	bl	8003680 <HAL_TIM_Base_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000780:	f000 f966 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000784:	2300      	movs	r3, #0
 8000786:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_TIM6_Init+0x64>)
 8000792:	f003 fa0f 	bl	8003bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800079c:	f000 f958 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000008c 	.word	0x2000008c
 80007ac:	40001000 	.word	0x40001000

080007b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART3_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007e8:	f003 fa74 	bl	8003cd4 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f92d 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000011c 	.word	0x2000011c
 8000800:	40004800 	.word	0x40004800

08000804 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800080e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2206      	movs	r2, #6
 8000814:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	2202      	movs	r2, #2
 800081a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000824:	2202      	movs	r2, #2
 8000826:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	2201      	movs	r2, #1
 800082c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083c:	2201      	movs	r2, #1
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000848:	f001 fcbf 	bl	80021ca <HAL_PCD_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 f8fd 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000160 	.word	0x20000160

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	4b70      	ldr	r3, [pc, #448]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a6f      	ldr	r2, [pc, #444]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b6d      	ldr	r3, [pc, #436]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	4b69      	ldr	r3, [pc, #420]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a68      	ldr	r2, [pc, #416]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 800089c:	f043 0320 	orr.w	r3, r3, #32
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b66      	ldr	r3, [pc, #408]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b62      	ldr	r3, [pc, #392]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a61      	ldr	r2, [pc, #388]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b5f      	ldr	r3, [pc, #380]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b5b      	ldr	r3, [pc, #364]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a5a      	ldr	r2, [pc, #360]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b58      	ldr	r3, [pc, #352]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	4b54      	ldr	r3, [pc, #336]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a53      	ldr	r2, [pc, #332]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b51      	ldr	r3, [pc, #324]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b4d      	ldr	r3, [pc, #308]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a4c      	ldr	r2, [pc, #304]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b4a      	ldr	r3, [pc, #296]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b46      	ldr	r3, [pc, #280]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a45      	ldr	r2, [pc, #276]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b43      	ldr	r3, [pc, #268]	; (8000a3c <MX_GPIO_Init+0x1dc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000940:	483f      	ldr	r0, [pc, #252]	; (8000a40 <MX_GPIO_Init+0x1e0>)
 8000942:	f001 fc05 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2140      	movs	r1, #64	; 0x40
 800094a:	483e      	ldr	r0, [pc, #248]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 800094c:	f001 fc00 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000956:	483c      	ldr	r0, [pc, #240]	; (8000a48 <MX_GPIO_Init+0x1e8>)
 8000958:	f001 fbfa 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800095c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4835      	ldr	r0, [pc, #212]	; (8000a48 <MX_GPIO_Init+0x1e8>)
 8000974:	f001 fa40 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000978:	f244 0381 	movw	r3, #16513	; 0x4081
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	482b      	ldr	r0, [pc, #172]	; (8000a40 <MX_GPIO_Init+0x1e0>)
 8000992:	f001 fa31 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000996:	2340      	movs	r3, #64	; 0x40
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4825      	ldr	r0, [pc, #148]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 80009ae:	f001 fa23 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	481f      	ldr	r0, [pc, #124]	; (8000a44 <MX_GPIO_Init+0x1e4>)
 80009c6:	f001 fa17 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 80009ca:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4819      	ldr	r0, [pc, #100]	; (8000a48 <MX_GPIO_Init+0x1e8>)
 80009e4:	f001 fa08 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin;
 80009e8:	23f0      	movs	r3, #240	; 0xf0
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009f2:	2302      	movs	r3, #2
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MX_GPIO_Init+0x1ec>)
 80009fe:	f001 f9fb 	bl	8001df8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	200a      	movs	r0, #10
 8000a08:	f001 f869 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a0c:	200a      	movs	r0, #10
 8000a0e:	f001 f882 	bl	8001b16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2017      	movs	r0, #23
 8000a18:	f001 f861 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a1c:	2017      	movs	r0, #23
 8000a1e:	f001 f87a 	bl	8001b16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2028      	movs	r0, #40	; 0x28
 8000a28:	f001 f859 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a2c:	2028      	movs	r0, #40	; 0x28
 8000a2e:	f001 f872 	bl	8001b16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	; 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40021800 	.word	0x40021800
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020c00 	.word	0x40020c00

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	4801      	ldr	r0, [pc, #4]	; (8000a64 <Error_Handler+0x14>)
 8000a5e:	f001 fb77 	bl	8002150 <HAL_GPIO_WritePin>
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <Error_Handler+0x12>
 8000a64:	40020400 	.word	0x40020400

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6e:	f000 fc53 	bl	8001318 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Call FIR init function to initialize the instance structure. */
  arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 8000a72:	4b6f      	ldr	r3, [pc, #444]	; (8000c30 <main+0x1c8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f107 0008 	add.w	r0, r7, #8
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	4b6d      	ldr	r3, [pc, #436]	; (8000c34 <main+0x1cc>)
 8000a7e:	4a6e      	ldr	r2, [pc, #440]	; (8000c38 <main+0x1d0>)
 8000a80:	211d      	movs	r1, #29
 8000a82:	f003 fee5 	bl	8004850 <arm_fir_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f7ff fd3f 	bl	8000508 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  float32_t output = 0;
 8000a8a:	f04f 0300 	mov.w	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  float index = 0;
 8000a90:	f04f 0300 	mov.w	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
//  int32_t incr = 1;
  float incr = 1;
 8000a96:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000a9a:	61bb      	str	r3, [r7, #24]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9c:	f7ff fee0 	bl	8000860 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000aa0:	f7ff fe86 	bl	80007b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000aa4:	f7ff feae 	bl	8000804 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8000aa8:	f7ff fdec 	bl	8000684 <MX_DAC_Init>
  MX_TIM7_Init();
 8000aac:	f7ff fe14 	bl	80006d8 <MX_TIM7_Init>
  MX_TIM6_Init();
 8000ab0:	f7ff fe48 	bl	8000744 <MX_TIM6_Init>
  MX_ADC3_Init();
 8000ab4:	f7ff fd94 	bl	80005e0 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  current_row = 0;
 8000ab8:	4b60      	ldr	r3, [pc, #384]	; (8000c3c <main+0x1d4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac4:	485e      	ldr	r0, [pc, #376]	; (8000c40 <main+0x1d8>)
 8000ac6:	f001 fb43 	bl	8002150 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad0:	485b      	ldr	r0, [pc, #364]	; (8000c40 <main+0x1d8>)
 8000ad2:	f001 fb3d 	bl	8002150 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000adc:	4858      	ldr	r0, [pc, #352]	; (8000c40 <main+0x1d8>)
 8000ade:	f001 fb37 	bl	8002150 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae8:	4855      	ldr	r0, [pc, #340]	; (8000c40 <main+0x1d8>)
 8000aea:	f001 fb31 	bl	8002150 <HAL_GPIO_WritePin>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000aee:	2100      	movs	r1, #0
 8000af0:	4854      	ldr	r0, [pc, #336]	; (8000c44 <main+0x1dc>)
 8000af2:	f001 f84c 	bl	8001b8e <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8000af6:	4854      	ldr	r0, [pc, #336]	; (8000c48 <main+0x1e0>)
 8000af8:	f002 fe12 	bl	8003720 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000afc:	4853      	ldr	r0, [pc, #332]	; (8000c4c <main+0x1e4>)
 8000afe:	f002 fe0f 	bl	8003720 <HAL_TIM_Base_Start_IT>

	float32_t  *inputF32;
	inputF32 = &sine[0];
 8000b02:	4b53      	ldr	r3, [pc, #332]	; (8000c50 <main+0x1e8>)
 8000b04:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (keypad_poll){
 8000b06:	4b53      	ldr	r3, [pc, #332]	; (8000c54 <main+0x1ec>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d007      	beq.n	8000b1e <main+0xb6>
		  keypad_poll = 0;
 8000b0e:	4b51      	ldr	r3, [pc, #324]	; (8000c54 <main+0x1ec>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
		  current_row = 0;
 8000b14:	4b49      	ldr	r3, [pc, #292]	; (8000c3c <main+0x1d4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
	  	  poll_keypad();
 8000b1a:	f000 f8ab 	bl	8000c74 <poll_keypad>
	  }

	  if (key_pressed){
 8000b1e:	4b4e      	ldr	r3, [pc, #312]	; (8000c58 <main+0x1f0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d025      	beq.n	8000b72 <main+0x10a>
		key_pressed = 0;
 8000b26:	4b4c      	ldr	r3, [pc, #304]	; (8000c58 <main+0x1f0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
		if ((current_row - 1 == 2) && (current_col == 1)){
 8000b2c:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <main+0x1d4>)
 8000b2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d10b      	bne.n	8000b4e <main+0xe6>
 8000b36:	4b49      	ldr	r3, [pc, #292]	; (8000c5c <main+0x1f4>)
 8000b38:	f993 3000 	ldrsb.w	r3, [r3]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d106      	bne.n	8000b4e <main+0xe6>
			// double the frequency
			incr = incr*2;
 8000b40:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000b48:	edc7 7a06 	vstr	s15, [r7, #24]
 8000b4c:	e011      	b.n	8000b72 <main+0x10a>
		}else if ((current_row - 1 == 2) && (current_col == 0)){
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <main+0x1d4>)
 8000b50:	f993 3000 	ldrsb.w	r3, [r3]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d10c      	bne.n	8000b72 <main+0x10a>
 8000b58:	4b40      	ldr	r3, [pc, #256]	; (8000c5c <main+0x1f4>)
 8000b5a:	f993 3000 	ldrsb.w	r3, [r3]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d107      	bne.n	8000b72 <main+0x10a>
			// half the frequency (haven't exactly figured out how to go below 1 kHz)
//			if (incr > 1){
//				incr = incr >> 1;
//			}
			incr = incr/2;
 8000b62:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b66:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b6e:	edc7 7a06 	vstr	s15, [r7, #24]
		}
	  }

	if (new_sample){
 8000b72:	4b3b      	ldr	r3, [pc, #236]	; (8000c60 <main+0x1f8>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0c5      	beq.n	8000b06 <main+0x9e>
	  new_sample = 0;
 8000b7a:	4b39      	ldr	r3, [pc, #228]	; (8000c60 <main+0x1f8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]

	  if (filter_en){
 8000b80:	4b38      	ldr	r3, [pc, #224]	; (8000c64 <main+0x1fc>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d019      	beq.n	8000bbc <main+0x154>
		  arm_fir_f32(&S, inputF32 + (uint32_t)(index)%SAMPLES, &output, blockSize);
 8000b88:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b90:	ee17 1a90 	vmov	r1, s15
 8000b94:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <main+0x200>)
 8000b96:	fba3 2301 	umull	r2, r3, r3, r1
 8000b9a:	095a      	lsrs	r2, r3, #5
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	1aca      	subs	r2, r1, r3
 8000ba6:	0093      	lsls	r3, r2, #2
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	18d1      	adds	r1, r2, r3
 8000bac:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <main+0x1c8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	1d3a      	adds	r2, r7, #4
 8000bb2:	f107 0008 	add.w	r0, r7, #8
 8000bb6:	f003 fe5b 	bl	8004870 <arm_fir_f32>
 8000bba:	e013      	b.n	8000be4 <main+0x17c>
	  }else{
		  output = sine[(uint32_t)(index)%SAMPLES];
 8000bbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8000bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bc4:	ee17 1a90 	vmov	r1, s15
 8000bc8:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <main+0x200>)
 8000bca:	fba3 2301 	umull	r2, r3, r3, r1
 8000bce:	095a      	lsrs	r2, r3, #5
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	4413      	add	r3, r2
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	1aca      	subs	r2, r1, r3
 8000bda:	491d      	ldr	r1, [pc, #116]	; (8000c50 <main+0x1e8>)
 8000bdc:	0093      	lsls	r3, r2, #2
 8000bde:	440b      	add	r3, r1
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	607b      	str	r3, [r7, #4]
	  }

	  output *= 1024;
 8000be4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000be8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000c6c <main+0x204>
 8000bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf0:	edc7 7a01 	vstr	s15, [r7, #4]
	  output += 2048;
 8000bf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bf8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000c70 <main+0x208>
 8000bfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c00:	edc7 7a01 	vstr	s15, [r7, #4]
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint16_t)output);
 8000c04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c0c:	ee17 3a90 	vmov	r3, s15
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <main+0x1dc>)
 8000c18:	f001 f865 	bl	8001ce6 <HAL_DAC_SetValue>

	  index += incr;
 8000c1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c20:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c28:	edc7 7a07 	vstr	s15, [r7, #28]
	  if (keypad_poll){
 8000c2c:	e76b      	b.n	8000b06 <main+0x9e>
 8000c2e:	bf00      	nop
 8000c30:	20000004 	.word	0x20000004
 8000c34:	20000670 	.word	0x20000670
 8000c38:	08004ea0 	.word	0x08004ea0
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	40020800 	.word	0x40020800
 8000c44:	20000078 	.word	0x20000078
 8000c48:	200000d4 	.word	0x200000d4
 8000c4c:	2000008c 	.word	0x2000008c
 8000c50:	08004de0 	.word	0x08004de0
 8000c54:	2000066c 	.word	0x2000066c
 8000c58:	2000066d 	.word	0x2000066d
 8000c5c:	20000001 	.word	0x20000001
 8000c60:	2000066f 	.word	0x2000066f
 8000c64:	2000066e 	.word	0x2000066e
 8000c68:	aaaaaaab 	.word	0xaaaaaaab
 8000c6c:	44800000 	.word	0x44800000
 8000c70:	45000000 	.word	0x45000000

08000c74 <poll_keypad>:
	}
  }
}

void poll_keypad(void){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	while (!key_pressed && (current_row < 4)) {
 8000c78:	e05b      	b.n	8000d32 <poll_keypad+0xbe>
		if (current_row == 0) {
 8000c7a:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <poll_keypad+0xd4>)
 8000c7c:	f993 3000 	ldrsb.w	r3, [r3]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d10f      	bne.n	8000ca4 <poll_keypad+0x30>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c8a:	4830      	ldr	r0, [pc, #192]	; (8000d4c <poll_keypad+0xd8>)
 8000c8c:	f001 fa60 	bl	8002150 <HAL_GPIO_WritePin>
			HAL_Delay(0);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f000 fbb3 	bl	80013fc <HAL_Delay>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9c:	482b      	ldr	r0, [pc, #172]	; (8000d4c <poll_keypad+0xd8>)
 8000c9e:	f001 fa57 	bl	8002150 <HAL_GPIO_WritePin>
 8000ca2:	e03d      	b.n	8000d20 <poll_keypad+0xac>
		} else if (current_row == 1) {
 8000ca4:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <poll_keypad+0xd4>)
 8000ca6:	f993 3000 	ldrsb.w	r3, [r3]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d10f      	bne.n	8000cce <poll_keypad+0x5a>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb4:	4825      	ldr	r0, [pc, #148]	; (8000d4c <poll_keypad+0xd8>)
 8000cb6:	f001 fa4b 	bl	8002150 <HAL_GPIO_WritePin>
			HAL_Delay(0);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 fb9e 	bl	80013fc <HAL_Delay>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc6:	4821      	ldr	r0, [pc, #132]	; (8000d4c <poll_keypad+0xd8>)
 8000cc8:	f001 fa42 	bl	8002150 <HAL_GPIO_WritePin>
 8000ccc:	e028      	b.n	8000d20 <poll_keypad+0xac>
		} else if (current_row == 2) {
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <poll_keypad+0xd4>)
 8000cd0:	f993 3000 	ldrsb.w	r3, [r3]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d10f      	bne.n	8000cf8 <poll_keypad+0x84>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cde:	481b      	ldr	r0, [pc, #108]	; (8000d4c <poll_keypad+0xd8>)
 8000ce0:	f001 fa36 	bl	8002150 <HAL_GPIO_WritePin>
			HAL_Delay(0);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f000 fb89 	bl	80013fc <HAL_Delay>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf0:	4816      	ldr	r0, [pc, #88]	; (8000d4c <poll_keypad+0xd8>)
 8000cf2:	f001 fa2d 	bl	8002150 <HAL_GPIO_WritePin>
 8000cf6:	e013      	b.n	8000d20 <poll_keypad+0xac>
		} else if (current_row == 3) {
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <poll_keypad+0xd4>)
 8000cfa:	f993 3000 	ldrsb.w	r3, [r3]
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d10e      	bne.n	8000d20 <poll_keypad+0xac>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d08:	4810      	ldr	r0, [pc, #64]	; (8000d4c <poll_keypad+0xd8>)
 8000d0a:	f001 fa21 	bl	8002150 <HAL_GPIO_WritePin>
			HAL_Delay(0);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f000 fb74 	bl	80013fc <HAL_Delay>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d1a:	480c      	ldr	r0, [pc, #48]	; (8000d4c <poll_keypad+0xd8>)
 8000d1c:	f001 fa18 	bl	8002150 <HAL_GPIO_WritePin>
		}

		current_row++;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <poll_keypad+0xd4>)
 8000d22:	f993 3000 	ldrsb.w	r3, [r3]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	3301      	adds	r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	b25a      	sxtb	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <poll_keypad+0xd4>)
 8000d30:	701a      	strb	r2, [r3, #0]
	while (!key_pressed && (current_row < 4)) {
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <poll_keypad+0xdc>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d104      	bne.n	8000d44 <poll_keypad+0xd0>
 8000d3a:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <poll_keypad+0xd4>)
 8000d3c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	dd9a      	ble.n	8000c7a <poll_keypad+0x6>
	}
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	2000066d 	.word	0x2000066d

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a17      	ldr	r2, [pc, #92]	; (8000e20 <HAL_ADC_MspInit+0x7c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d127      	bne.n	8000e16 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_ADC_MspInit+0x80>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <HAL_ADC_MspInit+0x80>)
 8000dd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <HAL_ADC_MspInit+0x80>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_ADC_MspInit+0x80>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_ADC_MspInit+0x80>)
 8000dec:	f043 0320 	orr.w	r3, r3, #32
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_ADC_MspInit+0x80>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0320 	and.w	r3, r3, #32
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF5     ------> ADC3_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dfe:	2320      	movs	r3, #32
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e02:	2303      	movs	r3, #3
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_ADC_MspInit+0x84>)
 8000e12:	f000 fff1 	bl	8001df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40012200 	.word	0x40012200
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40021400 	.word	0x40021400

08000e2c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <HAL_DAC_MspInit+0x8c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d12f      	bne.n	8000eae <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_DAC_MspInit+0x90>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_DAC_MspInit+0x90>)
 8000e58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_DAC_MspInit+0x90>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <HAL_DAC_MspInit+0x90>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_DAC_MspInit+0x90>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_DAC_MspInit+0x90>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e86:	2310      	movs	r3, #16
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <HAL_DAC_MspInit+0x94>)
 8000e9a:	f000 ffad 	bl	8001df8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2036      	movs	r0, #54	; 0x36
 8000ea4:	f000 fe1b 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ea8:	2036      	movs	r0, #54	; 0x36
 8000eaa:	f000 fe34 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40007400 	.word	0x40007400
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <HAL_TIM_Base_MspInit+0x80>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d116      	bne.n	8000f04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_TIM_Base_MspInit+0x84>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a1a      	ldr	r2, [pc, #104]	; (8000f48 <HAL_TIM_Base_MspInit+0x84>)
 8000ee0:	f043 0310 	orr.w	r3, r3, #16
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <HAL_TIM_Base_MspInit+0x84>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2036      	movs	r0, #54	; 0x36
 8000ef8:	f000 fdf1 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000efc:	2036      	movs	r0, #54	; 0x36
 8000efe:	f000 fe0a 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f02:	e01a      	b.n	8000f3a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <HAL_TIM_Base_MspInit+0x88>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d115      	bne.n	8000f3a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <HAL_TIM_Base_MspInit+0x84>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <HAL_TIM_Base_MspInit+0x84>)
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_TIM_Base_MspInit+0x84>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f003 0320 	and.w	r3, r3, #32
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2037      	movs	r0, #55	; 0x37
 8000f30:	f000 fdd5 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f34:	2037      	movs	r0, #55	; 0x37
 8000f36:	f000 fdee 	bl	8001b16 <HAL_NVIC_EnableIRQ>
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40001000 	.word	0x40001000
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40001400 	.word	0x40001400

08000f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <HAL_UART_MspInit+0x84>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d12c      	bne.n	8000fcc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_UART_MspInit+0x88>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <HAL_UART_MspInit+0x88>)
 8000f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_UART_MspInit+0x88>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_UART_MspInit+0x88>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <HAL_UART_MspInit+0x88>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_UART_MspInit+0x88>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000faa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <HAL_UART_MspInit+0x8c>)
 8000fc8:	f000 ff16 	bl	8001df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40004800 	.word	0x40004800
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020c00 	.word	0x40020c00

08000fe0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0a0      	sub	sp, #128	; 0x80
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	225c      	movs	r2, #92	; 0x5c
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f003 fed9 	bl	8004db8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800100e:	d14e      	bne.n	80010ae <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001014:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001016:	2300      	movs	r3, #0
 8001018:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fb36 	bl	8002690 <HAL_RCCEx_PeriphCLKConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800102a:	f7ff fd11 	bl	8000a50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <HAL_PCD_MspInit+0xd8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a20      	ldr	r2, [pc, #128]	; (80010b8 <HAL_PCD_MspInit+0xd8>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <HAL_PCD_MspInit+0xd8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800104a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800104e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800105c:	230a      	movs	r3, #10
 800105e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001064:	4619      	mov	r1, r3
 8001066:	4815      	ldr	r0, [pc, #84]	; (80010bc <HAL_PCD_MspInit+0xdc>)
 8001068:	f000 fec6 	bl	8001df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800106c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001070:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001072:	2300      	movs	r3, #0
 8001074:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800107e:	4619      	mov	r1, r3
 8001080:	480e      	ldr	r0, [pc, #56]	; (80010bc <HAL_PCD_MspInit+0xdc>)
 8001082:	f000 feb9 	bl	8001df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <HAL_PCD_MspInit+0xd8>)
 8001088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <HAL_PCD_MspInit+0xd8>)
 800108c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001090:	6353      	str	r3, [r2, #52]	; 0x34
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_PCD_MspInit+0xd8>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_PCD_MspInit+0xd8>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_PCD_MspInit+0xd8>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3780      	adds	r7, #128	; 0x80
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000

080010c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <NMI_Handler+0x4>

080010c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <MemManage_Handler+0x4>

080010d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <UsageFault_Handler+0x4>

080010de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110c:	f000 f956 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	key_pressed = 1;
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <EXTI4_IRQHandler+0x3c>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]

	if (__HAL_GPIO_EXTI_GET_FLAG(COL0_Pin)){
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <EXTI4_IRQHandler+0x40>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00a      	beq.n	8001140 <EXTI4_IRQHandler+0x2c>
		current_col  = 0;
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <EXTI4_IRQHandler+0x44>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]

	    while (HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin)){}
 8001130:	bf00      	nop
 8001132:	2110      	movs	r1, #16
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <EXTI4_IRQHandler+0x48>)
 8001136:	f000 fff3 	bl	8002120 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f8      	bne.n	8001132 <EXTI4_IRQHandler+0x1e>
	 }

	 HAL_GPIO_EXTI_IRQHandler(COL0_Pin);
 8001140:	2010      	movs	r0, #16
 8001142:	f001 f81f 	bl	8002184 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL0_Pin);
 8001146:	2010      	movs	r0, #16
 8001148:	f001 f81c 	bl	8002184 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000066d 	.word	0x2000066d
 8001154:	40013c00 	.word	0x40013c00
 8001158:	20000001 	.word	0x20000001
 800115c:	40020c00 	.word	0x40020c00

08001160 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	key_pressed = 1;
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <EXTI9_5_IRQHandler+0x8c>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]

	if (__HAL_GPIO_EXTI_GET_FLAG(COL1_Pin)){
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <EXTI9_5_IRQHandler+0x90>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <EXTI9_5_IRQHandler+0x2e>
		current_col  = 1;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <EXTI9_5_IRQHandler+0x94>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]

		while (HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin)){}
 800117c:	bf00      	nop
 800117e:	2120      	movs	r1, #32
 8001180:	481d      	ldr	r0, [pc, #116]	; (80011f8 <EXTI9_5_IRQHandler+0x98>)
 8001182:	f000 ffcd 	bl	8002120 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f8      	bne.n	800117e <EXTI9_5_IRQHandler+0x1e>
 800118c:	e022      	b.n	80011d4 <EXTI9_5_IRQHandler+0x74>
	}else if (__HAL_GPIO_EXTI_GET_FLAG(COL2_Pin)){
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <EXTI9_5_IRQHandler+0x90>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00b      	beq.n	80011b2 <EXTI9_5_IRQHandler+0x52>
		current_col  = 2;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <EXTI9_5_IRQHandler+0x94>)
 800119c:	2202      	movs	r2, #2
 800119e:	701a      	strb	r2, [r3, #0]

	    while (HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin)){}
 80011a0:	bf00      	nop
 80011a2:	2140      	movs	r1, #64	; 0x40
 80011a4:	4814      	ldr	r0, [pc, #80]	; (80011f8 <EXTI9_5_IRQHandler+0x98>)
 80011a6:	f000 ffbb 	bl	8002120 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1f8      	bne.n	80011a2 <EXTI9_5_IRQHandler+0x42>
 80011b0:	e010      	b.n	80011d4 <EXTI9_5_IRQHandler+0x74>
	  }else if (__HAL_GPIO_EXTI_GET_FLAG(COL3_Pin)){
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <EXTI9_5_IRQHandler+0x90>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00a      	beq.n	80011d4 <EXTI9_5_IRQHandler+0x74>
		  current_col  = 3;
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <EXTI9_5_IRQHandler+0x94>)
 80011c0:	2203      	movs	r2, #3
 80011c2:	701a      	strb	r2, [r3, #0]

		  while (HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin)){}
 80011c4:	bf00      	nop
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	480b      	ldr	r0, [pc, #44]	; (80011f8 <EXTI9_5_IRQHandler+0x98>)
 80011ca:	f000 ffa9 	bl	8002120 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f8      	bne.n	80011c6 <EXTI9_5_IRQHandler+0x66>
	  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL1_Pin);
 80011d4:	2020      	movs	r0, #32
 80011d6:	f000 ffd5 	bl	8002184 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL2_Pin);
 80011da:	2040      	movs	r0, #64	; 0x40
 80011dc:	f000 ffd2 	bl	8002184 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL3_Pin);
 80011e0:	2080      	movs	r0, #128	; 0x80
 80011e2:	f000 ffcf 	bl	8002184 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000066d 	.word	0x2000066d
 80011f0:	40013c00 	.word	0x40013c00
 80011f4:	20000001 	.word	0x20000001
 80011f8:	40020c00 	.word	0x40020c00

080011fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (HAL_GetTick() - dead_time >= 50){
 8001200:	f000 f8f0 	bl	80013e4 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <EXTI15_10_IRQHandler+0x54>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b31      	cmp	r3, #49	; 0x31
 800120e:	d90f      	bls.n	8001230 <EXTI15_10_IRQHandler+0x34>
	    if (__HAL_GPIO_EXTI_GET_FLAG(USER_Btn_Pin)) {
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <EXTI15_10_IRQHandler+0x58>)
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d009      	beq.n	8001230 <EXTI15_10_IRQHandler+0x34>
	      // Your code here
	    	filter_en = !filter_en;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <EXTI15_10_IRQHandler+0x5c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	bf0c      	ite	eq
 8001224:	2301      	moveq	r3, #1
 8001226:	2300      	movne	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	461a      	mov	r2, r3
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <EXTI15_10_IRQHandler+0x5c>)
 800122e:	701a      	strb	r2, [r3, #0]
	    }
	  }

	HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001230:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001234:	f000 ffa6 	bl	8002184 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001238:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800123c:	f000 ffa2 	bl	8002184 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  dead_time = HAL_GetTick();
 8001240:	f000 f8d0 	bl	80013e4 <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
 8001246:	4a02      	ldr	r2, [pc, #8]	; (8001250 <EXTI15_10_IRQHandler+0x54>)
 8001248:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200006e4 	.word	0x200006e4
 8001254:	40013c00 	.word	0x40013c00
 8001258:	2000066e 	.word	0x2000066e

0800125c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	keypad_poll = 1;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <TIM6_DAC_IRQHandler+0x1c>)
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <TIM6_DAC_IRQHandler+0x20>)
 8001268:	f000 fce3 	bl	8001c32 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <TIM6_DAC_IRQHandler+0x24>)
 800126e:	f002 fac7 	bl	8003800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000066c 	.word	0x2000066c
 800127c:	20000078 	.word	0x20000078
 8001280:	2000008c 	.word	0x2000008c

08001284 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	new_sample = 1;
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <TIM7_IRQHandler+0x14>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <TIM7_IRQHandler+0x18>)
 8001290:	f002 fab6 	bl	8003800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000066f 	.word	0x2000066f
 800129c:	200000d4 	.word	0x200000d4

080012a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <SystemInit+0x20>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <SystemInit+0x20>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ca:	490e      	ldr	r1, [pc, #56]	; (8001304 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012e0:	4c0b      	ldr	r4, [pc, #44]	; (8001310 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ee:	f7ff ffd7 	bl	80012a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f2:	f003 fd3d 	bl	8004d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f6:	f7ff fbb7 	bl	8000a68 <main>
  bx  lr    
 80012fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001308:	08004f3c 	.word	0x08004f3c
  ldr r2, =_sbss
 800130c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001310:	200006ec 	.word	0x200006ec

08001314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC_IRQHandler>
	...

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_Init+0x40>)
 8001322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001326:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_Init+0x40>)
 800132e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001332:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_Init+0x40>)
 800133a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 fbc1 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f808 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134c:	f7ff fd02 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023c00 	.word	0x40023c00

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x54>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_InitTick+0x58>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fbd9 	bl	8001b32 <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e00e      	b.n	80013a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d80a      	bhi.n	80013a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f000 fba1 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <HAL_InitTick+0x5c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000008 	.word	0x20000008
 80013b4:	20000010 	.word	0x20000010
 80013b8:	2000000c 	.word	0x2000000c

080013bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x20>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_IncTick+0x24>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <HAL_IncTick+0x24>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000010 	.word	0x20000010
 80013e0:	200006e8 	.word	0x200006e8

080013e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_GetTick+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	200006e8 	.word	0x200006e8

080013fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff ffee 	bl	80013e4 <HAL_GetTick>
 8001408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d005      	beq.n	8001422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_Delay+0x44>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001422:	bf00      	nop
 8001424:	f7ff ffde 	bl	80013e4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	429a      	cmp	r2, r3
 8001432:	d8f7      	bhi.n	8001424 <HAL_Delay+0x28>
  {
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000010 	.word	0x20000010

08001444 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e033      	b.n	80014c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	d109      	bne.n	8001476 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fc9e 	bl	8000da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	d118      	bne.n	80014b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800148a:	f023 0302 	bic.w	r3, r3, #2
 800148e:	f043 0202 	orr.w	r2, r3, #2
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f94a 	bl	8001730 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f023 0303 	bic.w	r3, r3, #3
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40
 80014b2:	e001      	b.n	80014b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x1c>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e113      	b.n	8001710 <HAL_ADC_ConfigChannel+0x244>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b09      	cmp	r3, #9
 80014f6:	d925      	bls.n	8001544 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68d9      	ldr	r1, [r3, #12]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	b29b      	uxth	r3, r3
 8001504:	461a      	mov	r2, r3
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	3b1e      	subs	r3, #30
 800150e:	2207      	movs	r2, #7
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43da      	mvns	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	400a      	ands	r2, r1
 800151c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68d9      	ldr	r1, [r3, #12]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	4603      	mov	r3, r0
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4403      	add	r3, r0
 8001536:	3b1e      	subs	r3, #30
 8001538:	409a      	lsls	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	e022      	b.n	800158a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6919      	ldr	r1, [r3, #16]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	2207      	movs	r2, #7
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	400a      	ands	r2, r1
 8001566:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6919      	ldr	r1, [r3, #16]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	4603      	mov	r3, r0
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4403      	add	r3, r0
 8001580:	409a      	lsls	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b06      	cmp	r3, #6
 8001590:	d824      	bhi.n	80015dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	3b05      	subs	r3, #5
 80015a4:	221f      	movs	r2, #31
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	400a      	ands	r2, r1
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	3b05      	subs	r3, #5
 80015ce:	fa00 f203 	lsl.w	r2, r0, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	635a      	str	r2, [r3, #52]	; 0x34
 80015da:	e04c      	b.n	8001676 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b0c      	cmp	r3, #12
 80015e2:	d824      	bhi.n	800162e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	3b23      	subs	r3, #35	; 0x23
 80015f6:	221f      	movs	r2, #31
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43da      	mvns	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	400a      	ands	r2, r1
 8001604:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	b29b      	uxth	r3, r3
 8001612:	4618      	mov	r0, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	3b23      	subs	r3, #35	; 0x23
 8001620:	fa00 f203 	lsl.w	r2, r0, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
 800162c:	e023      	b.n	8001676 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	3b41      	subs	r3, #65	; 0x41
 8001640:	221f      	movs	r2, #31
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	400a      	ands	r2, r1
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b29b      	uxth	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	3b41      	subs	r3, #65	; 0x41
 800166a:	fa00 f203 	lsl.w	r2, r0, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001676:	4b29      	ldr	r3, [pc, #164]	; (800171c <HAL_ADC_ConfigChannel+0x250>)
 8001678:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a28      	ldr	r2, [pc, #160]	; (8001720 <HAL_ADC_ConfigChannel+0x254>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d10f      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1d8>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b12      	cmp	r3, #18
 800168a:	d10b      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1d      	ldr	r2, [pc, #116]	; (8001720 <HAL_ADC_ConfigChannel+0x254>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d12b      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x23a>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <HAL_ADC_ConfigChannel+0x258>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d003      	beq.n	80016c0 <HAL_ADC_ConfigChannel+0x1f4>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b11      	cmp	r3, #17
 80016be:	d122      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a11      	ldr	r2, [pc, #68]	; (8001724 <HAL_ADC_ConfigChannel+0x258>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d111      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_ADC_ConfigChannel+0x25c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a11      	ldr	r2, [pc, #68]	; (800172c <HAL_ADC_ConfigChannel+0x260>)
 80016e8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ec:	0c9a      	lsrs	r2, r3, #18
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016f8:	e002      	b.n	8001700 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f9      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40012300 	.word	0x40012300
 8001720:	40012000 	.word	0x40012000
 8001724:	10000012 	.word	0x10000012
 8001728:	20000008 	.word	0x20000008
 800172c:	431bde83 	.word	0x431bde83

08001730 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001738:	4b79      	ldr	r3, [pc, #484]	; (8001920 <ADC_Init+0x1f0>)
 800173a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	431a      	orrs	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	021a      	lsls	r2, r3, #8
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	4a58      	ldr	r2, [pc, #352]	; (8001924 <ADC_Init+0x1f4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d022      	beq.n	800180e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6899      	ldr	r1, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6899      	ldr	r1, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	e00f      	b.n	800182e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800181c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800182c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0202 	bic.w	r2, r2, #2
 800183c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6899      	ldr	r1, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7e1b      	ldrb	r3, [r3, #24]
 8001848:	005a      	lsls	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d01b      	beq.n	8001894 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800186a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800187a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6859      	ldr	r1, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	3b01      	subs	r3, #1
 8001888:	035a      	lsls	r2, r3, #13
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	e007      	b.n	80018a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	3b01      	subs	r3, #1
 80018c0:	051a      	lsls	r2, r3, #20
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6899      	ldr	r1, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018e6:	025a      	lsls	r2, r3, #9
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6899      	ldr	r1, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	029a      	lsls	r2, r3, #10
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	609a      	str	r2, [r3, #8]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40012300 	.word	0x40012300
 8001924:	0f000001 	.word	0x0f000001

08001928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <__NVIC_GetPriorityGrouping+0x18>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0307 	and.w	r3, r3, #7
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db0b      	blt.n	80019b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4907      	ldr	r1, [pc, #28]	; (80019c4 <__NVIC_EnableIRQ+0x38>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2001      	movs	r0, #1
 80019ae:	fa00 f202 	lsl.w	r2, r0, r2
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	; (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	; (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f7ff ff8e 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff29 	bl	8001928 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff3e 	bl	8001970 <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff8e 	bl	8001a1c <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5d 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff31 	bl	800198c <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffa2 	bl	8001a84 <SysTick_Config>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e014      	b.n	8001b86 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	791b      	ldrb	r3, [r3, #4]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff f95d 	bl	8000e2c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	795b      	ldrb	r3, [r3, #5]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_DAC_Start+0x16>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e040      	b.n	8001c26 <HAL_DAC_Start+0x98>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2202      	movs	r2, #2
 8001bae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10f      	bne.n	8001bee <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001bd8:	2b3c      	cmp	r3, #60	; 0x3c
 8001bda:	d11d      	bne.n	8001c18 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	e014      	b.n	8001c18 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	213c      	movs	r1, #60	; 0x3c
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d107      	bne.n	8001c18 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0202 	orr.w	r2, r2, #2
 8001c16:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c48:	d120      	bne.n	8001c8c <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c58:	d118      	bne.n	8001c8c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	f043 0201 	orr.w	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c84:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f852 	bl	8001d30 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c9a:	d120      	bne.n	8001cde <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001caa:	d118      	bne.n	8001cde <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f043 0202 	orr.w	r2, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f882 	bl	8001de2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b087      	sub	sp, #28
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	3308      	adds	r3, #8
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	e004      	b.n	8001d1a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	3314      	adds	r3, #20
 8001d18:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	795b      	ldrb	r3, [r3, #5]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_DAC_ConfigChannel+0x18>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e03c      	b.n	8001dd6 <HAL_DAC_ConfigChannel+0x92>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2202      	movs	r2, #2
 8001d66:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	4013      	ands	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	22c0      	movs	r2, #192	; 0xc0
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
 8001e12:	e165      	b.n	80020e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e14:	2201      	movs	r2, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	f040 8154 	bne.w	80020da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d005      	beq.n	8001e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d130      	bne.n	8001eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e80:	2201      	movs	r2, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 0201 	and.w	r2, r3, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d017      	beq.n	8001ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d123      	bne.n	8001f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	08da      	lsrs	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3208      	adds	r2, #8
 8001efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	220f      	movs	r2, #15
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	08da      	lsrs	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3208      	adds	r2, #8
 8001f36:	69b9      	ldr	r1, [r7, #24]
 8001f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0203 	and.w	r2, r3, #3
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80ae 	beq.w	80020da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b5d      	ldr	r3, [pc, #372]	; (80020f8 <HAL_GPIO_Init+0x300>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	4a5c      	ldr	r2, [pc, #368]	; (80020f8 <HAL_GPIO_Init+0x300>)
 8001f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8e:	4b5a      	ldr	r3, [pc, #360]	; (80020f8 <HAL_GPIO_Init+0x300>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f9a:	4a58      	ldr	r2, [pc, #352]	; (80020fc <HAL_GPIO_Init+0x304>)
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4f      	ldr	r2, [pc, #316]	; (8002100 <HAL_GPIO_Init+0x308>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d025      	beq.n	8002012 <HAL_GPIO_Init+0x21a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4e      	ldr	r2, [pc, #312]	; (8002104 <HAL_GPIO_Init+0x30c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01f      	beq.n	800200e <HAL_GPIO_Init+0x216>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4d      	ldr	r2, [pc, #308]	; (8002108 <HAL_GPIO_Init+0x310>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d019      	beq.n	800200a <HAL_GPIO_Init+0x212>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4c      	ldr	r2, [pc, #304]	; (800210c <HAL_GPIO_Init+0x314>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_GPIO_Init+0x20e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4b      	ldr	r2, [pc, #300]	; (8002110 <HAL_GPIO_Init+0x318>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00d      	beq.n	8002002 <HAL_GPIO_Init+0x20a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4a      	ldr	r2, [pc, #296]	; (8002114 <HAL_GPIO_Init+0x31c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d007      	beq.n	8001ffe <HAL_GPIO_Init+0x206>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a49      	ldr	r2, [pc, #292]	; (8002118 <HAL_GPIO_Init+0x320>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_GPIO_Init+0x202>
 8001ff6:	2306      	movs	r3, #6
 8001ff8:	e00c      	b.n	8002014 <HAL_GPIO_Init+0x21c>
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	e00a      	b.n	8002014 <HAL_GPIO_Init+0x21c>
 8001ffe:	2305      	movs	r3, #5
 8002000:	e008      	b.n	8002014 <HAL_GPIO_Init+0x21c>
 8002002:	2304      	movs	r3, #4
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x21c>
 8002006:	2303      	movs	r3, #3
 8002008:	e004      	b.n	8002014 <HAL_GPIO_Init+0x21c>
 800200a:	2302      	movs	r3, #2
 800200c:	e002      	b.n	8002014 <HAL_GPIO_Init+0x21c>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_GPIO_Init+0x21c>
 8002012:	2300      	movs	r3, #0
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	f002 0203 	and.w	r2, r2, #3
 800201a:	0092      	lsls	r2, r2, #2
 800201c:	4093      	lsls	r3, r2
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002024:	4935      	ldr	r1, [pc, #212]	; (80020fc <HAL_GPIO_Init+0x304>)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	3302      	adds	r3, #2
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002032:	4b3a      	ldr	r3, [pc, #232]	; (800211c <HAL_GPIO_Init+0x324>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002056:	4a31      	ldr	r2, [pc, #196]	; (800211c <HAL_GPIO_Init+0x324>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800205c:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_GPIO_Init+0x324>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <HAL_GPIO_Init+0x324>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <HAL_GPIO_Init+0x324>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020aa:	4a1c      	ldr	r2, [pc, #112]	; (800211c <HAL_GPIO_Init+0x324>)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_GPIO_Init+0x324>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d4:	4a11      	ldr	r2, [pc, #68]	; (800211c <HAL_GPIO_Init+0x324>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3301      	adds	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b0f      	cmp	r3, #15
 80020e4:	f67f ae96 	bls.w	8001e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40013800 	.word	0x40013800
 8002100:	40020000 	.word	0x40020000
 8002104:	40020400 	.word	0x40020400
 8002108:	40020800 	.word	0x40020800
 800210c:	40020c00 	.word	0x40020c00
 8002110:	40021000 	.word	0x40021000
 8002114:	40021400 	.word	0x40021400
 8002118:	40021800 	.word	0x40021800
 800211c:	40013c00 	.word	0x40013c00

08002120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	e001      	b.n	8002142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800216c:	e003      	b.n	8002176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	619a      	str	r2, [r3, #24]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800219a:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f806 	bl	80021b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40013c00 	.word	0x40013c00

080021b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021cc:	b08f      	sub	sp, #60	; 0x3c
 80021ce:	af0a      	add	r7, sp, #40	; 0x28
 80021d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e116      	b.n	800240a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe fef2 	bl	8000fe0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2203      	movs	r2, #3
 8002200:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f002 f87d 	bl	800431a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	687e      	ldr	r6, [r7, #4]
 8002228:	466d      	mov	r5, sp
 800222a:	f106 0410 	add.w	r4, r6, #16
 800222e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002236:	e894 0003 	ldmia.w	r4, {r0, r1}
 800223a:	e885 0003 	stmia.w	r5, {r0, r1}
 800223e:	1d33      	adds	r3, r6, #4
 8002240:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002242:	6838      	ldr	r0, [r7, #0]
 8002244:	f002 f808 	bl	8004258 <USB_CoreInit>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e0d7      	b.n	800240a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f002 f86b 	bl	800433c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
 800226a:	e04a      	b.n	8002302 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	333d      	adds	r3, #61	; 0x3d
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	333c      	adds	r3, #60	; 0x3c
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	b298      	uxth	r0, r3
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3344      	adds	r3, #68	; 0x44
 80022a8:	4602      	mov	r2, r0
 80022aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	3340      	adds	r3, #64	; 0x40
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	3348      	adds	r3, #72	; 0x48
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	334c      	adds	r3, #76	; 0x4c
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	3354      	adds	r3, #84	; 0x54
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	3301      	adds	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	d3af      	bcc.n	800226c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	e044      	b.n	800239c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	3301      	adds	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d3b5      	bcc.n	8002312 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	687e      	ldr	r6, [r7, #4]
 80023ae:	466d      	mov	r5, sp
 80023b0:	f106 0410 	add.w	r4, r6, #16
 80023b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80023c4:	1d33      	adds	r3, r6, #4
 80023c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c8:	6838      	ldr	r0, [r7, #0]
 80023ca:	f002 f803 	bl	80043d4 <USB_DevInit>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e014      	b.n	800240a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d102      	bne.n	80023fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f80a 	bl	8002412 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f002 f9c1 	bl	800478a <USB_DevDisconnect>

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002412 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002444:	f043 0303 	orr.w	r3, r3, #3
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0cc      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002470:	4b68      	ldr	r3, [pc, #416]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d90c      	bls.n	8002498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b65      	ldr	r3, [pc, #404]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b63      	ldr	r3, [pc, #396]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0b8      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b0:	4b59      	ldr	r3, [pc, #356]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a58      	ldr	r2, [pc, #352]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c8:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a52      	ldr	r2, [pc, #328]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4b50      	ldr	r3, [pc, #320]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	494d      	ldr	r1, [pc, #308]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d044      	beq.n	800257c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d119      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e07f      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d003      	beq.n	800251a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002516:	2b03      	cmp	r3, #3
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251a:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e06f      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252a:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e067      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4b37      	ldr	r3, [pc, #220]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4934      	ldr	r1, [pc, #208]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800254c:	f7fe ff4a 	bl	80013e4 <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7fe ff46 	bl	80013e4 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e04f      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d20c      	bcs.n	80025a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b20      	ldr	r3, [pc, #128]	; (8002614 <HAL_RCC_ClockConfig+0x1b8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e032      	b.n	800260a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4916      	ldr	r1, [pc, #88]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	490e      	ldr	r1, [pc, #56]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025e2:	f000 fb7f 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 80025e6:	4602      	mov	r2, r0
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	490a      	ldr	r1, [pc, #40]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	5ccb      	ldrb	r3, [r1, r3]
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCC_ClockConfig+0x1c8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe feaa 	bl	800135c <HAL_InitTick>

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40023c00 	.word	0x40023c00
 8002618:	40023800 	.word	0x40023800
 800261c:	08004f14 	.word	0x08004f14
 8002620:	20000008 	.word	0x20000008
 8002624:	2000000c 	.word	0x2000000c

08002628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <HAL_RCC_GetHCLKFreq+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000008 	.word	0x20000008

08002640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002644:	f7ff fff0 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0a9b      	lsrs	r3, r3, #10
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4903      	ldr	r1, [pc, #12]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	08004f24 	.word	0x08004f24

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800266c:	f7ff ffdc 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0b5b      	lsrs	r3, r3, #13
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4903      	ldr	r1, [pc, #12]	; (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	08004f24 	.word	0x08004f24

08002690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	; 0x30
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d010      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80026c8:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026ce:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	496c      	ldr	r1, [pc, #432]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80026e6:	2301      	movs	r3, #1
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d010      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80026f6:	4b64      	ldr	r3, [pc, #400]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026fc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	4960      	ldr	r1, [pc, #384]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002714:	2301      	movs	r3, #1
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d017      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002724:	4b58      	ldr	r3, [pc, #352]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800272a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4955      	ldr	r1, [pc, #340]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002742:	d101      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002744:	2301      	movs	r3, #1
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002750:	2301      	movs	r3, #1
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d017      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002760:	4b49      	ldr	r3, [pc, #292]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002766:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276e:	4946      	ldr	r1, [pc, #280]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800277e:	d101      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002780:	2301      	movs	r3, #1
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800278c:	2301      	movs	r3, #1
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 808a 	beq.w	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	4a38      	ldr	r2, [pc, #224]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	; 0x40
 80027ae:	4b36      	ldr	r3, [pc, #216]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80027ba:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a33      	ldr	r2, [pc, #204]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027c6:	f7fe fe0d 	bl	80013e4 <HAL_GetTick>
 80027ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7fe fe09 	bl	80013e4 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e278      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027e0:	4b2a      	ldr	r3, [pc, #168]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ec:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d02f      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002804:	6a3a      	ldr	r2, [r7, #32]
 8002806:	429a      	cmp	r2, r3
 8002808:	d028      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800280a:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002812:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002814:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002820:	4a19      	ldr	r2, [pc, #100]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002826:	4b18      	ldr	r3, [pc, #96]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d114      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002832:	f7fe fdd7 	bl	80013e4 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe fdd3 	bl	80013e4 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e240      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ee      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002868:	d114      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800287a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287e:	4902      	ldr	r1, [pc, #8]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]
 8002884:	e00c      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	40007000 	.word	0x40007000
 8002890:	42470e40 	.word	0x42470e40
 8002894:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a49      	ldr	r2, [pc, #292]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800289a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800289e:	6093      	str	r3, [r2, #8]
 80028a0:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ac:	4944      	ldr	r1, [pc, #272]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d004      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80028c4:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80028c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80028d4:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	4937      	ldr	r1, [pc, #220]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028f6:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002904:	492e      	ldr	r1, [pc, #184]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d011      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002918:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800291a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	4926      	ldr	r1, [pc, #152]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002936:	d101      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002938:	2301      	movs	r3, #1
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002948:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800294a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	491a      	ldr	r1, [pc, #104]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002966:	2b00      	cmp	r3, #0
 8002968:	d011      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800296c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002970:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002978:	4911      	ldr	r1, [pc, #68]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002988:	d101      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800298a:	2301      	movs	r3, #1
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d005      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800299c:	f040 80ff 	bne.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029a6:	f7fe fd1d 	bl	80013e4 <HAL_GetTick>
 80029aa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029ac:	e00e      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029ae:	f7fe fd19 	bl	80013e4 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d907      	bls.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e188      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80029c0:	40023800 	.word	0x40023800
 80029c4:	424711e0 	.word	0x424711e0
 80029c8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029cc:	4b7e      	ldr	r3, [pc, #504]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ea      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d009      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d028      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d124      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a00:	4b71      	ldr	r3, [pc, #452]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a06:	0c1b      	lsrs	r3, r3, #16
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a12:	4b6d      	ldr	r3, [pc, #436]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a18:	0e1b      	lsrs	r3, r3, #24
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	019b      	lsls	r3, r3, #6
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	085b      	lsrs	r3, r3, #1
 8002a30:	3b01      	subs	r3, #1
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	431a      	orrs	r2, r3
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	071b      	lsls	r3, r3, #28
 8002a42:	4961      	ldr	r1, [pc, #388]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d035      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a74:	d130      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a76:	4b54      	ldr	r3, [pc, #336]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a88:	4b4f      	ldr	r3, [pc, #316]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a8e:	0f1b      	lsrs	r3, r3, #28
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	019b      	lsls	r3, r3, #6
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	041b      	lsls	r3, r3, #16
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	071b      	lsls	r3, r3, #28
 8002ab8:	4943      	ldr	r1, [pc, #268]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ac0:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac6:	f023 021f 	bic.w	r2, r3, #31
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	493d      	ldr	r1, [pc, #244]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d029      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aec:	d124      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002aee:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	3301      	adds	r3, #1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b00:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b06:	0f1b      	lsrs	r3, r3, #28
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	019b      	lsls	r3, r3, #6
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	3b01      	subs	r3, #1
 8002b22:	041b      	lsls	r3, r3, #16
 8002b24:	431a      	orrs	r2, r3
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	071b      	lsls	r3, r3, #28
 8002b30:	4925      	ldr	r1, [pc, #148]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d016      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	3b01      	subs	r3, #1
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	061b      	lsls	r3, r3, #24
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	071b      	lsls	r3, r3, #28
 8002b6a:	4917      	ldr	r1, [pc, #92]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b72:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b78:	f7fe fc34 	bl	80013e4 <HAL_GetTick>
 8002b7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b80:	f7fe fc30 	bl	80013e4 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e09f      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	f040 8095 	bne.w	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bac:	f7fe fc1a 	bl	80013e4 <HAL_GetTick>
 8002bb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bb2:	e00f      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002bb4:	f7fe fc16 	bl	80013e4 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d908      	bls.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e085      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	42470068 	.word	0x42470068
 8002bd0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bd4:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002be0:	d0e8      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d02b      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d127      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002c0a:	4b34      	ldr	r3, [pc, #208]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	3301      	adds	r3, #1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	019b      	lsls	r3, r3, #6
 8002c26:	431a      	orrs	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	041b      	lsls	r3, r3, #16
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	061b      	lsls	r3, r3, #24
 8002c38:	4928      	ldr	r1, [pc, #160]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c40:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	4922      	ldr	r1, [pc, #136]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01d      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c6e:	d118      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c70:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	0e1b      	lsrs	r3, r3, #24
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	019b      	lsls	r3, r3, #6
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	3b01      	subs	r3, #1
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	431a      	orrs	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	4910      	ldr	r1, [pc, #64]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe fb9c 	bl	80013e4 <HAL_GetTick>
 8002cac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002cb0:	f7fe fb98 	bl	80013e4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e007      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cce:	d1ef      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3730      	adds	r7, #48	; 0x30
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	42470070 	.word	0x42470070

08002ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce8:	b0ae      	sub	sp, #184	; 0xb8
 8002cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d0a:	4bcb      	ldr	r3, [pc, #812]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	f200 8206 	bhi.w	8003124 <HAL_RCC_GetSysClockFreq+0x440>
 8002d18:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d55 	.word	0x08002d55
 8002d24:	08003125 	.word	0x08003125
 8002d28:	08003125 	.word	0x08003125
 8002d2c:	08003125 	.word	0x08003125
 8002d30:	08002d5d 	.word	0x08002d5d
 8002d34:	08003125 	.word	0x08003125
 8002d38:	08003125 	.word	0x08003125
 8002d3c:	08003125 	.word	0x08003125
 8002d40:	08002d65 	.word	0x08002d65
 8002d44:	08003125 	.word	0x08003125
 8002d48:	08003125 	.word	0x08003125
 8002d4c:	08003125 	.word	0x08003125
 8002d50:	08002f55 	.word	0x08002f55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d54:	4bb9      	ldr	r3, [pc, #740]	; (800303c <HAL_RCC_GetSysClockFreq+0x358>)
 8002d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d5a:	e1e7      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d5c:	4bb8      	ldr	r3, [pc, #736]	; (8003040 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d62:	e1e3      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d64:	4bb4      	ldr	r3, [pc, #720]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d70:	4bb1      	ldr	r3, [pc, #708]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d071      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7c:	4bae      	ldr	r3, [pc, #696]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d88:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002da2:	4622      	mov	r2, r4
 8002da4:	462b      	mov	r3, r5
 8002da6:	f04f 0000 	mov.w	r0, #0
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	0159      	lsls	r1, r3, #5
 8002db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db4:	0150      	lsls	r0, r2, #5
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4621      	mov	r1, r4
 8002dbc:	1a51      	subs	r1, r2, r1
 8002dbe:	6439      	str	r1, [r7, #64]	; 0x40
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	018b      	lsls	r3, r1, #6
 8002dd8:	4641      	mov	r1, r8
 8002dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dde:	4641      	mov	r1, r8
 8002de0:	018a      	lsls	r2, r1, #6
 8002de2:	4641      	mov	r1, r8
 8002de4:	1a51      	subs	r1, r2, r1
 8002de6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002de8:	4649      	mov	r1, r9
 8002dea:	eb63 0301 	sbc.w	r3, r3, r1
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	00cb      	lsls	r3, r1, #3
 8002e00:	4641      	mov	r1, r8
 8002e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e06:	4641      	mov	r1, r8
 8002e08:	00ca      	lsls	r2, r1, #3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4622      	mov	r2, r4
 8002e12:	189b      	adds	r3, r3, r2
 8002e14:	633b      	str	r3, [r7, #48]	; 0x30
 8002e16:	462b      	mov	r3, r5
 8002e18:	460a      	mov	r2, r1
 8002e1a:	eb42 0303 	adc.w	r3, r2, r3
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	024b      	lsls	r3, r1, #9
 8002e30:	4621      	mov	r1, r4
 8002e32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e36:	4621      	mov	r1, r4
 8002e38:	024a      	lsls	r2, r1, #9
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e50:	f7fd f9d8 	bl	8000204 <__aeabi_uldivmod>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4613      	mov	r3, r2
 8002e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e5e:	e067      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e60:	4b75      	ldr	r3, [pc, #468]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	099b      	lsrs	r3, r3, #6
 8002e66:	2200      	movs	r2, #0
 8002e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e6c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e78:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e82:	4622      	mov	r2, r4
 8002e84:	462b      	mov	r3, r5
 8002e86:	f04f 0000 	mov.w	r0, #0
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	0159      	lsls	r1, r3, #5
 8002e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e94:	0150      	lsls	r0, r2, #5
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	1a51      	subs	r1, r2, r1
 8002e9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	018b      	lsls	r3, r1, #6
 8002eb8:	4641      	mov	r1, r8
 8002eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	018a      	lsls	r2, r1, #6
 8002ec2:	4641      	mov	r1, r8
 8002ec4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ec8:	4649      	mov	r1, r9
 8002eca:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002eda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ede:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ee2:	4692      	mov	sl, r2
 8002ee4:	469b      	mov	fp, r3
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	eb1a 0303 	adds.w	r3, sl, r3
 8002eec:	623b      	str	r3, [r7, #32]
 8002eee:	462b      	mov	r3, r5
 8002ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f02:	4629      	mov	r1, r5
 8002f04:	028b      	lsls	r3, r1, #10
 8002f06:	4621      	mov	r1, r4
 8002f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	028a      	lsls	r2, r1, #10
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f18:	2200      	movs	r2, #0
 8002f1a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f1c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f22:	f7fd f96f 	bl	8000204 <__aeabi_uldivmod>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f30:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	0c1b      	lsrs	r3, r3, #16
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f52:	e0eb      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f54:	4b38      	ldr	r3, [pc, #224]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f60:	4b35      	ldr	r3, [pc, #212]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d06b      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6c:	4b32      	ldr	r3, [pc, #200]	; (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	099b      	lsrs	r3, r3, #6
 8002f72:	2200      	movs	r2, #0
 8002f74:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8002f80:	2300      	movs	r3, #0
 8002f82:	667b      	str	r3, [r7, #100]	; 0x64
 8002f84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f88:	4622      	mov	r2, r4
 8002f8a:	462b      	mov	r3, r5
 8002f8c:	f04f 0000 	mov.w	r0, #0
 8002f90:	f04f 0100 	mov.w	r1, #0
 8002f94:	0159      	lsls	r1, r3, #5
 8002f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f9a:	0150      	lsls	r0, r2, #5
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	1a51      	subs	r1, r2, r1
 8002fa4:	61b9      	str	r1, [r7, #24]
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	eb63 0301 	sbc.w	r3, r3, r1
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fba:	4659      	mov	r1, fp
 8002fbc:	018b      	lsls	r3, r1, #6
 8002fbe:	4651      	mov	r1, sl
 8002fc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fc4:	4651      	mov	r1, sl
 8002fc6:	018a      	lsls	r2, r1, #6
 8002fc8:	4651      	mov	r1, sl
 8002fca:	ebb2 0801 	subs.w	r8, r2, r1
 8002fce:	4659      	mov	r1, fp
 8002fd0:	eb63 0901 	sbc.w	r9, r3, r1
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fe0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe8:	4690      	mov	r8, r2
 8002fea:	4699      	mov	r9, r3
 8002fec:	4623      	mov	r3, r4
 8002fee:	eb18 0303 	adds.w	r3, r8, r3
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	462b      	mov	r3, r5
 8002ff6:	eb49 0303 	adc.w	r3, r9, r3
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003008:	4629      	mov	r1, r5
 800300a:	024b      	lsls	r3, r1, #9
 800300c:	4621      	mov	r1, r4
 800300e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003012:	4621      	mov	r1, r4
 8003014:	024a      	lsls	r2, r1, #9
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800301e:	2200      	movs	r2, #0
 8003020:	65bb      	str	r3, [r7, #88]	; 0x58
 8003022:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003024:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003028:	f7fd f8ec 	bl	8000204 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4613      	mov	r3, r2
 8003032:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003036:	e065      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x420>
 8003038:	40023800 	.word	0x40023800
 800303c:	00f42400 	.word	0x00f42400
 8003040:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003044:	4b3d      	ldr	r3, [pc, #244]	; (800313c <HAL_RCC_GetSysClockFreq+0x458>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	2200      	movs	r2, #0
 800304c:	4618      	mov	r0, r3
 800304e:	4611      	mov	r1, r2
 8003050:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003054:	653b      	str	r3, [r7, #80]	; 0x50
 8003056:	2300      	movs	r3, #0
 8003058:	657b      	str	r3, [r7, #84]	; 0x54
 800305a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800305e:	4642      	mov	r2, r8
 8003060:	464b      	mov	r3, r9
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f04f 0100 	mov.w	r1, #0
 800306a:	0159      	lsls	r1, r3, #5
 800306c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003070:	0150      	lsls	r0, r2, #5
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4641      	mov	r1, r8
 8003078:	1a51      	subs	r1, r2, r1
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	4649      	mov	r1, r9
 800307e:	eb63 0301 	sbc.w	r3, r3, r1
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003090:	4659      	mov	r1, fp
 8003092:	018b      	lsls	r3, r1, #6
 8003094:	4651      	mov	r1, sl
 8003096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800309a:	4651      	mov	r1, sl
 800309c:	018a      	lsls	r2, r1, #6
 800309e:	4651      	mov	r1, sl
 80030a0:	1a54      	subs	r4, r2, r1
 80030a2:	4659      	mov	r1, fp
 80030a4:	eb63 0501 	sbc.w	r5, r3, r1
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	00eb      	lsls	r3, r5, #3
 80030b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030b6:	00e2      	lsls	r2, r4, #3
 80030b8:	4614      	mov	r4, r2
 80030ba:	461d      	mov	r5, r3
 80030bc:	4643      	mov	r3, r8
 80030be:	18e3      	adds	r3, r4, r3
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	464b      	mov	r3, r9
 80030c4:	eb45 0303 	adc.w	r3, r5, r3
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030d6:	4629      	mov	r1, r5
 80030d8:	028b      	lsls	r3, r1, #10
 80030da:	4621      	mov	r1, r4
 80030dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e0:	4621      	mov	r1, r4
 80030e2:	028a      	lsls	r2, r1, #10
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030ec:	2200      	movs	r2, #0
 80030ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030f6:	f7fd f885 	bl	8000204 <__aeabi_uldivmod>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4613      	mov	r3, r2
 8003100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003104:	4b0d      	ldr	r3, [pc, #52]	; (800313c <HAL_RCC_GetSysClockFreq+0x458>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0f1b      	lsrs	r3, r3, #28
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003122:	e003      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800312a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800312c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003130:	4618      	mov	r0, r3
 8003132:	37b8      	adds	r7, #184	; 0xb8
 8003134:	46bd      	mov	sp, r7
 8003136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800
 8003140:	00f42400 	.word	0x00f42400

08003144 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e28d      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8083 	beq.w	800326a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003164:	4b94      	ldr	r3, [pc, #592]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b04      	cmp	r3, #4
 800316e:	d019      	beq.n	80031a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003170:	4b91      	ldr	r3, [pc, #580]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003178:	2b08      	cmp	r3, #8
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800317c:	4b8e      	ldr	r3, [pc, #568]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003188:	d00c      	beq.n	80031a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318a:	4b8b      	ldr	r3, [pc, #556]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003192:	2b0c      	cmp	r3, #12
 8003194:	d112      	bne.n	80031bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003196:	4b88      	ldr	r3, [pc, #544]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a2:	d10b      	bne.n	80031bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	4b84      	ldr	r3, [pc, #528]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d05b      	beq.n	8003268 <HAL_RCC_OscConfig+0x124>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d157      	bne.n	8003268 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e25a      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c4:	d106      	bne.n	80031d4 <HAL_RCC_OscConfig+0x90>
 80031c6:	4b7c      	ldr	r3, [pc, #496]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a7b      	ldr	r2, [pc, #492]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e01d      	b.n	8003210 <HAL_RCC_OscConfig+0xcc>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0xb4>
 80031de:	4b76      	ldr	r3, [pc, #472]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a75      	ldr	r2, [pc, #468]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4b73      	ldr	r3, [pc, #460]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a72      	ldr	r2, [pc, #456]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0xcc>
 80031f8:	4b6f      	ldr	r3, [pc, #444]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a6e      	ldr	r2, [pc, #440]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b6c      	ldr	r3, [pc, #432]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a6b      	ldr	r2, [pc, #428]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800320a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe f8e4 	bl	80013e4 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003220:	f7fe f8e0 	bl	80013e4 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e21f      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b61      	ldr	r3, [pc, #388]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0xdc>
 800323e:	e014      	b.n	800326a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe f8d0 	bl	80013e4 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003248:	f7fe f8cc 	bl	80013e4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e20b      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x104>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d06f      	beq.n	8003356 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003276:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b00      	cmp	r3, #0
 8003280:	d017      	beq.n	80032b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003282:	4b4d      	ldr	r3, [pc, #308]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800328a:	2b08      	cmp	r3, #8
 800328c:	d105      	bne.n	800329a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800328e:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d11c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a6:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d116      	bne.n	80032e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b2:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <HAL_RCC_OscConfig+0x186>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e1d3      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ca:	4b3b      	ldr	r3, [pc, #236]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4937      	ldr	r1, [pc, #220]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032de:	e03a      	b.n	8003356 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d020      	beq.n	800332a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e8:	4b34      	ldr	r3, [pc, #208]	; (80033bc <HAL_RCC_OscConfig+0x278>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fe f879 	bl	80013e4 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fe f875 	bl	80013e4 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e1b4      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4925      	ldr	r1, [pc, #148]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003324:	4313      	orrs	r3, r2
 8003326:	600b      	str	r3, [r1, #0]
 8003328:	e015      	b.n	8003356 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332a:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_RCC_OscConfig+0x278>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe f858 	bl	80013e4 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003338:	f7fe f854 	bl	80013e4 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e193      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d036      	beq.n	80033d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <HAL_RCC_OscConfig+0x27c>)
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fe f838 	bl	80013e4 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003378:	f7fe f834 	bl	80013e4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e173      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800338c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x234>
 8003396:	e01b      	b.n	80033d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_OscConfig+0x27c>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7fe f821 	bl	80013e4 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a4:	e00e      	b.n	80033c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a6:	f7fe f81d 	bl	80013e4 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d907      	bls.n	80033c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e15c      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
 80033b8:	40023800 	.word	0x40023800
 80033bc:	42470000 	.word	0x42470000
 80033c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c4:	4b8a      	ldr	r3, [pc, #552]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80033c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ea      	bne.n	80033a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8097 	beq.w	800350c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033de:	2300      	movs	r3, #0
 80033e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e2:	4b83      	ldr	r3, [pc, #524]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10f      	bne.n	800340e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	4b7f      	ldr	r3, [pc, #508]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	4a7e      	ldr	r2, [pc, #504]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80033f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fc:	6413      	str	r3, [r2, #64]	; 0x40
 80033fe:	4b7c      	ldr	r3, [pc, #496]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340a:	2301      	movs	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340e:	4b79      	ldr	r3, [pc, #484]	; (80035f4 <HAL_RCC_OscConfig+0x4b0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d118      	bne.n	800344c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341a:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <HAL_RCC_OscConfig+0x4b0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a75      	ldr	r2, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0x4b0>)
 8003420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003426:	f7fd ffdd 	bl	80013e4 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342e:	f7fd ffd9 	bl	80013e4 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e118      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	4b6c      	ldr	r3, [pc, #432]	; (80035f4 <HAL_RCC_OscConfig+0x4b0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d106      	bne.n	8003462 <HAL_RCC_OscConfig+0x31e>
 8003454:	4b66      	ldr	r3, [pc, #408]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	4a65      	ldr	r2, [pc, #404]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	; 0x70
 8003460:	e01c      	b.n	800349c <HAL_RCC_OscConfig+0x358>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b05      	cmp	r3, #5
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0x340>
 800346a:	4b61      	ldr	r3, [pc, #388]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	4a60      	ldr	r2, [pc, #384]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6713      	str	r3, [r2, #112]	; 0x70
 8003476:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6713      	str	r3, [r2, #112]	; 0x70
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0x358>
 8003484:	4b5a      	ldr	r3, [pc, #360]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	4a59      	ldr	r2, [pc, #356]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	; 0x70
 8003490:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	4a56      	ldr	r2, [pc, #344]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003496:	f023 0304 	bic.w	r3, r3, #4
 800349a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d015      	beq.n	80034d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fd ff9e 	bl	80013e4 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fd ff9a 	bl	80013e4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0d7      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ee      	beq.n	80034ac <HAL_RCC_OscConfig+0x368>
 80034ce:	e014      	b.n	80034fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd ff88 	bl	80013e4 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fd ff84 	bl	80013e4 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0c1      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ee:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ee      	bne.n	80034d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d105      	bne.n	800350c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003500:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	4a3a      	ldr	r2, [pc, #232]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80ad 	beq.w	8003670 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b08      	cmp	r3, #8
 8003520:	d060      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d145      	bne.n	80035b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352a:	4b33      	ldr	r3, [pc, #204]	; (80035f8 <HAL_RCC_OscConfig+0x4b4>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fd ff58 	bl	80013e4 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003538:	f7fd ff54 	bl	80013e4 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e093      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	019b      	lsls	r3, r3, #6
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	3b01      	subs	r3, #1
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	061b      	lsls	r3, r3, #24
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	071b      	lsls	r3, r3, #28
 8003582:	491b      	ldr	r1, [pc, #108]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003588:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <HAL_RCC_OscConfig+0x4b4>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7fd ff29 	bl	80013e4 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003596:	f7fd ff25 	bl	80013e4 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e064      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x452>
 80035b4:	e05c      	b.n	8003670 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <HAL_RCC_OscConfig+0x4b4>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fd ff12 	bl	80013e4 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fd ff0e 	bl	80013e4 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e04d      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x480>
 80035e2:	e045      	b.n	8003670 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e040      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40007000 	.word	0x40007000
 80035f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <HAL_RCC_OscConfig+0x538>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d030      	beq.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d129      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d122      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003634:	4293      	cmp	r3, r2
 8003636:	d119      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	3b01      	subs	r3, #1
 8003646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d10f      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d107      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800

08003680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e041      	b.n	8003716 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd fc0c 	bl	8000ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 f9d8 	bl	8003a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d001      	beq.n	8003738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e04e      	b.n	80037d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a23      	ldr	r2, [pc, #140]	; (80037e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d022      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003762:	d01d      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d018      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1e      	ldr	r2, [pc, #120]	; (80037ec <HAL_TIM_Base_Start_IT+0xcc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d013      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00e      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1b      	ldr	r2, [pc, #108]	; (80037f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a19      	ldr	r2, [pc, #100]	; (80037f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a18      	ldr	r2, [pc, #96]	; (80037fc <HAL_TIM_Base_Start_IT+0xdc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d111      	bne.n	80037c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b06      	cmp	r3, #6
 80037b0:	d010      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0201 	orr.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c2:	e007      	b.n	80037d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40010000 	.word	0x40010000
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800
 80037f0:	40000c00 	.word	0x40000c00
 80037f4:	40010400 	.word	0x40010400
 80037f8:	40014000 	.word	0x40014000
 80037fc:	40001800 	.word	0x40001800

08003800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b02      	cmp	r3, #2
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0202 	mvn.w	r2, #2
 800382c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f8f8 	bl	8003a38 <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8ea 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f8fb 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b04      	cmp	r3, #4
 8003868:	d122      	bne.n	80038b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b04      	cmp	r3, #4
 8003876:	d11b      	bne.n	80038b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0204 	mvn.w	r2, #4
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2202      	movs	r2, #2
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f8ce 	bl	8003a38 <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8c0 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f8d1 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d122      	bne.n	8003904 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d11b      	bne.n	8003904 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0208 	mvn.w	r2, #8
 80038d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2204      	movs	r2, #4
 80038da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8a4 	bl	8003a38 <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f896 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f8a7 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b10      	cmp	r3, #16
 8003910:	d122      	bne.n	8003958 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b10      	cmp	r3, #16
 800391e:	d11b      	bne.n	8003958 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0210 	mvn.w	r2, #16
 8003928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2208      	movs	r2, #8
 800392e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f87a 	bl	8003a38 <HAL_TIM_IC_CaptureCallback>
 8003944:	e005      	b.n	8003952 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f86c 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f87d 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d10e      	bne.n	8003984 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b01      	cmp	r3, #1
 8003972:	d107      	bne.n	8003984 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0201 	mvn.w	r2, #1
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f846 	bl	8003a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398e:	2b80      	cmp	r3, #128	; 0x80
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b80      	cmp	r3, #128	; 0x80
 800399e:	d107      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f988 	bl	8003cc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	d10e      	bne.n	80039dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b40      	cmp	r3, #64	; 0x40
 80039ca:	d107      	bne.n	80039dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f842 	bl	8003a60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d10e      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d107      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0220 	mvn.w	r2, #32
 8003a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f952 	bl	8003cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a40      	ldr	r2, [pc, #256]	; (8003b88 <TIM_Base_SetConfig+0x114>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d013      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a92:	d00f      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a3d      	ldr	r2, [pc, #244]	; (8003b8c <TIM_Base_SetConfig+0x118>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00b      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a3c      	ldr	r2, [pc, #240]	; (8003b90 <TIM_Base_SetConfig+0x11c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d007      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a3b      	ldr	r2, [pc, #236]	; (8003b94 <TIM_Base_SetConfig+0x120>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3a      	ldr	r2, [pc, #232]	; (8003b98 <TIM_Base_SetConfig+0x124>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d108      	bne.n	8003ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a2f      	ldr	r2, [pc, #188]	; (8003b88 <TIM_Base_SetConfig+0x114>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d02b      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad4:	d027      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2c      	ldr	r2, [pc, #176]	; (8003b8c <TIM_Base_SetConfig+0x118>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d023      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2b      	ldr	r2, [pc, #172]	; (8003b90 <TIM_Base_SetConfig+0x11c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01f      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2a      	ldr	r2, [pc, #168]	; (8003b94 <TIM_Base_SetConfig+0x120>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01b      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a29      	ldr	r2, [pc, #164]	; (8003b98 <TIM_Base_SetConfig+0x124>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d017      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a28      	ldr	r2, [pc, #160]	; (8003b9c <TIM_Base_SetConfig+0x128>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a27      	ldr	r2, [pc, #156]	; (8003ba0 <TIM_Base_SetConfig+0x12c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00f      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a26      	ldr	r2, [pc, #152]	; (8003ba4 <TIM_Base_SetConfig+0x130>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00b      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a25      	ldr	r2, [pc, #148]	; (8003ba8 <TIM_Base_SetConfig+0x134>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d007      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a24      	ldr	r2, [pc, #144]	; (8003bac <TIM_Base_SetConfig+0x138>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d003      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <TIM_Base_SetConfig+0x13c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d108      	bne.n	8003b38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <TIM_Base_SetConfig+0x114>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d003      	beq.n	8003b6c <TIM_Base_SetConfig+0xf8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a0c      	ldr	r2, [pc, #48]	; (8003b98 <TIM_Base_SetConfig+0x124>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d103      	bne.n	8003b74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	615a      	str	r2, [r3, #20]
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40010400 	.word	0x40010400
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40014400 	.word	0x40014400
 8003ba4:	40014800 	.word	0x40014800
 8003ba8:	40001800 	.word	0x40001800
 8003bac:	40001c00 	.word	0x40001c00
 8003bb0:	40002000 	.word	0x40002000

08003bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e05a      	b.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d022      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c18:	d01d      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d018      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1b      	ldr	r2, [pc, #108]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00e      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a18      	ldr	r2, [pc, #96]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d009      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a17      	ldr	r2, [pc, #92]	; (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d004      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d10c      	bne.n	8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40000400 	.word	0x40000400
 8003c98:	40000800 	.word	0x40000800
 8003c9c:	40000c00 	.word	0x40000c00
 8003ca0:	40010400 	.word	0x40010400
 8003ca4:	40014000 	.word	0x40014000
 8003ca8:	40001800 	.word	0x40001800

08003cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e03f      	b.n	8003d66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd f928 	bl	8000f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2224      	movs	r2, #36	; 0x24
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f829 	bl	8003d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d74:	b0c0      	sub	sp, #256	; 0x100
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8c:	68d9      	ldr	r1, [r3, #12]
 8003d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	ea40 0301 	orr.w	r3, r0, r1
 8003d98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dc8:	f021 010c 	bic.w	r1, r1, #12
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dea:	6999      	ldr	r1, [r3, #24]
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	ea40 0301 	orr.w	r3, r0, r1
 8003df6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4b8f      	ldr	r3, [pc, #572]	; (800403c <UART_SetConfig+0x2cc>)
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d005      	beq.n	8003e10 <UART_SetConfig+0xa0>
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b8d      	ldr	r3, [pc, #564]	; (8004040 <UART_SetConfig+0x2d0>)
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d104      	bne.n	8003e1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e10:	f7fe fc2a 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 8003e14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e18:	e003      	b.n	8003e22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e1a:	f7fe fc11 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8003e1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e2c:	f040 810c 	bne.w	8004048 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e34:	2200      	movs	r2, #0
 8003e36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e42:	4622      	mov	r2, r4
 8003e44:	462b      	mov	r3, r5
 8003e46:	1891      	adds	r1, r2, r2
 8003e48:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e4a:	415b      	adcs	r3, r3
 8003e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e52:	4621      	mov	r1, r4
 8003e54:	eb12 0801 	adds.w	r8, r2, r1
 8003e58:	4629      	mov	r1, r5
 8003e5a:	eb43 0901 	adc.w	r9, r3, r1
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e72:	4690      	mov	r8, r2
 8003e74:	4699      	mov	r9, r3
 8003e76:	4623      	mov	r3, r4
 8003e78:	eb18 0303 	adds.w	r3, r8, r3
 8003e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e80:	462b      	mov	r3, r5
 8003e82:	eb49 0303 	adc.w	r3, r9, r3
 8003e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	18db      	adds	r3, r3, r3
 8003ea2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	eb42 0303 	adc.w	r3, r2, r3
 8003eaa:	657b      	str	r3, [r7, #84]	; 0x54
 8003eac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003eb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003eb4:	f7fc f9a6 	bl	8000204 <__aeabi_uldivmod>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4b61      	ldr	r3, [pc, #388]	; (8004044 <UART_SetConfig+0x2d4>)
 8003ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	011c      	lsls	r4, r3, #4
 8003ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ed0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ed4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ed8:	4642      	mov	r2, r8
 8003eda:	464b      	mov	r3, r9
 8003edc:	1891      	adds	r1, r2, r2
 8003ede:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ee0:	415b      	adcs	r3, r3
 8003ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ee4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ee8:	4641      	mov	r1, r8
 8003eea:	eb12 0a01 	adds.w	sl, r2, r1
 8003eee:	4649      	mov	r1, r9
 8003ef0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f08:	4692      	mov	sl, r2
 8003f0a:	469b      	mov	fp, r3
 8003f0c:	4643      	mov	r3, r8
 8003f0e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f16:	464b      	mov	r3, r9
 8003f18:	eb4b 0303 	adc.w	r3, fp, r3
 8003f1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f34:	460b      	mov	r3, r1
 8003f36:	18db      	adds	r3, r3, r3
 8003f38:	643b      	str	r3, [r7, #64]	; 0x40
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	eb42 0303 	adc.w	r3, r2, r3
 8003f40:	647b      	str	r3, [r7, #68]	; 0x44
 8003f42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f4a:	f7fc f95b 	bl	8000204 <__aeabi_uldivmod>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4611      	mov	r1, r2
 8003f54:	4b3b      	ldr	r3, [pc, #236]	; (8004044 <UART_SetConfig+0x2d4>)
 8003f56:	fba3 2301 	umull	r2, r3, r3, r1
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	2264      	movs	r2, #100	; 0x64
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	1acb      	subs	r3, r1, r3
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f6a:	4b36      	ldr	r3, [pc, #216]	; (8004044 <UART_SetConfig+0x2d4>)
 8003f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f78:	441c      	add	r4, r3
 8003f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	464b      	mov	r3, r9
 8003f90:	1891      	adds	r1, r2, r2
 8003f92:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f94:	415b      	adcs	r3, r3
 8003f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	1851      	adds	r1, r2, r1
 8003fa0:	6339      	str	r1, [r7, #48]	; 0x30
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	414b      	adcs	r3, r1
 8003fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fb4:	4659      	mov	r1, fp
 8003fb6:	00cb      	lsls	r3, r1, #3
 8003fb8:	4651      	mov	r1, sl
 8003fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fbe:	4651      	mov	r1, sl
 8003fc0:	00ca      	lsls	r2, r1, #3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4642      	mov	r2, r8
 8003fca:	189b      	adds	r3, r3, r2
 8003fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fd0:	464b      	mov	r3, r9
 8003fd2:	460a      	mov	r2, r1
 8003fd4:	eb42 0303 	adc.w	r3, r2, r3
 8003fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fe8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	18db      	adds	r3, r3, r3
 8003ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	eb42 0303 	adc.w	r3, r2, r3
 8003ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ffe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004002:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004006:	f7fc f8fd 	bl	8000204 <__aeabi_uldivmod>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4b0d      	ldr	r3, [pc, #52]	; (8004044 <UART_SetConfig+0x2d4>)
 8004010:	fba3 1302 	umull	r1, r3, r3, r2
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	2164      	movs	r1, #100	; 0x64
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	3332      	adds	r3, #50	; 0x32
 8004022:	4a08      	ldr	r2, [pc, #32]	; (8004044 <UART_SetConfig+0x2d4>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	f003 0207 	and.w	r2, r3, #7
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4422      	add	r2, r4
 8004036:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004038:	e105      	b.n	8004246 <UART_SetConfig+0x4d6>
 800403a:	bf00      	nop
 800403c:	40011000 	.word	0x40011000
 8004040:	40011400 	.word	0x40011400
 8004044:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800404c:	2200      	movs	r2, #0
 800404e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004052:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004056:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800405a:	4642      	mov	r2, r8
 800405c:	464b      	mov	r3, r9
 800405e:	1891      	adds	r1, r2, r2
 8004060:	6239      	str	r1, [r7, #32]
 8004062:	415b      	adcs	r3, r3
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
 8004066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800406a:	4641      	mov	r1, r8
 800406c:	1854      	adds	r4, r2, r1
 800406e:	4649      	mov	r1, r9
 8004070:	eb43 0501 	adc.w	r5, r3, r1
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	00eb      	lsls	r3, r5, #3
 800407e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004082:	00e2      	lsls	r2, r4, #3
 8004084:	4614      	mov	r4, r2
 8004086:	461d      	mov	r5, r3
 8004088:	4643      	mov	r3, r8
 800408a:	18e3      	adds	r3, r4, r3
 800408c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004090:	464b      	mov	r3, r9
 8004092:	eb45 0303 	adc.w	r3, r5, r3
 8004096:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800409a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040b6:	4629      	mov	r1, r5
 80040b8:	008b      	lsls	r3, r1, #2
 80040ba:	4621      	mov	r1, r4
 80040bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040c0:	4621      	mov	r1, r4
 80040c2:	008a      	lsls	r2, r1, #2
 80040c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040c8:	f7fc f89c 	bl	8000204 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4b60      	ldr	r3, [pc, #384]	; (8004254 <UART_SetConfig+0x4e4>)
 80040d2:	fba3 2302 	umull	r2, r3, r3, r2
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	011c      	lsls	r4, r3, #4
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	1891      	adds	r1, r2, r2
 80040f2:	61b9      	str	r1, [r7, #24]
 80040f4:	415b      	adcs	r3, r3
 80040f6:	61fb      	str	r3, [r7, #28]
 80040f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040fc:	4641      	mov	r1, r8
 80040fe:	1851      	adds	r1, r2, r1
 8004100:	6139      	str	r1, [r7, #16]
 8004102:	4649      	mov	r1, r9
 8004104:	414b      	adcs	r3, r1
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004114:	4659      	mov	r1, fp
 8004116:	00cb      	lsls	r3, r1, #3
 8004118:	4651      	mov	r1, sl
 800411a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800411e:	4651      	mov	r1, sl
 8004120:	00ca      	lsls	r2, r1, #3
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	4603      	mov	r3, r0
 8004128:	4642      	mov	r2, r8
 800412a:	189b      	adds	r3, r3, r2
 800412c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004130:	464b      	mov	r3, r9
 8004132:	460a      	mov	r2, r1
 8004134:	eb42 0303 	adc.w	r3, r2, r3
 8004138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	67bb      	str	r3, [r7, #120]	; 0x78
 8004146:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004154:	4649      	mov	r1, r9
 8004156:	008b      	lsls	r3, r1, #2
 8004158:	4641      	mov	r1, r8
 800415a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800415e:	4641      	mov	r1, r8
 8004160:	008a      	lsls	r2, r1, #2
 8004162:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004166:	f7fc f84d 	bl	8000204 <__aeabi_uldivmod>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4b39      	ldr	r3, [pc, #228]	; (8004254 <UART_SetConfig+0x4e4>)
 8004170:	fba3 1302 	umull	r1, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	2164      	movs	r1, #100	; 0x64
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	3332      	adds	r3, #50	; 0x32
 8004182:	4a34      	ldr	r2, [pc, #208]	; (8004254 <UART_SetConfig+0x4e4>)
 8004184:	fba2 2303 	umull	r2, r3, r2, r3
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800418e:	441c      	add	r4, r3
 8004190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004194:	2200      	movs	r2, #0
 8004196:	673b      	str	r3, [r7, #112]	; 0x70
 8004198:	677a      	str	r2, [r7, #116]	; 0x74
 800419a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800419e:	4642      	mov	r2, r8
 80041a0:	464b      	mov	r3, r9
 80041a2:	1891      	adds	r1, r2, r2
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	415b      	adcs	r3, r3
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041ae:	4641      	mov	r1, r8
 80041b0:	1851      	adds	r1, r2, r1
 80041b2:	6039      	str	r1, [r7, #0]
 80041b4:	4649      	mov	r1, r9
 80041b6:	414b      	adcs	r3, r1
 80041b8:	607b      	str	r3, [r7, #4]
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041c6:	4659      	mov	r1, fp
 80041c8:	00cb      	lsls	r3, r1, #3
 80041ca:	4651      	mov	r1, sl
 80041cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041d0:	4651      	mov	r1, sl
 80041d2:	00ca      	lsls	r2, r1, #3
 80041d4:	4610      	mov	r0, r2
 80041d6:	4619      	mov	r1, r3
 80041d8:	4603      	mov	r3, r0
 80041da:	4642      	mov	r2, r8
 80041dc:	189b      	adds	r3, r3, r2
 80041de:	66bb      	str	r3, [r7, #104]	; 0x68
 80041e0:	464b      	mov	r3, r9
 80041e2:	460a      	mov	r2, r1
 80041e4:	eb42 0303 	adc.w	r3, r2, r3
 80041e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	663b      	str	r3, [r7, #96]	; 0x60
 80041f4:	667a      	str	r2, [r7, #100]	; 0x64
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004202:	4649      	mov	r1, r9
 8004204:	008b      	lsls	r3, r1, #2
 8004206:	4641      	mov	r1, r8
 8004208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800420c:	4641      	mov	r1, r8
 800420e:	008a      	lsls	r2, r1, #2
 8004210:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004214:	f7fb fff6 	bl	8000204 <__aeabi_uldivmod>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <UART_SetConfig+0x4e4>)
 800421e:	fba3 1302 	umull	r1, r3, r3, r2
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2164      	movs	r1, #100	; 0x64
 8004226:	fb01 f303 	mul.w	r3, r1, r3
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	3332      	adds	r3, #50	; 0x32
 8004230:	4a08      	ldr	r2, [pc, #32]	; (8004254 <UART_SetConfig+0x4e4>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	f003 020f 	and.w	r2, r3, #15
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4422      	add	r2, r4
 8004244:	609a      	str	r2, [r3, #8]
}
 8004246:	bf00      	nop
 8004248:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800424c:	46bd      	mov	sp, r7
 800424e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004252:	bf00      	nop
 8004254:	51eb851f 	.word	0x51eb851f

08004258 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004258:	b084      	sub	sp, #16
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	f107 001c 	add.w	r0, r7, #28
 8004266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	2b01      	cmp	r3, #1
 800426e:	d122      	bne.n	80042b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d105      	bne.n	80042aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fa9c 	bl	80047e8 <USB_CoreReset>
 80042b0:	4603      	mov	r3, r0
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e01a      	b.n	80042ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fa90 	bl	80047e8 <USB_CoreReset>
 80042c8:	4603      	mov	r3, r0
 80042ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38
 80042de:	e005      	b.n	80042ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d10b      	bne.n	800430a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f043 0206 	orr.w	r2, r3, #6
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f043 0220 	orr.w	r2, r3, #32
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800430a:	7bfb      	ldrb	r3, [r7, #15]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004316:	b004      	add	sp, #16
 8004318:	4770      	bx	lr

0800431a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f023 0201 	bic.w	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d115      	bne.n	800438a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800436a:	2001      	movs	r0, #1
 800436c:	f7fd f846 	bl	80013fc <HAL_Delay>
      ms++;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3301      	adds	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa28 	bl	80047cc <USB_GetMode>
 800437c:	4603      	mov	r3, r0
 800437e:	2b01      	cmp	r3, #1
 8004380:	d01e      	beq.n	80043c0 <USB_SetCurrentMode+0x84>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b31      	cmp	r3, #49	; 0x31
 8004386:	d9f0      	bls.n	800436a <USB_SetCurrentMode+0x2e>
 8004388:	e01a      	b.n	80043c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d115      	bne.n	80043bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800439c:	2001      	movs	r0, #1
 800439e:	f7fd f82d 	bl	80013fc <HAL_Delay>
      ms++;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3301      	adds	r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fa0f 	bl	80047cc <USB_GetMode>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <USB_SetCurrentMode+0x84>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b31      	cmp	r3, #49	; 0x31
 80043b8:	d9f0      	bls.n	800439c <USB_SetCurrentMode+0x60>
 80043ba:	e001      	b.n	80043c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e005      	b.n	80043cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b32      	cmp	r3, #50	; 0x32
 80043c4:	d101      	bne.n	80043ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043d4:	b084      	sub	sp, #16
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	e009      	b.n	8004408 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	3340      	adds	r3, #64	; 0x40
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	2200      	movs	r2, #0
 8004400:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	3301      	adds	r3, #1
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	2b0e      	cmp	r3, #14
 800440c:	d9f2      	bls.n	80043f4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800440e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d11c      	bne.n	800444e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004422:	f043 0302 	orr.w	r3, r3, #2
 8004426:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	e005      	b.n	800445a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004460:	461a      	mov	r2, r3
 8004462:	2300      	movs	r3, #0
 8004464:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446c:	4619      	mov	r1, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	461a      	mov	r2, r3
 8004476:	680b      	ldr	r3, [r1, #0]
 8004478:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800447a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447c:	2b01      	cmp	r3, #1
 800447e:	d10c      	bne.n	800449a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004486:	2100      	movs	r1, #0
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f965 	bl	8004758 <USB_SetDevSpeed>
 800448e:	e008      	b.n	80044a2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004490:	2101      	movs	r1, #1
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f960 	bl	8004758 <USB_SetDevSpeed>
 8004498:	e003      	b.n	80044a2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800449a:	2103      	movs	r1, #3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f95b 	bl	8004758 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044a2:	2110      	movs	r1, #16
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f8f3 	bl	8004690 <USB_FlushTxFifo>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f91f 	bl	80046f8 <USB_FlushRxFifo>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ca:	461a      	mov	r2, r3
 80044cc:	2300      	movs	r3, #0
 80044ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d6:	461a      	mov	r2, r3
 80044d8:	2300      	movs	r3, #0
 80044da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e2:	461a      	mov	r2, r3
 80044e4:	2300      	movs	r3, #0
 80044e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	e043      	b.n	8004576 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004504:	d118      	bne.n	8004538 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	461a      	mov	r2, r3
 800451a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	e013      	b.n	800454a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452e:	461a      	mov	r2, r3
 8004530:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e008      	b.n	800454a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004544:	461a      	mov	r2, r3
 8004546:	2300      	movs	r3, #0
 8004548:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004556:	461a      	mov	r2, r3
 8004558:	2300      	movs	r3, #0
 800455a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004568:	461a      	mov	r2, r3
 800456a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800456e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	3301      	adds	r3, #1
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	429a      	cmp	r2, r3
 800457c:	d3b7      	bcc.n	80044ee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	e043      	b.n	800460c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800459a:	d118      	bne.n	80045ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ae:	461a      	mov	r2, r3
 80045b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	e013      	b.n	80045e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	461a      	mov	r2, r3
 80045c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	e008      	b.n	80045e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	461a      	mov	r2, r3
 80045dc:	2300      	movs	r3, #0
 80045de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	461a      	mov	r2, r3
 80045ee:	2300      	movs	r3, #0
 80045f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fe:	461a      	mov	r2, r3
 8004600:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004604:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	3301      	adds	r3, #1
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	429a      	cmp	r2, r3
 8004612:	d3b7      	bcc.n	8004584 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004622:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004626:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004634:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	2b00      	cmp	r3, #0
 800463a:	d105      	bne.n	8004648 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	f043 0210 	orr.w	r2, r3, #16
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699a      	ldr	r2, [r3, #24]
 800464c:	4b0f      	ldr	r3, [pc, #60]	; (800468c <USB_DevInit+0x2b8>)
 800464e:	4313      	orrs	r3, r2
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f043 0208 	orr.w	r2, r3, #8
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d107      	bne.n	800467c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004674:	f043 0304 	orr.w	r3, r3, #4
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800467c:	7dfb      	ldrb	r3, [r7, #23]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004688:	b004      	add	sp, #16
 800468a:	4770      	bx	lr
 800468c:	803c3800 	.word	0x803c3800

08004690 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <USB_FlushTxFifo+0x64>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e01b      	b.n	80046e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	daf2      	bge.n	800469e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	019b      	lsls	r3, r3, #6
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3301      	adds	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a08      	ldr	r2, [pc, #32]	; (80046f4 <USB_FlushTxFifo+0x64>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e006      	b.n	80046e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d0f0      	beq.n	80046c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	00030d40 	.word	0x00030d40

080046f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3301      	adds	r3, #1
 8004708:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4a11      	ldr	r2, [pc, #68]	; (8004754 <USB_FlushRxFifo+0x5c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e018      	b.n	8004748 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	daf2      	bge.n	8004704 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2210      	movs	r2, #16
 8004726:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3301      	adds	r3, #1
 800472c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a08      	ldr	r2, [pc, #32]	; (8004754 <USB_FlushRxFifo+0x5c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e006      	b.n	8004748 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	2b10      	cmp	r3, #16
 8004744:	d0f0      	beq.n	8004728 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	00030d40 	.word	0x00030d40

08004758 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	68f9      	ldr	r1, [r7, #12]
 8004774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004778:	4313      	orrs	r3, r2
 800477a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800478a:	b480      	push	{r7}
 800478c:	b085      	sub	sp, #20
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047a4:	f023 0303 	bic.w	r3, r3, #3
 80047a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b8:	f043 0302 	orr.w	r3, r3, #2
 80047bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f003 0301 	and.w	r3, r3, #1
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3301      	adds	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4a13      	ldr	r2, [pc, #76]	; (800484c <USB_CoreReset+0x64>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e01b      	b.n	800483e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	daf2      	bge.n	80047f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f043 0201 	orr.w	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3301      	adds	r3, #1
 8004822:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4a09      	ldr	r2, [pc, #36]	; (800484c <USB_CoreReset+0x64>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e006      	b.n	800483e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b01      	cmp	r3, #1
 800483a:	d0f0      	beq.n	800481e <USB_CoreReset+0x36>

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	00030d40 	.word	0x00030d40

08004850 <arm_fir_init_f32>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	9c04      	ldr	r4, [sp, #16]
 8004854:	6082      	str	r2, [r0, #8]
 8004856:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800485a:	3c01      	subs	r4, #1
 800485c:	440c      	add	r4, r1
 800485e:	8001      	strh	r1, [r0, #0]
 8004860:	4605      	mov	r5, r0
 8004862:	00a2      	lsls	r2, r4, #2
 8004864:	4618      	mov	r0, r3
 8004866:	2100      	movs	r1, #0
 8004868:	f000 faa6 	bl	8004db8 <memset>
 800486c:	6068      	str	r0, [r5, #4]
 800486e:	bd38      	pop	{r3, r4, r5, pc}

08004870 <arm_fir_f32>:
 8004870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004874:	ed2d 8b10 	vpush	{d8-d15}
 8004878:	b08b      	sub	sp, #44	; 0x2c
 800487a:	f8b0 8000 	ldrh.w	r8, [r0]
 800487e:	9003      	str	r0, [sp, #12]
 8004880:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 8004884:	461e      	mov	r6, r3
 8004886:	9304      	str	r3, [sp, #16]
 8004888:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
 800488c:	3b01      	subs	r3, #1
 800488e:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 8004892:	08f3      	lsrs	r3, r6, #3
 8004894:	9002      	str	r0, [sp, #8]
 8004896:	9500      	str	r5, [sp, #0]
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	f000 81f1 	beq.w	8004c80 <arm_fir_f32+0x410>
 800489e:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 80048a2:	f100 0620 	add.w	r6, r0, #32
 80048a6:	9405      	str	r4, [sp, #20]
 80048a8:	0164      	lsls	r4, r4, #5
 80048aa:	4420      	add	r0, r4
 80048ac:	f008 0a07 	and.w	sl, r8, #7
 80048b0:	9607      	str	r6, [sp, #28]
 80048b2:	9006      	str	r0, [sp, #24]
 80048b4:	469c      	mov	ip, r3
 80048b6:	4650      	mov	r0, sl
 80048b8:	4623      	mov	r3, r4
 80048ba:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80048be:	f8cd 8020 	str.w	r8, [sp, #32]
 80048c2:	1937      	adds	r7, r6, r4
 80048c4:	f109 0b1c 	add.w	fp, r9, #28
 80048c8:	f8dd e014 	ldr.w	lr, [sp, #20]
 80048cc:	9209      	str	r2, [sp, #36]	; 0x24
 80048ce:	f8cd 9014 	str.w	r9, [sp, #20]
 80048d2:	f101 0620 	add.w	r6, r1, #32
 80048d6:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80048da:	9106      	str	r1, [sp, #24]
 80048dc:	3520      	adds	r5, #32
 80048de:	f102 0420 	add.w	r4, r2, #32
 80048e2:	4698      	mov	r8, r3
 80048e4:	f856 3c20 	ldr.w	r3, [r6, #-32]
 80048e8:	f845 3c20 	str.w	r3, [r5, #-32]
 80048ec:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 80048f0:	f845 3c1c 	str.w	r3, [r5, #-28]
 80048f4:	f856 3c18 	ldr.w	r3, [r6, #-24]
 80048f8:	f845 3c18 	str.w	r3, [r5, #-24]
 80048fc:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8004900:	f845 3c14 	str.w	r3, [r5, #-20]
 8004904:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8004908:	f845 3c10 	str.w	r3, [r5, #-16]
 800490c:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8004910:	f845 3c0c 	str.w	r3, [r5, #-12]
 8004914:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8004918:	f845 3c08 	str.w	r3, [r5, #-8]
 800491c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004920:	f845 3c04 	str.w	r3, [r5, #-4]
 8004924:	ed1b 2a07 	vldr	s4, [fp, #-28]	; 0xffffffe4
 8004928:	ed5b 1a06 	vldr	s3, [fp, #-24]	; 0xffffffe8
 800492c:	ed1b 1a05 	vldr	s2, [fp, #-20]	; 0xffffffec
 8004930:	ed5b 0a04 	vldr	s1, [fp, #-16]
 8004934:	ed1b 0a03 	vldr	s0, [fp, #-12]
 8004938:	ed1b 8a02 	vldr	s16, [fp, #-8]
 800493c:	ed5b 8a01 	vldr	s17, [fp, #-4]
 8004940:	eddf 6af5 	vldr	s13, [pc, #980]	; 8004d18 <arm_fir_f32+0x4a8>
 8004944:	465a      	mov	r2, fp
 8004946:	f1be 0f00 	cmp.w	lr, #0
 800494a:	f000 81fe 	beq.w	8004d4a <arm_fir_f32+0x4da>
 800494e:	f10b 0120 	add.w	r1, fp, #32
 8004952:	eef0 ba66 	vmov.f32	s23, s13
 8004956:	eeb0 6a66 	vmov.f32	s12, s13
 800495a:	eeb0 9a66 	vmov.f32	s18, s13
 800495e:	eef0 9a66 	vmov.f32	s19, s13
 8004962:	eeb0 aa66 	vmov.f32	s20, s13
 8004966:	eef0 aa66 	vmov.f32	s21, s13
 800496a:	eeb0 ba66 	vmov.f32	s22, s13
 800496e:	460a      	mov	r2, r1
 8004970:	4653      	mov	r3, sl
 8004972:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8004976:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 800497a:	ed53 ea07 	vldr	s29, [r3, #-28]	; 0xffffffe4
 800497e:	ed13 ea06 	vldr	s28, [r3, #-24]	; 0xffffffe8
 8004982:	ed53 da05 	vldr	s27, [r3, #-20]	; 0xffffffec
 8004986:	ed53 ca04 	vldr	s25, [r3, #-16]
 800498a:	ed53 2a03 	vldr	s5, [r3, #-12]
 800498e:	ed13 4a02 	vldr	s8, [r3, #-8]
 8004992:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004996:	ee67 fa02 	vmul.f32	s31, s14, s4
 800499a:	ee27 da21 	vmul.f32	s26, s14, s3
 800499e:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
 80049a2:	ee27 ca01 	vmul.f32	s24, s14, s2
 80049a6:	ee27 3a20 	vmul.f32	s6, s14, s1
 80049aa:	ee67 3a00 	vmul.f32	s7, s14, s0
 80049ae:	ee67 5a08 	vmul.f32	s11, s14, s16
 80049b2:	ee27 fa28 	vmul.f32	s30, s14, s17
 80049b6:	ee67 7a24 	vmul.f32	s15, s14, s9
 80049ba:	ee3f ba8b 	vadd.f32	s22, s31, s22
 80049be:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80049c2:	ee6e faa1 	vmul.f32	s31, s29, s3
 80049c6:	ee2e da81 	vmul.f32	s26, s29, s2
 80049ca:	ed52 1a06 	vldr	s3, [r2, #-24]	; 0xffffffe8
 80049ce:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80049d2:	ee73 9a29 	vadd.f32	s19, s6, s19
 80049d6:	ee2e caa0 	vmul.f32	s24, s29, s1
 80049da:	ee2e 3a80 	vmul.f32	s6, s29, s0
 80049de:	ee33 9a89 	vadd.f32	s18, s7, s18
 80049e2:	ee35 6a86 	vadd.f32	s12, s11, s12
 80049e6:	ee6e 3a88 	vmul.f32	s7, s29, s16
 80049ea:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 80049ee:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80049f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f6:	ee24 faae 	vmul.f32	s30, s9, s29
 80049fa:	ee6e ea82 	vmul.f32	s29, s29, s4
 80049fe:	ee2e 7a01 	vmul.f32	s14, s28, s2
 8004a02:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8004a06:	ed12 1a05 	vldr	s2, [r2, #-20]	; 0xffffffec
 8004a0a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8004a0e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004a12:	ee2e da20 	vmul.f32	s26, s28, s1
 8004a16:	ee2e ca00 	vmul.f32	s24, s28, s0
 8004a1a:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004a1e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004a22:	ee2e 3a08 	vmul.f32	s6, s28, s16
 8004a26:	ee6e 3a28 	vmul.f32	s7, s28, s17
 8004a2a:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004a2e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004a32:	ee64 5a8e 	vmul.f32	s11, s9, s28
 8004a36:	ee22 fa0e 	vmul.f32	s30, s4, s28
 8004a3a:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8004a3e:	ee2e ea21 	vmul.f32	s28, s28, s3
 8004a42:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 8004a46:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8004a4a:	ed52 0a04 	vldr	s1, [r2, #-16]
 8004a4e:	ee2d da80 	vmul.f32	s26, s27, s0
 8004a52:	ee37 ba0b 	vadd.f32	s22, s14, s22
 8004a56:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004a5a:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004a5e:	ee2d ca88 	vmul.f32	s24, s27, s16
 8004a62:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 8004a66:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004a6a:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004a6e:	ee64 3aad 	vmul.f32	s7, s9, s27
 8004a72:	ee62 5a2d 	vmul.f32	s11, s4, s27
 8004a76:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004a7a:	ee7e 7a27 	vadd.f32	s15, s28, s15
 8004a7e:	ee21 faad 	vmul.f32	s30, s3, s27
 8004a82:	ee6d da81 	vmul.f32	s27, s27, s2
 8004a86:	ee6c fa80 	vmul.f32	s31, s25, s0
 8004a8a:	ee36 ba8b 	vadd.f32	s22, s13, s22
 8004a8e:	ed12 0a03 	vldr	s0, [r2, #-12]
 8004a92:	ee3d da2a 	vadd.f32	s26, s26, s21
 8004a96:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004a9a:	ee6c aa88 	vmul.f32	s21, s25, s16
 8004a9e:	ee2c caa8 	vmul.f32	s24, s25, s17
 8004aa2:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004aa6:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004aaa:	ee24 3aac 	vmul.f32	s6, s9, s25
 8004aae:	ee62 3a2c 	vmul.f32	s7, s4, s25
 8004ab2:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004ab6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004aba:	ee61 5aac 	vmul.f32	s11, s3, s25
 8004abe:	ee21 fa2c 	vmul.f32	s30, s2, s25
 8004ac2:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8004ac6:	ee6c caa0 	vmul.f32	s25, s25, s1
 8004aca:	ee62 ea88 	vmul.f32	s29, s5, s16
 8004ace:	ee3a da8d 	vadd.f32	s26, s21, s26
 8004ad2:	ed12 8a02 	vldr	s16, [r2, #-8]
 8004ad6:	ee62 aaa8 	vmul.f32	s21, s5, s17
 8004ada:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8004ade:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004ae2:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004ae6:	ee24 caa2 	vmul.f32	s24, s9, s5
 8004aea:	ee22 3a22 	vmul.f32	s6, s4, s5
 8004aee:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004af2:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004af6:	ee61 3aa2 	vmul.f32	s7, s3, s5
 8004afa:	ee61 5a22 	vmul.f32	s11, s2, s5
 8004afe:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004b02:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8004b06:	ee20 faa2 	vmul.f32	s30, s1, s5
 8004b0a:	ee62 2a80 	vmul.f32	s5, s5, s0
 8004b0e:	ee7e fa8b 	vadd.f32	s31, s29, s22
 8004b12:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8004b16:	ee24 ba28 	vmul.f32	s22, s8, s17
 8004b1a:	ee7a aa8d 	vadd.f32	s21, s21, s26
 8004b1e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004b22:	ee24 da84 	vmul.f32	s26, s9, s8
 8004b26:	ee22 ca04 	vmul.f32	s24, s4, s8
 8004b2a:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004b2e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004b32:	ee21 3a84 	vmul.f32	s6, s3, s8
 8004b36:	ee61 3a04 	vmul.f32	s7, s2, s8
 8004b3a:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004b3e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004b42:	ee60 5a84 	vmul.f32	s11, s1, s8
 8004b46:	ee20 7a04 	vmul.f32	s14, s0, s8
 8004b4a:	ee64 6a08 	vmul.f32	s13, s8, s16
 8004b4e:	ed52 8a01 	vldr	s17, [r2, #-4]
 8004b52:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004b56:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004b5a:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004b5e:	ee37 7a2b 	vadd.f32	s14, s14, s23
 8004b62:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004b66:	ee3b ba2f 	vadd.f32	s22, s22, s31
 8004b6a:	ee64 4a85 	vmul.f32	s9, s9, s10
 8004b6e:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8004b72:	ee22 4a05 	vmul.f32	s8, s4, s10
 8004b76:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004b7a:	ee61 2a85 	vmul.f32	s5, s3, s10
 8004b7e:	ee21 3a05 	vmul.f32	s6, s2, s10
 8004b82:	ee60 3a85 	vmul.f32	s7, s1, s10
 8004b86:	ee60 5a05 	vmul.f32	s11, s0, s10
 8004b8a:	ee68 ba05 	vmul.f32	s23, s16, s10
 8004b8e:	ee65 7a28 	vmul.f32	s15, s10, s17
 8004b92:	3320      	adds	r3, #32
 8004b94:	429f      	cmp	r7, r3
 8004b96:	ee34 ba8b 	vadd.f32	s22, s9, s22
 8004b9a:	ee74 aa2a 	vadd.f32	s21, s8, s21
 8004b9e:	ee32 aa8a 	vadd.f32	s20, s5, s20
 8004ba2:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004ba6:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004baa:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004bae:	ee7b ba87 	vadd.f32	s23, s23, s14
 8004bb2:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8004bb6:	f102 0220 	add.w	r2, r2, #32
 8004bba:	f47f aeda 	bne.w	8004972 <arm_fir_f32+0x102>
 8004bbe:	eb0b 0208 	add.w	r2, fp, r8
 8004bc2:	46cb      	mov	fp, r9
 8004bc4:	b3a0      	cbz	r0, 8004c30 <arm_fir_f32+0x3c0>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	ecfb 7a01 	vldmia	fp!, {s15}
 8004bcc:	ecf2 5a01 	vldmia	r2!, {s11}
 8004bd0:	ee27 2a82 	vmul.f32	s4, s15, s4
 8004bd4:	ee67 2aa1 	vmul.f32	s5, s15, s3
 8004bd8:	ee27 3a81 	vmul.f32	s6, s15, s2
 8004bdc:	ee67 3aa0 	vmul.f32	s7, s15, s1
 8004be0:	ee27 4a80 	vmul.f32	s8, s15, s0
 8004be4:	ee67 4a88 	vmul.f32	s9, s15, s16
 8004be8:	ee27 5aa8 	vmul.f32	s10, s15, s17
 8004bec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	ee3b ba02 	vadd.f32	s22, s22, s4
 8004bf6:	ee7a aaa2 	vadd.f32	s21, s21, s5
 8004bfa:	eeb0 2a61 	vmov.f32	s4, s3
 8004bfe:	ee3a aa03 	vadd.f32	s20, s20, s6
 8004c02:	eef0 1a41 	vmov.f32	s3, s2
 8004c06:	ee79 9aa3 	vadd.f32	s19, s19, s7
 8004c0a:	eeb0 1a60 	vmov.f32	s2, s1
 8004c0e:	ee39 9a04 	vadd.f32	s18, s18, s8
 8004c12:	eef0 0a40 	vmov.f32	s1, s0
 8004c16:	ee36 6a24 	vadd.f32	s12, s12, s9
 8004c1a:	eeb0 0a48 	vmov.f32	s0, s16
 8004c1e:	ee7b ba85 	vadd.f32	s23, s23, s10
 8004c22:	eeb0 8a68 	vmov.f32	s16, s17
 8004c26:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004c2a:	eef0 8a65 	vmov.f32	s17, s11
 8004c2e:	d1cb      	bne.n	8004bc8 <arm_fir_f32+0x358>
 8004c30:	f1bc 0c01 	subs.w	ip, ip, #1
 8004c34:	ed04 ba08 	vstr	s22, [r4, #-32]	; 0xffffffe0
 8004c38:	ed44 aa07 	vstr	s21, [r4, #-28]	; 0xffffffe4
 8004c3c:	ed04 aa06 	vstr	s20, [r4, #-24]	; 0xffffffe8
 8004c40:	ed44 9a05 	vstr	s19, [r4, #-20]	; 0xffffffec
 8004c44:	ed04 9a04 	vstr	s18, [r4, #-16]
 8004c48:	ed04 6a03 	vstr	s12, [r4, #-12]
 8004c4c:	ed44 ba02 	vstr	s23, [r4, #-8]
 8004c50:	ed44 6a01 	vstr	s13, [r4, #-4]
 8004c54:	f106 0620 	add.w	r6, r6, #32
 8004c58:	f105 0520 	add.w	r5, r5, #32
 8004c5c:	f104 0420 	add.w	r4, r4, #32
 8004c60:	468b      	mov	fp, r1
 8004c62:	f47f ae3f 	bne.w	80048e4 <arm_fir_f32+0x74>
 8004c66:	9b01      	ldr	r3, [sp, #4]
 8004c68:	9800      	ldr	r0, [sp, #0]
 8004c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c70:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 8004c74:	015b      	lsls	r3, r3, #5
 8004c76:	4418      	add	r0, r3
 8004c78:	4419      	add	r1, r3
 8004c7a:	441a      	add	r2, r3
 8004c7c:	4499      	add	r9, r3
 8004c7e:	9000      	str	r0, [sp, #0]
 8004c80:	9b04      	ldr	r3, [sp, #16]
 8004c82:	f013 0707 	ands.w	r7, r3, #7
 8004c86:	d020      	beq.n	8004cca <arm_fir_f32+0x45a>
 8004c88:	00bf      	lsls	r7, r7, #2
 8004c8a:	9e00      	ldr	r6, [sp, #0]
 8004c8c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004c90:	eb01 0c07 	add.w	ip, r1, r7
 8004c94:	464d      	mov	r5, r9
 8004c96:	f851 3b04 	ldr.w	r3, [r1], #4
 8004c9a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004d18 <arm_fir_f32+0x4a8>
 8004c9e:	f846 3b04 	str.w	r3, [r6], #4
 8004ca2:	4674      	mov	r4, lr
 8004ca4:	4643      	mov	r3, r8
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	ecf0 7a01 	vldmia	r0!, {s15}
 8004cac:	ecf4 6a01 	vldmia	r4!, {s13}
 8004cb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cba:	d1f5      	bne.n	8004ca8 <arm_fir_f32+0x438>
 8004cbc:	4561      	cmp	r1, ip
 8004cbe:	eca2 7a01 	vstmia	r2!, {s14}
 8004cc2:	f105 0504 	add.w	r5, r5, #4
 8004cc6:	d1e6      	bne.n	8004c96 <arm_fir_f32+0x426>
 8004cc8:	44b9      	add	r9, r7
 8004cca:	f108 38ff 	add.w	r8, r8, #4294967295
 8004cce:	9b03      	ldr	r3, [sp, #12]
 8004cd0:	ea5f 0498 	movs.w	r4, r8, lsr #2
 8004cd4:	685d      	ldr	r5, [r3, #4]
 8004cd6:	d021      	beq.n	8004d1c <arm_fir_f32+0x4ac>
 8004cd8:	f109 0210 	add.w	r2, r9, #16
 8004cdc:	f105 0310 	add.w	r3, r5, #16
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8004ce6:	f843 0c10 	str.w	r0, [r3, #-16]
 8004cea:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8004cee:	f843 0c0c 	str.w	r0, [r3, #-12]
 8004cf2:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8004cf6:	f843 0c08 	str.w	r0, [r3, #-8]
 8004cfa:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8004cfe:	f843 0c04 	str.w	r0, [r3, #-4]
 8004d02:	3901      	subs	r1, #1
 8004d04:	f102 0210 	add.w	r2, r2, #16
 8004d08:	f103 0310 	add.w	r3, r3, #16
 8004d0c:	d1e9      	bne.n	8004ce2 <arm_fir_f32+0x472>
 8004d0e:	0124      	lsls	r4, r4, #4
 8004d10:	44a1      	add	r9, r4
 8004d12:	4425      	add	r5, r4
 8004d14:	e002      	b.n	8004d1c <arm_fir_f32+0x4ac>
 8004d16:	bf00      	nop
 8004d18:	00000000 	.word	0x00000000
 8004d1c:	f018 0803 	ands.w	r8, r8, #3
 8004d20:	d00e      	beq.n	8004d40 <arm_fir_f32+0x4d0>
 8004d22:	f8d9 3000 	ldr.w	r3, [r9]
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	f1b8 0801 	subs.w	r8, r8, #1
 8004d2c:	d008      	beq.n	8004d40 <arm_fir_f32+0x4d0>
 8004d2e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004d32:	606b      	str	r3, [r5, #4]
 8004d34:	f1b8 0f01 	cmp.w	r8, #1
 8004d38:	bf1c      	itt	ne
 8004d3a:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 8004d3e:	60ab      	strne	r3, [r5, #8]
 8004d40:	b00b      	add	sp, #44	; 0x2c
 8004d42:	ecbd 8b10 	vpop	{d8-d15}
 8004d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d4a:	eef0 ba66 	vmov.f32	s23, s13
 8004d4e:	eeb0 6a66 	vmov.f32	s12, s13
 8004d52:	eeb0 9a66 	vmov.f32	s18, s13
 8004d56:	eef0 9a66 	vmov.f32	s19, s13
 8004d5a:	eeb0 aa66 	vmov.f32	s20, s13
 8004d5e:	eef0 aa66 	vmov.f32	s21, s13
 8004d62:	eeb0 ba66 	vmov.f32	s22, s13
 8004d66:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004d6a:	f102 0120 	add.w	r1, r2, #32
 8004d6e:	e729      	b.n	8004bc4 <arm_fir_f32+0x354>

08004d70 <__libc_init_array>:
 8004d70:	b570      	push	{r4, r5, r6, lr}
 8004d72:	4d0d      	ldr	r5, [pc, #52]	; (8004da8 <__libc_init_array+0x38>)
 8004d74:	4c0d      	ldr	r4, [pc, #52]	; (8004dac <__libc_init_array+0x3c>)
 8004d76:	1b64      	subs	r4, r4, r5
 8004d78:	10a4      	asrs	r4, r4, #2
 8004d7a:	2600      	movs	r6, #0
 8004d7c:	42a6      	cmp	r6, r4
 8004d7e:	d109      	bne.n	8004d94 <__libc_init_array+0x24>
 8004d80:	4d0b      	ldr	r5, [pc, #44]	; (8004db0 <__libc_init_array+0x40>)
 8004d82:	4c0c      	ldr	r4, [pc, #48]	; (8004db4 <__libc_init_array+0x44>)
 8004d84:	f000 f820 	bl	8004dc8 <_init>
 8004d88:	1b64      	subs	r4, r4, r5
 8004d8a:	10a4      	asrs	r4, r4, #2
 8004d8c:	2600      	movs	r6, #0
 8004d8e:	42a6      	cmp	r6, r4
 8004d90:	d105      	bne.n	8004d9e <__libc_init_array+0x2e>
 8004d92:	bd70      	pop	{r4, r5, r6, pc}
 8004d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d98:	4798      	blx	r3
 8004d9a:	3601      	adds	r6, #1
 8004d9c:	e7ee      	b.n	8004d7c <__libc_init_array+0xc>
 8004d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da2:	4798      	blx	r3
 8004da4:	3601      	adds	r6, #1
 8004da6:	e7f2      	b.n	8004d8e <__libc_init_array+0x1e>
 8004da8:	08004f34 	.word	0x08004f34
 8004dac:	08004f34 	.word	0x08004f34
 8004db0:	08004f34 	.word	0x08004f34
 8004db4:	08004f38 	.word	0x08004f38

08004db8 <memset>:
 8004db8:	4402      	add	r2, r0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d100      	bne.n	8004dc2 <memset+0xa>
 8004dc0:	4770      	bx	lr
 8004dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc6:	e7f9      	b.n	8004dbc <memset+0x4>

08004dc8 <_init>:
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	bf00      	nop
 8004dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dce:	bc08      	pop	{r3}
 8004dd0:	469e      	mov	lr, r3
 8004dd2:	4770      	bx	lr

08004dd4 <_fini>:
 8004dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd6:	bf00      	nop
 8004dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dda:	bc08      	pop	{r3}
 8004ddc:	469e      	mov	lr, r3
 8004dde:	4770      	bx	lr
