
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fdc  08004fdc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004fdc  08004fdc  00014fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fe4  08004fe4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  20000014  08005000  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007c4  08005000  000207c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e24  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e95  00000000  00000000  00034f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00037db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7d  00000000  00000000  00038f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023100  00000000  00000000  00039cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ac7  00000000  00000000  0005cdbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d59f4  00000000  00000000  00071884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ab0  00000000  00000000  00147278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0014bd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d0a  00000000  00000000  0014bd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  0014ca83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004e70 	.word	0x08004e70

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08004e70 	.word	0x08004e70

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08c      	sub	sp, #48	; 0x30
 8000504:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fe75 	bl	80011f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Call FIR init function to initialize the instance structure. */
  arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 800050a:	4b83      	ldr	r3, [pc, #524]	; (8000718 <main+0x218>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f107 0008 	add.w	r0, r7, #8
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	4b81      	ldr	r3, [pc, #516]	; (800071c <main+0x21c>)
 8000516:	4a82      	ldr	r2, [pc, #520]	; (8000720 <main+0x220>)
 8000518:	211d      	movs	r1, #29
 800051a:	f004 f9ed 	bl	80048f8 <arm_fir_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f921 	bl	8000764 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  float32_t output = 0;
 8000522:	f04f 0300 	mov.w	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
  float index = 0;
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	627b      	str	r3, [r7, #36]	; 0x24
//  int32_t incr = 1;
  float incr = 2;
 800052e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000532:	623b      	str	r3, [r7, #32]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 fa90 	bl	8000a58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000538:	f000 fa6e 	bl	8000a18 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800053c:	f000 fa14 	bl	8000968 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000540:	f000 fa3c 	bl	80009bc <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8000544:	f000 f97a 	bl	800083c <MX_DAC_Init>
  MX_TIM7_Init();
 8000548:	f000 f9d8 	bl	80008fc <MX_TIM7_Init>
  MX_TIM6_Init();
 800054c:	f000 f9a0 	bl	8000890 <MX_TIM6_Init>


  for (int i = 0; i < SAMPLES/2 - 1; i++){
 8000550:	2300      	movs	r3, #0
 8000552:	61fb      	str	r3, [r7, #28]
 8000554:	e009      	b.n	800056a <main+0x6a>
	  square[i] = 1;
 8000556:	4a73      	ldr	r2, [pc, #460]	; (8000724 <main+0x224>)
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4413      	add	r3, r2
 800055e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000562:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < SAMPLES/2 - 1; i++){
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	3301      	adds	r3, #1
 8000568:	61fb      	str	r3, [r7, #28]
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	2b16      	cmp	r3, #22
 800056e:	ddf2      	ble.n	8000556 <main+0x56>
  }

  for (int i = SAMPLES/2 - 1; i < SAMPLES - 1; i++){
 8000570:	2317      	movs	r3, #23
 8000572:	61bb      	str	r3, [r7, #24]
 8000574:	e008      	b.n	8000588 <main+0x88>
  	  square[i] = -1;
 8000576:	4a6b      	ldr	r2, [pc, #428]	; (8000724 <main+0x224>)
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	4413      	add	r3, r2
 800057e:	4a6a      	ldr	r2, [pc, #424]	; (8000728 <main+0x228>)
 8000580:	601a      	str	r2, [r3, #0]
  for (int i = SAMPLES/2 - 1; i < SAMPLES - 1; i++){
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	3301      	adds	r3, #1
 8000586:	61bb      	str	r3, [r7, #24]
 8000588:	69bb      	ldr	r3, [r7, #24]
 800058a:	2b2e      	cmp	r3, #46	; 0x2e
 800058c:	ddf3      	ble.n	8000576 <main+0x76>
  }
  HAL_DACEx_NoiseWaveGenerate(&hdac, DAC_CHANNEL_1, DAC_LFSRUNMASK_BITS4_0);
 800058e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000592:	2100      	movs	r1, #0
 8000594:	4865      	ldr	r0, [pc, #404]	; (800072c <main+0x22c>)
 8000596:	f001 f957 	bl	8001848 <HAL_DACEx_NoiseWaveGenerate>

  HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095);
 800059a:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 800059e:	2100      	movs	r1, #0
 80005a0:	4862      	ldr	r0, [pc, #392]	; (800072c <main+0x22c>)
 80005a2:	f001 f91a 	bl	80017da <HAL_DACEx_TriangleWaveGenerate>
  /* USER CODE BEGIN 2 */
  current_row = 0;
 80005a6:	4b62      	ldr	r3, [pc, #392]	; (8000730 <main+0x230>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b2:	4860      	ldr	r0, [pc, #384]	; (8000734 <main+0x234>)
 80005b4:	f001 fe20 	bl	80021f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005be:	485d      	ldr	r0, [pc, #372]	; (8000734 <main+0x234>)
 80005c0:	f001 fe1a 	bl	80021f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ca:	485a      	ldr	r0, [pc, #360]	; (8000734 <main+0x234>)
 80005cc:	f001 fe14 	bl	80021f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d6:	4857      	ldr	r0, [pc, #348]	; (8000734 <main+0x234>)
 80005d8:	f001 fe0e 	bl	80021f8 <HAL_GPIO_WritePin>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80005dc:	2100      	movs	r1, #0
 80005de:	4853      	ldr	r0, [pc, #332]	; (800072c <main+0x22c>)
 80005e0:	f000 ffd1 	bl	8001586 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 80005e4:	4854      	ldr	r0, [pc, #336]	; (8000738 <main+0x238>)
 80005e6:	f003 f8ef 	bl	80037c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80005ea:	4854      	ldr	r0, [pc, #336]	; (800073c <main+0x23c>)
 80005ec:	f003 f8ec 	bl	80037c8 <HAL_TIM_Base_Start_IT>

	float32_t  *inputF32;
	inputF32 = &sine[0];
 80005f0:	4b53      	ldr	r3, [pc, #332]	; (8000740 <main+0x240>)
 80005f2:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (keypad_poll){
 80005f4:	4b53      	ldr	r3, [pc, #332]	; (8000744 <main+0x244>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d005      	beq.n	8000608 <main+0x108>
	  		  keypad_poll = 0;
 80005fc:	4b51      	ldr	r3, [pc, #324]	; (8000744 <main+0x244>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
	  		  current_row = 0;
 8000602:	4b4b      	ldr	r3, [pc, #300]	; (8000730 <main+0x230>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
//	  	  	  poll_keypad();
	  	  }

	  	  if (key_pressed){
 8000608:	4b4f      	ldr	r3, [pc, #316]	; (8000748 <main+0x248>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d025      	beq.n	800065c <main+0x15c>
	  		key_pressed = 0;
 8000610:	4b4d      	ldr	r3, [pc, #308]	; (8000748 <main+0x248>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
	  		if ((current_row - 1 == 2) && (current_col == 1)){
 8000616:	4b46      	ldr	r3, [pc, #280]	; (8000730 <main+0x230>)
 8000618:	f993 3000 	ldrsb.w	r3, [r3]
 800061c:	2b03      	cmp	r3, #3
 800061e:	d10b      	bne.n	8000638 <main+0x138>
 8000620:	4b4a      	ldr	r3, [pc, #296]	; (800074c <main+0x24c>)
 8000622:	f993 3000 	ldrsb.w	r3, [r3]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d106      	bne.n	8000638 <main+0x138>
	  			// double the frequency
	  			incr = incr*2;
 800062a:	edd7 7a08 	vldr	s15, [r7, #32]
 800062e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000632:	edc7 7a08 	vstr	s15, [r7, #32]
 8000636:	e011      	b.n	800065c <main+0x15c>
	  		}else if ((current_row - 1 == 2) && (current_col == 0)){
 8000638:	4b3d      	ldr	r3, [pc, #244]	; (8000730 <main+0x230>)
 800063a:	f993 3000 	ldrsb.w	r3, [r3]
 800063e:	2b03      	cmp	r3, #3
 8000640:	d10c      	bne.n	800065c <main+0x15c>
 8000642:	4b42      	ldr	r3, [pc, #264]	; (800074c <main+0x24c>)
 8000644:	f993 3000 	ldrsb.w	r3, [r3]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d107      	bne.n	800065c <main+0x15c>
	  			// half the frequency (haven't exactly figured out how to go below 1 kHz)
	  //			if (incr > 1){
	  //				incr = incr >> 1;
	  //			}
	  			incr = incr/2;
 800064c:	ed97 7a08 	vldr	s14, [r7, #32]
 8000650:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000654:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000658:	edc7 7a08 	vstr	s15, [r7, #32]
	  		}
	  	  }

	  	if (new_sample){
 800065c:	4b3c      	ldr	r3, [pc, #240]	; (8000750 <main+0x250>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0c7      	beq.n	80005f4 <main+0xf4>
	  	  new_sample = 0;
 8000664:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <main+0x250>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]

	  	  if (filter_en){
 800066a:	4b3a      	ldr	r3, [pc, #232]	; (8000754 <main+0x254>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d019      	beq.n	80006a6 <main+0x1a6>
	  		  arm_fir_f32(&S, inputF32 + (uint32_t)(index)%SAMPLES, &output, blockSize);
 8000672:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800067a:	ee17 1a90 	vmov	r1, s15
 800067e:	4b36      	ldr	r3, [pc, #216]	; (8000758 <main+0x258>)
 8000680:	fba3 2301 	umull	r2, r3, r3, r1
 8000684:	095a      	lsrs	r2, r3, #5
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	011b      	lsls	r3, r3, #4
 800068e:	1aca      	subs	r2, r1, r3
 8000690:	0093      	lsls	r3, r2, #2
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	18d1      	adds	r1, r2, r3
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <main+0x218>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	1d3a      	adds	r2, r7, #4
 800069c:	f107 0008 	add.w	r0, r7, #8
 80006a0:	f004 f93a 	bl	8004918 <arm_fir_f32>
 80006a4:	e013      	b.n	80006ce <main+0x1ce>
	  	  }else{
//	  		  output = sine[(uint32_t)(index)%SAMPLES];

	  		output = square[(uint32_t)(index)%SAMPLES];
 80006a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80006aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006ae:	ee17 1a90 	vmov	r1, s15
 80006b2:	4b29      	ldr	r3, [pc, #164]	; (8000758 <main+0x258>)
 80006b4:	fba3 2301 	umull	r2, r3, r3, r1
 80006b8:	095a      	lsrs	r2, r3, #5
 80006ba:	4613      	mov	r3, r2
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	4413      	add	r3, r2
 80006c0:	011b      	lsls	r3, r3, #4
 80006c2:	1aca      	subs	r2, r1, r3
 80006c4:	4917      	ldr	r1, [pc, #92]	; (8000724 <main+0x224>)
 80006c6:	0093      	lsls	r3, r2, #2
 80006c8:	440b      	add	r3, r1
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	607b      	str	r3, [r7, #4]
//	  		  output = 1;
//
//	  		  output = -1;
	  	  }

	  	  output *= 3000;
 80006ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80006d2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800075c <main+0x25c>
 80006d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006da:	edc7 7a01 	vstr	s15, [r7, #4]
	  	  output += 2047;
 80006de:	edd7 7a01 	vldr	s15, [r7, #4]
 80006e2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000760 <main+0x260>
 80006e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006ea:	edc7 7a01 	vstr	s15, [r7, #4]
	  	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint16_t)output);
 80006ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80006f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006f6:	ee17 3a90 	vmov	r3, s15
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	2200      	movs	r2, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	480a      	ldr	r0, [pc, #40]	; (800072c <main+0x22c>)
 8000702:	f000 ffec 	bl	80016de <HAL_DAC_SetValue>

	  	  index += incr;
 8000706:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800070a:	edd7 7a08 	vldr	s15, [r7, #32]
 800070e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000712:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  if (keypad_poll){
 8000716:	e76d      	b.n	80005f4 <main+0xf4>
 8000718:	20000004 	.word	0x20000004
 800071c:	20000748 	.word	0x20000748
 8000720:	08004f48 	.word	0x08004f48
 8000724:	20000688 	.word	0x20000688
 8000728:	bf800000 	.word	0xbf800000
 800072c:	20000030 	.word	0x20000030
 8000730:	20000000 	.word	0x20000000
 8000734:	40020800 	.word	0x40020800
 8000738:	200000ec 	.word	0x200000ec
 800073c:	200000a4 	.word	0x200000a4
 8000740:	08004e88 	.word	0x08004e88
 8000744:	20000684 	.word	0x20000684
 8000748:	20000685 	.word	0x20000685
 800074c:	20000001 	.word	0x20000001
 8000750:	20000687 	.word	0x20000687
 8000754:	20000686 	.word	0x20000686
 8000758:	aaaaaaab 	.word	0xaaaaaaab
 800075c:	453b8000 	.word	0x453b8000
 8000760:	44ffe000 	.word	0x44ffe000

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2234      	movs	r2, #52	; 0x34
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f004 fb50 	bl	8004e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <SystemClock_Config+0xd0>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a28      	ldr	r2, [pc, #160]	; (8000834 <SystemClock_Config+0xd0>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b26      	ldr	r3, [pc, #152]	; (8000834 <SystemClock_Config+0xd0>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <SystemClock_Config+0xd4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a22      	ldr	r2, [pc, #136]	; (8000838 <SystemClock_Config+0xd4>)
 80007ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b20      	ldr	r3, [pc, #128]	; (8000838 <SystemClock_Config+0xd4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d4:	2308      	movs	r3, #8
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e2:	2307      	movs	r3, #7
 80007e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 fcfc 	bl	80031ec <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007fa:	f000 fa17 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000802:	2303      	movs	r3, #3
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2105      	movs	r1, #5
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fe71 	bl	8002504 <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000828:	f000 fa00 	bl	8000c2c <Error_Handler>
  }
}
 800082c:	bf00      	nop
 800082e:	3750      	adds	r7, #80	; 0x50
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000842:	463b      	mov	r3, r7
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_DAC_Init+0x4c>)
 800084c:	4a0f      	ldr	r2, [pc, #60]	; (800088c <MX_DAC_Init+0x50>)
 800084e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_DAC_Init+0x4c>)
 8000852:	f000 fe76 	bl	8001542 <HAL_DAC_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800085c:	f000 f9e6 	bl	8000c2c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8000860:	2314      	movs	r3, #20
 8000862:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_DAC_Init+0x4c>)
 8000870:	f000 ff64 	bl	800173c <HAL_DAC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800087a:	f000 f9d7 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000030 	.word	0x20000030
 800088c:	40007400 	.word	0x40007400

08000890 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008a0:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <MX_TIM6_Init+0x68>)
 80008a2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400 - 1;
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008a6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80008aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008b8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008c2:	f002 ff31 	bl	8003728 <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80008cc:	f000 f9ae 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_TIM6_Init+0x64>)
 80008de:	f003 f9bd 	bl	8003c5c <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 f9a0 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200000a4 	.word	0x200000a4
 80008f8:	40001000 	.word	0x40001000

080008fc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_TIM7_Init+0x64>)
 800090c:	4a15      	ldr	r2, [pc, #84]	; (8000964 <MX_TIM7_Init+0x68>)
 800090e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_TIM7_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_TIM7_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1750-1;
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_TIM7_Init+0x64>)
 800091e:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8000922:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_TIM7_Init+0x64>)
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_TIM7_Init+0x64>)
 800092c:	f002 fefc 	bl	8003728 <HAL_TIM_Base_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000936:	f000 f979 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800093a:	2320      	movs	r3, #32
 800093c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000942:	463b      	mov	r3, r7
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <MX_TIM7_Init+0x64>)
 8000948:	f003 f988 	bl	8003c5c <HAL_TIMEx_MasterConfigSynchronization>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000952:	f000 f96b 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000ec 	.word	0x200000ec
 8000964:	40001400 	.word	0x40001400

08000968 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_USART3_UART_Init+0x4c>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <MX_USART3_UART_Init+0x50>)
 8000970:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_USART3_UART_Init+0x4c>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USART3_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USART3_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_USART3_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USART3_UART_Init+0x4c>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_USART3_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USART3_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_USART3_UART_Init+0x4c>)
 80009a0:	f003 f9ec 	bl	8003d7c <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009aa:	f000 f93f 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000134 	.word	0x20000134
 80009b8:	40004800 	.word	0x40004800

080009bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2206      	movs	r2, #6
 80009cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	2202      	movs	r2, #2
 80009de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a00:	f001 fc37 	bl	8002272 <HAL_PCD_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a0a:	f000 f90f 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000178 	.word	0x20000178

08000a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_DMA_Init+0x3c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <MX_DMA_Init+0x3c>)
 8000a28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_DMA_Init+0x3c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2010      	movs	r0, #16
 8000a40:	f000 fd49 	bl	80014d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a44:	2010      	movs	r0, #16
 8000a46:	f000 fd62 	bl	800150e <HAL_NVIC_EnableIRQ>

}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08c      	sub	sp, #48	; 0x30
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	4b69      	ldr	r3, [pc, #420]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a68      	ldr	r2, [pc, #416]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b66      	ldr	r3, [pc, #408]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	61bb      	str	r3, [r7, #24]
 8000a88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	4b62      	ldr	r3, [pc, #392]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a61      	ldr	r2, [pc, #388]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b5f      	ldr	r3, [pc, #380]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b5b      	ldr	r3, [pc, #364]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a5a      	ldr	r2, [pc, #360]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b58      	ldr	r3, [pc, #352]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b54      	ldr	r3, [pc, #336]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a53      	ldr	r2, [pc, #332]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b51      	ldr	r3, [pc, #324]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b4d      	ldr	r3, [pc, #308]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a4c      	ldr	r2, [pc, #304]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b4a      	ldr	r3, [pc, #296]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b46      	ldr	r3, [pc, #280]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a45      	ldr	r2, [pc, #276]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b43      	ldr	r3, [pc, #268]	; (8000c18 <MX_GPIO_Init+0x1c0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b1c:	483f      	ldr	r0, [pc, #252]	; (8000c1c <MX_GPIO_Init+0x1c4>)
 8000b1e:	f001 fb6b 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2140      	movs	r1, #64	; 0x40
 8000b26:	483e      	ldr	r0, [pc, #248]	; (8000c20 <MX_GPIO_Init+0x1c8>)
 8000b28:	f001 fb66 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000b32:	483c      	ldr	r0, [pc, #240]	; (8000c24 <MX_GPIO_Init+0x1cc>)
 8000b34:	f001 fb60 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4835      	ldr	r0, [pc, #212]	; (8000c24 <MX_GPIO_Init+0x1cc>)
 8000b50:	f001 f9a6 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b54:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	482b      	ldr	r0, [pc, #172]	; (8000c1c <MX_GPIO_Init+0x1c4>)
 8000b6e:	f001 f997 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b72:	2340      	movs	r3, #64	; 0x40
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4825      	ldr	r0, [pc, #148]	; (8000c20 <MX_GPIO_Init+0x1c8>)
 8000b8a:	f001 f989 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	481f      	ldr	r0, [pc, #124]	; (8000c20 <MX_GPIO_Init+0x1c8>)
 8000ba2:	f001 f97d 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000ba6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4819      	ldr	r0, [pc, #100]	; (8000c24 <MX_GPIO_Init+0x1cc>)
 8000bc0:	f001 f96e 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin;
 8000bc4:	23f0      	movs	r3, #240	; 0xf0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4813      	ldr	r0, [pc, #76]	; (8000c28 <MX_GPIO_Init+0x1d0>)
 8000bda:	f001 f961 	bl	8001ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	200a      	movs	r0, #10
 8000be4:	f000 fc77 	bl	80014d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000be8:	200a      	movs	r0, #10
 8000bea:	f000 fc90 	bl	800150e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2017      	movs	r0, #23
 8000bf4:	f000 fc6f 	bl	80014d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bf8:	2017      	movs	r0, #23
 8000bfa:	f000 fc88 	bl	800150e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2028      	movs	r0, #40	; 0x28
 8000c04:	f000 fc67 	bl	80014d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c08:	2028      	movs	r0, #40	; 0x28
 8000c0a:	f000 fc80 	bl	800150e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0e:	bf00      	nop
 8000c10:	3730      	adds	r7, #48	; 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020400 	.word	0x40020400
 8000c20:	40021800 	.word	0x40021800
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020c00 	.word	0x40020c00

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>
	...

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a34      	ldr	r2, [pc, #208]	; (8000d78 <HAL_DAC_MspInit+0xf0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d161      	bne.n	8000d6e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <HAL_DAC_MspInit+0xf4>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a32      	ldr	r2, [pc, #200]	; (8000d7c <HAL_DAC_MspInit+0xf4>)
 8000cb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <HAL_DAC_MspInit+0xf4>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <HAL_DAC_MspInit+0xf4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a2b      	ldr	r2, [pc, #172]	; (8000d7c <HAL_DAC_MspInit+0xf4>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <HAL_DAC_MspInit+0xf4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4822      	ldr	r0, [pc, #136]	; (8000d80 <HAL_DAC_MspInit+0xf8>)
 8000cf6:	f001 f8d3 	bl	8001ea0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <HAL_DAC_MspInit+0xfc>)
 8000cfc:	4a22      	ldr	r2, [pc, #136]	; (8000d88 <HAL_DAC_MspInit+0x100>)
 8000cfe:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <HAL_DAC_MspInit+0xfc>)
 8000d02:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000d06:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d08:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <HAL_DAC_MspInit+0xfc>)
 8000d0a:	2240      	movs	r2, #64	; 0x40
 8000d0c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_DAC_MspInit+0xfc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_DAC_MspInit+0xfc>)
 8000d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d1a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_DAC_MspInit+0xfc>)
 8000d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d22:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_DAC_MspInit+0xfc>)
 8000d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d2a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_DAC_MspInit+0xfc>)
 8000d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d32:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <HAL_DAC_MspInit+0xfc>)
 8000d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d3a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_DAC_MspInit+0xfc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000d42:	4810      	ldr	r0, [pc, #64]	; (8000d84 <HAL_DAC_MspInit+0xfc>)
 8000d44:	f000 fdc2 	bl	80018cc <HAL_DMA_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000d4e:	f7ff ff6d 	bl	8000c2c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <HAL_DAC_MspInit+0xfc>)
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_DAC_MspInit+0xfc>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2036      	movs	r0, #54	; 0x36
 8000d64:	f000 fbb7 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d68:	2036      	movs	r0, #54	; 0x36
 8000d6a:	f000 fbd0 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40007400 	.word	0x40007400
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000
 8000d84:	20000044 	.word	0x20000044
 8000d88:	40026088 	.word	0x40026088

08000d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <HAL_TIM_Base_MspInit+0x80>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d116      	bne.n	8000dcc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <HAL_TIM_Base_MspInit+0x84>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <HAL_TIM_Base_MspInit+0x84>)
 8000da8:	f043 0310 	orr.w	r3, r3, #16
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <HAL_TIM_Base_MspInit+0x84>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2036      	movs	r0, #54	; 0x36
 8000dc0:	f000 fb89 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dc4:	2036      	movs	r0, #54	; 0x36
 8000dc6:	f000 fba2 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000dca:	e01a      	b.n	8000e02 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_TIM_Base_MspInit+0x88>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d115      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_TIM_Base_MspInit+0x84>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <HAL_TIM_Base_MspInit+0x84>)
 8000de0:	f043 0320 	orr.w	r3, r3, #32
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_TIM_Base_MspInit+0x84>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 0320 	and.w	r3, r3, #32
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2037      	movs	r0, #55	; 0x37
 8000df8:	f000 fb6d 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000dfc:	2037      	movs	r0, #55	; 0x37
 8000dfe:	f000 fb86 	bl	800150e <HAL_NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40001000 	.word	0x40001000
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40001400 	.word	0x40001400

08000e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_UART_MspInit+0x84>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12c      	bne.n	8000e94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e84:	2307      	movs	r3, #7
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_UART_MspInit+0x8c>)
 8000e90:	f001 f806 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	; 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40004800 	.word	0x40004800
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020c00 	.word	0x40020c00

08000ea8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b0a0      	sub	sp, #128	; 0x80
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	225c      	movs	r2, #92	; 0x5c
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f003 ffa5 	bl	8004e18 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ed6:	d14e      	bne.n	8000f76 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000edc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 fc26 	bl	8002738 <HAL_RCCEx_PeriphCLKConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000ef2:	f7ff fe9b 	bl	8000c2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <HAL_PCD_MspInit+0xd8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a20      	ldr	r2, [pc, #128]	; (8000f80 <HAL_PCD_MspInit+0xd8>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <HAL_PCD_MspInit+0xd8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f12:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f16:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f24:	230a      	movs	r3, #10
 8000f26:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4815      	ldr	r0, [pc, #84]	; (8000f84 <HAL_PCD_MspInit+0xdc>)
 8000f30:	f000 ffb6 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f38:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f46:	4619      	mov	r1, r3
 8000f48:	480e      	ldr	r0, [pc, #56]	; (8000f84 <HAL_PCD_MspInit+0xdc>)
 8000f4a:	f000 ffa9 	bl	8001ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_PCD_MspInit+0xd8>)
 8000f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <HAL_PCD_MspInit+0xd8>)
 8000f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f58:	6353      	str	r3, [r2, #52]	; 0x34
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_PCD_MspInit+0xd8>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_PCD_MspInit+0xd8>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_PCD_MspInit+0xd8>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3780      	adds	r7, #128	; 0x80
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020000 	.word	0x40020000

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 f960 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	key_pressed = 1;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <EXTI4_IRQHandler+0x3c>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]

	if (__HAL_GPIO_EXTI_GET_FLAG(COL0_Pin)){
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <EXTI4_IRQHandler+0x40>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00a      	beq.n	8001008 <EXTI4_IRQHandler+0x2c>
		current_col  = 0;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <EXTI4_IRQHandler+0x44>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]

	    while (HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin)){}
 8000ff8:	bf00      	nop
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	4809      	ldr	r0, [pc, #36]	; (8001024 <EXTI4_IRQHandler+0x48>)
 8000ffe:	f001 f8e3 	bl	80021c8 <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f8      	bne.n	8000ffa <EXTI4_IRQHandler+0x1e>
	 }

	 HAL_GPIO_EXTI_IRQHandler(COL0_Pin);
 8001008:	2010      	movs	r0, #16
 800100a:	f001 f90f 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL0_Pin);
 800100e:	2010      	movs	r0, #16
 8001010:	f001 f90c 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000685 	.word	0x20000685
 800101c:	40013c00 	.word	0x40013c00
 8001020:	20000001 	.word	0x20000001
 8001024:	40020c00 	.word	0x40020c00

08001028 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <DMA1_Stream5_IRQHandler+0x10>)
 800102e:	f000 fcfb 	bl	8001a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000044 	.word	0x20000044

0800103c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	key_pressed = 1;
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <EXTI9_5_IRQHandler+0x8c>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]

	if (__HAL_GPIO_EXTI_GET_FLAG(COL1_Pin)){
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <EXTI9_5_IRQHandler+0x90>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f003 0320 	and.w	r3, r3, #32
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00b      	beq.n	800106a <EXTI9_5_IRQHandler+0x2e>
		current_col  = 1;
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <EXTI9_5_IRQHandler+0x94>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]

		while (HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin)){}
 8001058:	bf00      	nop
 800105a:	2120      	movs	r1, #32
 800105c:	481d      	ldr	r0, [pc, #116]	; (80010d4 <EXTI9_5_IRQHandler+0x98>)
 800105e:	f001 f8b3 	bl	80021c8 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f8      	bne.n	800105a <EXTI9_5_IRQHandler+0x1e>
 8001068:	e022      	b.n	80010b0 <EXTI9_5_IRQHandler+0x74>
	}else if (__HAL_GPIO_EXTI_GET_FLAG(COL2_Pin)){
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <EXTI9_5_IRQHandler+0x90>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <EXTI9_5_IRQHandler+0x52>
		current_col  = 2;
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <EXTI9_5_IRQHandler+0x94>)
 8001078:	2202      	movs	r2, #2
 800107a:	701a      	strb	r2, [r3, #0]

	    while (HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin)){}
 800107c:	bf00      	nop
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	4814      	ldr	r0, [pc, #80]	; (80010d4 <EXTI9_5_IRQHandler+0x98>)
 8001082:	f001 f8a1 	bl	80021c8 <HAL_GPIO_ReadPin>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f8      	bne.n	800107e <EXTI9_5_IRQHandler+0x42>
 800108c:	e010      	b.n	80010b0 <EXTI9_5_IRQHandler+0x74>
	  }else if (__HAL_GPIO_EXTI_GET_FLAG(COL3_Pin)){
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <EXTI9_5_IRQHandler+0x90>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00a      	beq.n	80010b0 <EXTI9_5_IRQHandler+0x74>
		  current_col  = 3;
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <EXTI9_5_IRQHandler+0x94>)
 800109c:	2203      	movs	r2, #3
 800109e:	701a      	strb	r2, [r3, #0]

		  while (HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin)){}
 80010a0:	bf00      	nop
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <EXTI9_5_IRQHandler+0x98>)
 80010a6:	f001 f88f 	bl	80021c8 <HAL_GPIO_ReadPin>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f8      	bne.n	80010a2 <EXTI9_5_IRQHandler+0x66>
	  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL1_Pin);
 80010b0:	2020      	movs	r0, #32
 80010b2:	f001 f8bb 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL2_Pin);
 80010b6:	2040      	movs	r0, #64	; 0x40
 80010b8:	f001 f8b8 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL3_Pin);
 80010bc:	2080      	movs	r0, #128	; 0x80
 80010be:	f001 f8b5 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000685 	.word	0x20000685
 80010cc:	40013c00 	.word	0x40013c00
 80010d0:	20000001 	.word	0x20000001
 80010d4:	40020c00 	.word	0x40020c00

080010d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (HAL_GetTick() - dead_time >= 50){
 80010dc:	f000 f8f0 	bl	80012c0 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <EXTI15_10_IRQHandler+0x54>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b31      	cmp	r3, #49	; 0x31
 80010ea:	d90f      	bls.n	800110c <EXTI15_10_IRQHandler+0x34>
	    if (__HAL_GPIO_EXTI_GET_FLAG(USER_Btn_Pin)) {
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <EXTI15_10_IRQHandler+0x58>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <EXTI15_10_IRQHandler+0x34>
	      // Your code here
	    	filter_en = !filter_en;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <EXTI15_10_IRQHandler+0x5c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	bf0c      	ite	eq
 8001100:	2301      	moveq	r3, #1
 8001102:	2300      	movne	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <EXTI15_10_IRQHandler+0x5c>)
 800110a:	701a      	strb	r2, [r3, #0]
	    }
	  }

	HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800110c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001110:	f001 f88c 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001114:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001118:	f001 f888 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  dead_time = HAL_GetTick();
 800111c:	f000 f8d0 	bl	80012c0 <HAL_GetTick>
 8001120:	4603      	mov	r3, r0
 8001122:	4a02      	ldr	r2, [pc, #8]	; (800112c <EXTI15_10_IRQHandler+0x54>)
 8001124:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200007bc 	.word	0x200007bc
 8001130:	40013c00 	.word	0x40013c00
 8001134:	20000686 	.word	0x20000686

08001138 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	keypad_poll = 1;
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <TIM6_DAC_IRQHandler+0x1c>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <TIM6_DAC_IRQHandler+0x20>)
 8001144:	f000 fa71 	bl	800162a <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <TIM6_DAC_IRQHandler+0x24>)
 800114a:	f002 fbad 	bl	80038a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000684 	.word	0x20000684
 8001158:	20000030 	.word	0x20000030
 800115c:	200000a4 	.word	0x200000a4

08001160 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	new_sample = 1;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <TIM7_IRQHandler+0x14>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <TIM7_IRQHandler+0x18>)
 800116c:	f002 fb9c 	bl	80038a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000687 	.word	0x20000687
 8001178:	200000ec 	.word	0x200000ec

0800117c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <SystemInit+0x20>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <SystemInit+0x20>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011a6:	490e      	ldr	r1, [pc, #56]	; (80011e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011bc:	4c0b      	ldr	r4, [pc, #44]	; (80011ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ca:	f7ff ffd7 	bl	800117c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ce:	f003 fe2b 	bl	8004e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d2:	f7ff f995 	bl	8000500 <main>
  bx  lr    
 80011d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80011e4:	08004fec 	.word	0x08004fec
  ldr r2, =_sbss
 80011e8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80011ec:	200007c4 	.word	0x200007c4

080011f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <HAL_Init+0x40>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_Init+0x40>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x40>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f94f 	bl	80014c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f808 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fd06 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f967 	bl	800152a <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001274:	f000 f92f 	bl	80014d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000008 	.word	0x20000008
 8001290:	20000010 	.word	0x20000010
 8001294:	2000000c 	.word	0x2000000c

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000010 	.word	0x20000010
 80012bc:	200007c0 	.word	0x200007c0

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	200007c0 	.word	0x200007c0

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_Delay+0x44>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000010 	.word	0x20000010

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4907      	ldr	r1, [pc, #28]	; (80013bc <__NVIC_EnableIRQ+0x38>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800148c:	d301      	bcc.n	8001492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148e:	2301      	movs	r3, #1
 8001490:	e00f      	b.n	80014b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <SysTick_Config+0x40>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149a:	210f      	movs	r1, #15
 800149c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a0:	f7ff ff8e 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SysTick_Config+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <SysTick_Config+0x40>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff29 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff3e 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff8e 	bl	8001414 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5d 	bl	80013c0 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff31 	bl	8001384 <__NVIC_EnableIRQ>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffa2 	bl	800147c <SysTick_Config>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e014      	b.n	800157e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	791b      	ldrb	r3, [r3, #4]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d105      	bne.n	800156a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff fb8f 	bl	8000c88 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2202      	movs	r2, #2
 800156e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	795b      	ldrb	r3, [r3, #5]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_DAC_Start+0x16>
 8001598:	2302      	movs	r3, #2
 800159a:	e040      	b.n	800161e <HAL_DAC_Start+0x98>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2202      	movs	r2, #2
 80015a6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6819      	ldr	r1, [r3, #0]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	f003 0310 	and.w	r3, r3, #16
 80015b4:	2201      	movs	r2, #1
 80015b6:	409a      	lsls	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10f      	bne.n	80015e6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80015d0:	2b3c      	cmp	r3, #60	; 0x3c
 80015d2:	d11d      	bne.n	8001610 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	e014      	b.n	8001610 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	213c      	movs	r1, #60	; 0x3c
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d107      	bne.n	8001610 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0202 	orr.w	r2, r2, #2
 800160e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800163c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001640:	d120      	bne.n	8001684 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800164c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001650:	d118      	bne.n	8001684 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2204      	movs	r2, #4
 8001656:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800166c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800167c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f852 	bl	8001728 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800168e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001692:	d120      	bne.n	80016d6 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800169e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016a2:	d118      	bne.n	80016d6 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2204      	movs	r2, #4
 80016a8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	f043 0202 	orr.w	r2, r3, #2
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80016ce:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f8f0 	bl	80018b6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80016de:	b480      	push	{r7}
 80016e0:	b087      	sub	sp, #28
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d105      	bne.n	8001708 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	3308      	adds	r3, #8
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e004      	b.n	8001712 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	3314      	adds	r3, #20
 8001710:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	461a      	mov	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	795b      	ldrb	r3, [r3, #5]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_DAC_ConfigChannel+0x18>
 8001750:	2302      	movs	r3, #2
 8001752:	e03c      	b.n	80017ce <HAL_DAC_ConfigChannel+0x92>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2201      	movs	r2, #1
 8001758:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2202      	movs	r2, #2
 800175e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	4013      	ands	r3, r2
 800177c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4313      	orrs	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6819      	ldr	r1, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	22c0      	movs	r2, #192	; 0xc0
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	400a      	ands	r2, r1
 80017be:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80017da:	b480      	push	{r7}
 80017dc:	b085      	sub	sp, #20
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	795b      	ldrb	r3, [r3, #5]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_DACEx_TriangleWaveGenerate+0x18>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e024      	b.n	800183c <HAL_DACEx_TriangleWaveGenerate+0x62>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2202      	movs	r2, #2
 80017fc:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	ea02 0103 	and.w	r1, r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	409a      	lsls	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2201      	movs	r2, #1
 8001832:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	795b      	ldrb	r3, [r3, #5]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_DACEx_NoiseWaveGenerate+0x18>
 800185c:	2302      	movs	r3, #2
 800185e:	e024      	b.n	80018aa <HAL_DACEx_NoiseWaveGenerate+0x62>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2202      	movs	r2, #2
 800186a:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	ea02 0103 	and.w	r1, r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	409a      	lsls	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff fcf2 	bl	80012c0 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e099      	b.n	8001a1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001908:	e00f      	b.n	800192a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800190a:	f7ff fcd9 	bl	80012c0 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b05      	cmp	r3, #5
 8001916:	d908      	bls.n	800192a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2220      	movs	r2, #32
 800191c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2203      	movs	r2, #3
 8001922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e078      	b.n	8001a1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1e8      	bne.n	800190a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <HAL_DMA_Init+0x158>)
 8001944:	4013      	ands	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001956:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001962:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	2b04      	cmp	r3, #4
 8001982:	d107      	bne.n	8001994 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	4313      	orrs	r3, r2
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4313      	orrs	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f023 0307 	bic.w	r3, r3, #7
 80019aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d117      	bne.n	80019ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00e      	beq.n	80019ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f9e9 	bl	8001da8 <DMA_CheckFifoParam>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2240      	movs	r2, #64	; 0x40
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019ea:	2301      	movs	r3, #1
 80019ec:	e016      	b.n	8001a1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f9a0 	bl	8001d3c <DMA_CalcBaseAndBitshift>
 80019fc:	4603      	mov	r3, r0
 80019fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a04:	223f      	movs	r2, #63	; 0x3f
 8001a06:	409a      	lsls	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	f010803f 	.word	0xf010803f

08001a28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a34:	4b8e      	ldr	r3, [pc, #568]	; (8001c70 <HAL_DMA_IRQHandler+0x248>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a8e      	ldr	r2, [pc, #568]	; (8001c74 <HAL_DMA_IRQHandler+0x24c>)
 8001a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3e:	0a9b      	lsrs	r3, r3, #10
 8001a40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	2208      	movs	r2, #8
 8001a54:	409a      	lsls	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d01a      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0204 	bic.w	r2, r2, #4
 8001a7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	2208      	movs	r2, #8
 8001a82:	409a      	lsls	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	2201      	movs	r2, #1
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d012      	beq.n	8001aca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00b      	beq.n	8001aca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	f043 0202 	orr.w	r2, r3, #2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ace:	2204      	movs	r2, #4
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d012      	beq.n	8001b00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00b      	beq.n	8001b00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	2204      	movs	r2, #4
 8001aee:	409a      	lsls	r2, r3
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	f043 0204 	orr.w	r2, r3, #4
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b04:	2210      	movs	r2, #16
 8001b06:	409a      	lsls	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d043      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d03c      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b22:	2210      	movs	r2, #16
 8001b24:	409a      	lsls	r2, r3
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d018      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d108      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d024      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4798      	blx	r3
 8001b56:	e01f      	b.n	8001b98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01b      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
 8001b68:	e016      	b.n	8001b98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0208 	bic.w	r2, r2, #8
 8001b86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 808f 	beq.w	8001cc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8087 	beq.w	8001cc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b05      	cmp	r3, #5
 8001bd0:	d136      	bne.n	8001c40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0216 	bic.w	r2, r2, #22
 8001be0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d103      	bne.n	8001c02 <HAL_DMA_IRQHandler+0x1da>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0208 	bic.w	r2, r2, #8
 8001c10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	223f      	movs	r2, #63	; 0x3f
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d07e      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	4798      	blx	r3
        }
        return;
 8001c3e:	e079      	b.n	8001d34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d01d      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10d      	bne.n	8001c78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d031      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	4798      	blx	r3
 8001c6c:	e02c      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x2a0>
 8001c6e:	bf00      	nop
 8001c70:	20000008 	.word	0x20000008
 8001c74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d023      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	4798      	blx	r3
 8001c88:	e01e      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10f      	bne.n	8001cb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0210 	bic.w	r2, r2, #16
 8001ca6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d032      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d022      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2205      	movs	r2, #5
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d307      	bcc.n	8001d10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f2      	bne.n	8001cf4 <HAL_DMA_IRQHandler+0x2cc>
 8001d0e:	e000      	b.n	8001d12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	4798      	blx	r3
 8001d32:	e000      	b.n	8001d36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d34:	bf00      	nop
    }
  }
}
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	3b10      	subs	r3, #16
 8001d4c:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <DMA_CalcBaseAndBitshift+0x64>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d56:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <DMA_CalcBaseAndBitshift+0x68>)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d909      	bls.n	8001d7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d72:	f023 0303 	bic.w	r3, r3, #3
 8001d76:	1d1a      	adds	r2, r3, #4
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d7c:	e007      	b.n	8001d8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d86:	f023 0303 	bic.w	r3, r3, #3
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	aaaaaaab 	.word	0xaaaaaaab
 8001da4:	08004fd4 	.word	0x08004fd4

08001da8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d11f      	bne.n	8001e02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d856      	bhi.n	8001e76 <DMA_CheckFifoParam+0xce>
 8001dc8:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <DMA_CheckFifoParam+0x28>)
 8001dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dce:	bf00      	nop
 8001dd0:	08001de1 	.word	0x08001de1
 8001dd4:	08001df3 	.word	0x08001df3
 8001dd8:	08001de1 	.word	0x08001de1
 8001ddc:	08001e77 	.word	0x08001e77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d046      	beq.n	8001e7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001df0:	e043      	b.n	8001e7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dfa:	d140      	bne.n	8001e7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e00:	e03d      	b.n	8001e7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e0a:	d121      	bne.n	8001e50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d837      	bhi.n	8001e82 <DMA_CheckFifoParam+0xda>
 8001e12:	a201      	add	r2, pc, #4	; (adr r2, 8001e18 <DMA_CheckFifoParam+0x70>)
 8001e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e18:	08001e29 	.word	0x08001e29
 8001e1c:	08001e2f 	.word	0x08001e2f
 8001e20:	08001e29 	.word	0x08001e29
 8001e24:	08001e41 	.word	0x08001e41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e2c:	e030      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d025      	beq.n	8001e86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e3e:	e022      	b.n	8001e86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e48:	d11f      	bne.n	8001e8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e4e:	e01c      	b.n	8001e8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d903      	bls.n	8001e5e <DMA_CheckFifoParam+0xb6>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d003      	beq.n	8001e64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e5c:	e018      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
      break;
 8001e62:	e015      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00e      	beq.n	8001e8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
      break;
 8001e74:	e00b      	b.n	8001e8e <DMA_CheckFifoParam+0xe6>
      break;
 8001e76:	bf00      	nop
 8001e78:	e00a      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      break;
 8001e7a:	bf00      	nop
 8001e7c:	e008      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      break;
 8001e7e:	bf00      	nop
 8001e80:	e006      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      break;
 8001e82:	bf00      	nop
 8001e84:	e004      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      break;
 8001e86:	bf00      	nop
 8001e88:	e002      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e8a:	bf00      	nop
 8001e8c:	e000      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      break;
 8001e8e:	bf00      	nop
    }
  } 
  
  return status; 
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e165      	b.n	8002188 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 8154 	bne.w	8002182 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d005      	beq.n	8001ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d130      	bne.n	8001f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0201 	and.w	r2, r3, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d017      	beq.n	8001f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80ae 	beq.w	8002182 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b5d      	ldr	r3, [pc, #372]	; (80021a0 <HAL_GPIO_Init+0x300>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a5c      	ldr	r2, [pc, #368]	; (80021a0 <HAL_GPIO_Init+0x300>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b5a      	ldr	r3, [pc, #360]	; (80021a0 <HAL_GPIO_Init+0x300>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002042:	4a58      	ldr	r2, [pc, #352]	; (80021a4 <HAL_GPIO_Init+0x304>)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4f      	ldr	r2, [pc, #316]	; (80021a8 <HAL_GPIO_Init+0x308>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d025      	beq.n	80020ba <HAL_GPIO_Init+0x21a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4e      	ldr	r2, [pc, #312]	; (80021ac <HAL_GPIO_Init+0x30c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01f      	beq.n	80020b6 <HAL_GPIO_Init+0x216>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4d      	ldr	r2, [pc, #308]	; (80021b0 <HAL_GPIO_Init+0x310>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d019      	beq.n	80020b2 <HAL_GPIO_Init+0x212>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4c      	ldr	r2, [pc, #304]	; (80021b4 <HAL_GPIO_Init+0x314>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_GPIO_Init+0x20e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4b      	ldr	r2, [pc, #300]	; (80021b8 <HAL_GPIO_Init+0x318>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00d      	beq.n	80020aa <HAL_GPIO_Init+0x20a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4a      	ldr	r2, [pc, #296]	; (80021bc <HAL_GPIO_Init+0x31c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <HAL_GPIO_Init+0x206>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a49      	ldr	r2, [pc, #292]	; (80021c0 <HAL_GPIO_Init+0x320>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_GPIO_Init+0x202>
 800209e:	2306      	movs	r3, #6
 80020a0:	e00c      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e00a      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020a6:	2305      	movs	r3, #5
 80020a8:	e008      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e004      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e002      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020ba:	2300      	movs	r3, #0
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	f002 0203 	and.w	r2, r2, #3
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	4093      	lsls	r3, r2
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020cc:	4935      	ldr	r1, [pc, #212]	; (80021a4 <HAL_GPIO_Init+0x304>)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020da:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <HAL_GPIO_Init+0x324>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fe:	4a31      	ldr	r2, [pc, #196]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002104:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002128:	4a26      	ldr	r2, [pc, #152]	; (80021c4 <HAL_GPIO_Init+0x324>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002152:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_GPIO_Init+0x324>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800217c:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <HAL_GPIO_Init+0x324>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	f67f ae96 	bls.w	8001ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40013800 	.word	0x40013800
 80021a8:	40020000 	.word	0x40020000
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40021400 	.word	0x40021400
 80021c0:	40021800 	.word	0x40021800
 80021c4:	40013c00 	.word	0x40013c00

080021c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e001      	b.n	80021ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002214:	e003      	b.n	800221e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	041a      	lsls	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	619a      	str	r2, [r3, #24]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f806 	bl	800225c <HAL_GPIO_EXTI_Callback>
  }
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40013c00 	.word	0x40013c00

0800225c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002272:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002274:	b08f      	sub	sp, #60	; 0x3c
 8002276:	af0a      	add	r7, sp, #40	; 0x28
 8002278:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e116      	b.n	80024b2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fe02 	bl	8000ea8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2203      	movs	r2, #3
 80022a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d102      	bne.n	80022be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 f87d 	bl	80043c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	687e      	ldr	r6, [r7, #4]
 80022d0:	466d      	mov	r5, sp
 80022d2:	f106 0410 	add.w	r4, r6, #16
 80022d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022e6:	1d33      	adds	r3, r6, #4
 80022e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ea:	6838      	ldr	r0, [r7, #0]
 80022ec:	f002 f808 	bl	8004300 <USB_CoreInit>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e0d7      	b.n	80024b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f002 f86b 	bl	80043e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	e04a      	b.n	80023aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	333d      	adds	r3, #61	; 0x3d
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	333c      	adds	r3, #60	; 0x3c
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	b298      	uxth	r0, r3
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	3344      	adds	r3, #68	; 0x44
 8002350:	4602      	mov	r2, r0
 8002352:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	3340      	adds	r3, #64	; 0x40
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3348      	adds	r3, #72	; 0x48
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	334c      	adds	r3, #76	; 0x4c
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	3354      	adds	r3, #84	; 0x54
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3301      	adds	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d3af      	bcc.n	8002314 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e044      	b.n	8002444 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	3301      	adds	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	429a      	cmp	r2, r3
 800244c:	d3b5      	bcc.n	80023ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	687e      	ldr	r6, [r7, #4]
 8002456:	466d      	mov	r5, sp
 8002458:	f106 0410 	add.w	r4, r6, #16
 800245c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800245e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002464:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002468:	e885 0003 	stmia.w	r5, {r0, r1}
 800246c:	1d33      	adds	r3, r6, #4
 800246e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002470:	6838      	ldr	r0, [r7, #0]
 8002472:	f002 f803 	bl	800447c <USB_DevInit>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e014      	b.n	80024b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	2b01      	cmp	r3, #1
 800249e:	d102      	bne.n	80024a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f80a 	bl	80024ba <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 f9c1 	bl	8004832 <USB_DevDisconnect>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024ba <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b085      	sub	sp, #20
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ec:	f043 0303 	orr.w	r3, r3, #3
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0cc      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002518:	4b68      	ldr	r3, [pc, #416]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d90c      	bls.n	8002540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b65      	ldr	r3, [pc, #404]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b63      	ldr	r3, [pc, #396]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0b8      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002558:	4b59      	ldr	r3, [pc, #356]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a58      	ldr	r2, [pc, #352]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002562:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002570:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a52      	ldr	r2, [pc, #328]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800257a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	494d      	ldr	r1, [pc, #308]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d044      	beq.n	8002624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d119      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e07f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d003      	beq.n	80025c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c2:	4b3f      	ldr	r3, [pc, #252]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d2:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e067      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e2:	4b37      	ldr	r3, [pc, #220]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f023 0203 	bic.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4934      	ldr	r1, [pc, #208]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f4:	f7fe fe64 	bl	80012c0 <HAL_GetTick>
 80025f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fc:	f7fe fe60 	bl	80012c0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	; 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e04f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 020c 	and.w	r2, r3, #12
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	429a      	cmp	r2, r3
 8002622:	d1eb      	bne.n	80025fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d20c      	bcs.n	800264c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b22      	ldr	r3, [pc, #136]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e032      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4916      	ldr	r1, [pc, #88]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	490e      	ldr	r1, [pc, #56]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800268a:	f000 fb7f 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 800268e:	4602      	mov	r2, r0
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	490a      	ldr	r1, [pc, #40]	; (80026c4 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	5ccb      	ldrb	r3, [r1, r3]
 800269e:	fa22 f303 	lsr.w	r3, r2, r3
 80026a2:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fdc4 	bl	8001238 <HAL_InitTick>

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023c00 	.word	0x40023c00
 80026c0:	40023800 	.word	0x40023800
 80026c4:	08004fbc 	.word	0x08004fbc
 80026c8:	20000008 	.word	0x20000008
 80026cc:	2000000c 	.word	0x2000000c

080026d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000008 	.word	0x20000008

080026e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026ec:	f7ff fff0 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0a9b      	lsrs	r3, r3, #10
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4903      	ldr	r1, [pc, #12]	; (800270c <HAL_RCC_GetPCLK1Freq+0x24>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	08004fcc 	.word	0x08004fcc

08002710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002714:	f7ff ffdc 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	0b5b      	lsrs	r3, r3, #13
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	08004fcc 	.word	0x08004fcc

08002738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08c      	sub	sp, #48	; 0x30
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d010      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002770:	4b6f      	ldr	r3, [pc, #444]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002776:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277e:	496c      	ldr	r1, [pc, #432]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800278e:	2301      	movs	r3, #1
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d010      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800279e:	4b64      	ldr	r3, [pc, #400]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027a4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	4960      	ldr	r1, [pc, #384]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80027bc:	2301      	movs	r3, #1
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d017      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027cc:	4b58      	ldr	r3, [pc, #352]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4955      	ldr	r1, [pc, #340]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ea:	d101      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80027ec:	2301      	movs	r3, #1
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80027f8:	2301      	movs	r3, #1
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d017      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002808:	4b49      	ldr	r3, [pc, #292]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800280a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800280e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002816:	4946      	ldr	r1, [pc, #280]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002826:	d101      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002828:	2301      	movs	r3, #1
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002834:	2301      	movs	r3, #1
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 808a 	beq.w	800295a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	4b39      	ldr	r3, [pc, #228]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a38      	ldr	r2, [pc, #224]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b36      	ldr	r3, [pc, #216]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002862:	4b34      	ldr	r3, [pc, #208]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a33      	ldr	r2, [pc, #204]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800286e:	f7fe fd27 	bl	80012c0 <HAL_GetTick>
 8002872:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002876:	f7fe fd23 	bl	80012c0 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e278      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002894:	4b26      	ldr	r3, [pc, #152]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d02f      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ac:	6a3a      	ldr	r2, [r7, #32]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d028      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028b2:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ba:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028c2:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80028c8:	4a19      	ldr	r2, [pc, #100]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d114      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe fcf1 	bl	80012c0 <HAL_GetTick>
 80028de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e0:	e00a      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7fe fced 	bl	80012c0 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e240      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f8:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0ee      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002910:	d114      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002926:	4902      	ldr	r1, [pc, #8]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002928:	4313      	orrs	r3, r2
 800292a:	608b      	str	r3, [r1, #8]
 800292c:	e00c      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	40007000 	.word	0x40007000
 8002938:	42470e40 	.word	0x42470e40
 800293c:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a49      	ldr	r2, [pc, #292]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002942:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002946:	6093      	str	r3, [r2, #8]
 8002948:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800294a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002954:	4944      	ldr	r1, [pc, #272]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002956:	4313      	orrs	r3, r2
 8002958:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	d004      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800296c:	4b3f      	ldr	r3, [pc, #252]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800296e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800297c:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800297e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002982:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	4937      	ldr	r1, [pc, #220]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800299e:	4b32      	ldr	r3, [pc, #200]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ac:	492e      	ldr	r1, [pc, #184]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d011      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029c0:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	4926      	ldr	r1, [pc, #152]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029de:	d101      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80029e0:	2301      	movs	r3, #1
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	491a      	ldr	r1, [pc, #104]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d011      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a18:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a20:	4911      	ldr	r1, [pc, #68]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a30:	d101      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002a32:	2301      	movs	r3, #1
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a44:	f040 80ff 	bne.w	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a4e:	f7fe fc37 	bl	80012c0 <HAL_GetTick>
 8002a52:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a54:	e00e      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a56:	f7fe fc33 	bl	80012c0 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d907      	bls.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e188      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	424711e0 	.word	0x424711e0
 8002a70:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a74:	4b7e      	ldr	r3, [pc, #504]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ea      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d028      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d124      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002aa8:	4b71      	ldr	r3, [pc, #452]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002aba:	4b6d      	ldr	r3, [pc, #436]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac0:	0e1b      	lsrs	r3, r3, #24
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	019b      	lsls	r3, r3, #6
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	041b      	lsls	r3, r3, #16
 8002adc:	431a      	orrs	r2, r3
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	061b      	lsls	r3, r3, #24
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	071b      	lsls	r3, r3, #28
 8002aea:	4961      	ldr	r1, [pc, #388]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d035      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1c:	d130      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b1e:	4b54      	ldr	r3, [pc, #336]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b24:	0c1b      	lsrs	r3, r3, #16
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b30:	4b4f      	ldr	r3, [pc, #316]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b36:	0f1b      	lsrs	r3, r3, #28
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	019b      	lsls	r3, r3, #6
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	085b      	lsrs	r3, r3, #1
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	041b      	lsls	r3, r3, #16
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	061b      	lsls	r3, r3, #24
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	071b      	lsls	r3, r3, #28
 8002b60:	4943      	ldr	r1, [pc, #268]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b68:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b6e:	f023 021f 	bic.w	r2, r3, #31
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	3b01      	subs	r3, #1
 8002b78:	493d      	ldr	r1, [pc, #244]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d029      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b94:	d124      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b96:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ba8:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bae:	0f1b      	lsrs	r3, r3, #28
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	019b      	lsls	r3, r3, #6
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	041b      	lsls	r3, r3, #16
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	071b      	lsls	r3, r3, #28
 8002bd8:	4925      	ldr	r1, [pc, #148]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d016      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	019b      	lsls	r3, r3, #6
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	041b      	lsls	r3, r3, #16
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	071b      	lsls	r3, r3, #28
 8002c12:	4917      	ldr	r1, [pc, #92]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c20:	f7fe fb4e 	bl	80012c0 <HAL_GetTick>
 8002c24:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c28:	f7fe fb4a 	bl	80012c0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e09f      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	f040 8095 	bne.w	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fb34 	bl	80012c0 <HAL_GetTick>
 8002c58:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c5a:	e00f      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c5c:	f7fe fb30 	bl	80012c0 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d908      	bls.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e085      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	42470068 	.word	0x42470068
 8002c78:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c7c:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c88:	d0e8      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d02b      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d127      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002cb2:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	085b      	lsrs	r3, r3, #1
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	041b      	lsls	r3, r3, #16
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	061b      	lsls	r3, r3, #24
 8002ce0:	4928      	ldr	r1, [pc, #160]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ce8:	4b26      	ldr	r3, [pc, #152]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	4922      	ldr	r1, [pc, #136]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d01d      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d16:	d118      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d18:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	0e1b      	lsrs	r3, r3, #24
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	019b      	lsls	r3, r3, #6
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	061b      	lsls	r3, r3, #24
 8002d42:	4910      	ldr	r1, [pc, #64]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d50:	f7fe fab6 	bl	80012c0 <HAL_GetTick>
 8002d54:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d58:	f7fe fab2 	bl	80012c0 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e007      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d76:	d1ef      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3730      	adds	r7, #48	; 0x30
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	42470070 	.word	0x42470070

08002d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d90:	b0ae      	sub	sp, #184	; 0xb8
 8002d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db2:	4bcb      	ldr	r3, [pc, #812]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b0c      	cmp	r3, #12
 8002dbc:	f200 8206 	bhi.w	80031cc <HAL_RCC_GetSysClockFreq+0x440>
 8002dc0:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc6:	bf00      	nop
 8002dc8:	08002dfd 	.word	0x08002dfd
 8002dcc:	080031cd 	.word	0x080031cd
 8002dd0:	080031cd 	.word	0x080031cd
 8002dd4:	080031cd 	.word	0x080031cd
 8002dd8:	08002e05 	.word	0x08002e05
 8002ddc:	080031cd 	.word	0x080031cd
 8002de0:	080031cd 	.word	0x080031cd
 8002de4:	080031cd 	.word	0x080031cd
 8002de8:	08002e0d 	.word	0x08002e0d
 8002dec:	080031cd 	.word	0x080031cd
 8002df0:	080031cd 	.word	0x080031cd
 8002df4:	080031cd 	.word	0x080031cd
 8002df8:	08002ffd 	.word	0x08002ffd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dfc:	4bb9      	ldr	r3, [pc, #740]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002e02:	e1e7      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e04:	4bb8      	ldr	r3, [pc, #736]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e0a:	e1e3      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e0c:	4bb4      	ldr	r3, [pc, #720]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e18:	4bb1      	ldr	r3, [pc, #708]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d071      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e24:	4bae      	ldr	r3, [pc, #696]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e30:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e4a:	4622      	mov	r2, r4
 8002e4c:	462b      	mov	r3, r5
 8002e4e:	f04f 0000 	mov.w	r0, #0
 8002e52:	f04f 0100 	mov.w	r1, #0
 8002e56:	0159      	lsls	r1, r3, #5
 8002e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e5c:	0150      	lsls	r0, r2, #5
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4621      	mov	r1, r4
 8002e64:	1a51      	subs	r1, r2, r1
 8002e66:	6439      	str	r1, [r7, #64]	; 0x40
 8002e68:	4629      	mov	r1, r5
 8002e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	018b      	lsls	r3, r1, #6
 8002e80:	4641      	mov	r1, r8
 8002e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e86:	4641      	mov	r1, r8
 8002e88:	018a      	lsls	r2, r1, #6
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	1a51      	subs	r1, r2, r1
 8002e8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e90:	4649      	mov	r1, r9
 8002e92:	eb63 0301 	sbc.w	r3, r3, r1
 8002e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002ea4:	4649      	mov	r1, r9
 8002ea6:	00cb      	lsls	r3, r1, #3
 8002ea8:	4641      	mov	r1, r8
 8002eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eae:	4641      	mov	r1, r8
 8002eb0:	00ca      	lsls	r2, r1, #3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4622      	mov	r2, r4
 8002eba:	189b      	adds	r3, r3, r2
 8002ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ebe:	462b      	mov	r3, r5
 8002ec0:	460a      	mov	r2, r1
 8002ec2:	eb42 0303 	adc.w	r3, r2, r3
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	024b      	lsls	r3, r1, #9
 8002ed8:	4621      	mov	r1, r4
 8002eda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ede:	4621      	mov	r1, r4
 8002ee0:	024a      	lsls	r2, r1, #9
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ef0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ef4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ef8:	f7fd f984 	bl	8000204 <__aeabi_uldivmod>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4613      	mov	r3, r2
 8002f02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f06:	e067      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f08:	4b75      	ldr	r3, [pc, #468]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	099b      	lsrs	r3, r3, #6
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f14:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f20:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f22:	2300      	movs	r3, #0
 8002f24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f2a:	4622      	mov	r2, r4
 8002f2c:	462b      	mov	r3, r5
 8002f2e:	f04f 0000 	mov.w	r0, #0
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	0159      	lsls	r1, r3, #5
 8002f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f3c:	0150      	lsls	r0, r2, #5
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4621      	mov	r1, r4
 8002f44:	1a51      	subs	r1, r2, r1
 8002f46:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f48:	4629      	mov	r1, r5
 8002f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f5c:	4649      	mov	r1, r9
 8002f5e:	018b      	lsls	r3, r1, #6
 8002f60:	4641      	mov	r1, r8
 8002f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f66:	4641      	mov	r1, r8
 8002f68:	018a      	lsls	r2, r1, #6
 8002f6a:	4641      	mov	r1, r8
 8002f6c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f70:	4649      	mov	r1, r9
 8002f72:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f8a:	4692      	mov	sl, r2
 8002f8c:	469b      	mov	fp, r3
 8002f8e:	4623      	mov	r3, r4
 8002f90:	eb1a 0303 	adds.w	r3, sl, r3
 8002f94:	623b      	str	r3, [r7, #32]
 8002f96:	462b      	mov	r3, r5
 8002f98:	eb4b 0303 	adc.w	r3, fp, r3
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002faa:	4629      	mov	r1, r5
 8002fac:	028b      	lsls	r3, r1, #10
 8002fae:	4621      	mov	r1, r4
 8002fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	028a      	lsls	r2, r1, #10
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	673b      	str	r3, [r7, #112]	; 0x70
 8002fc4:	677a      	str	r2, [r7, #116]	; 0x74
 8002fc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002fca:	f7fd f91b 	bl	8000204 <__aeabi_uldivmod>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fd8:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002fea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ffa:	e0eb      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ffc:	4b38      	ldr	r3, [pc, #224]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003008:	4b35      	ldr	r3, [pc, #212]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d06b      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003014:	4b32      	ldr	r3, [pc, #200]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	099b      	lsrs	r3, r3, #6
 800301a:	2200      	movs	r2, #0
 800301c:	66bb      	str	r3, [r7, #104]	; 0x68
 800301e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003026:	663b      	str	r3, [r7, #96]	; 0x60
 8003028:	2300      	movs	r3, #0
 800302a:	667b      	str	r3, [r7, #100]	; 0x64
 800302c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003030:	4622      	mov	r2, r4
 8003032:	462b      	mov	r3, r5
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	f04f 0100 	mov.w	r1, #0
 800303c:	0159      	lsls	r1, r3, #5
 800303e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003042:	0150      	lsls	r0, r2, #5
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4621      	mov	r1, r4
 800304a:	1a51      	subs	r1, r2, r1
 800304c:	61b9      	str	r1, [r7, #24]
 800304e:	4629      	mov	r1, r5
 8003050:	eb63 0301 	sbc.w	r3, r3, r1
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003062:	4659      	mov	r1, fp
 8003064:	018b      	lsls	r3, r1, #6
 8003066:	4651      	mov	r1, sl
 8003068:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800306c:	4651      	mov	r1, sl
 800306e:	018a      	lsls	r2, r1, #6
 8003070:	4651      	mov	r1, sl
 8003072:	ebb2 0801 	subs.w	r8, r2, r1
 8003076:	4659      	mov	r1, fp
 8003078:	eb63 0901 	sbc.w	r9, r3, r1
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003088:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800308c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003090:	4690      	mov	r8, r2
 8003092:	4699      	mov	r9, r3
 8003094:	4623      	mov	r3, r4
 8003096:	eb18 0303 	adds.w	r3, r8, r3
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	462b      	mov	r3, r5
 800309e:	eb49 0303 	adc.w	r3, r9, r3
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80030b0:	4629      	mov	r1, r5
 80030b2:	024b      	lsls	r3, r1, #9
 80030b4:	4621      	mov	r1, r4
 80030b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030ba:	4621      	mov	r1, r4
 80030bc:	024a      	lsls	r2, r1, #9
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030c6:	2200      	movs	r2, #0
 80030c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80030ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030d0:	f7fd f898 	bl	8000204 <__aeabi_uldivmod>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4613      	mov	r3, r2
 80030da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030de:	e065      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x420>
 80030e0:	40023800 	.word	0x40023800
 80030e4:	00f42400 	.word	0x00f42400
 80030e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ec:	4b3d      	ldr	r3, [pc, #244]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	099b      	lsrs	r3, r3, #6
 80030f2:	2200      	movs	r2, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	4611      	mov	r1, r2
 80030f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030fc:	653b      	str	r3, [r7, #80]	; 0x50
 80030fe:	2300      	movs	r3, #0
 8003100:	657b      	str	r3, [r7, #84]	; 0x54
 8003102:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003106:	4642      	mov	r2, r8
 8003108:	464b      	mov	r3, r9
 800310a:	f04f 0000 	mov.w	r0, #0
 800310e:	f04f 0100 	mov.w	r1, #0
 8003112:	0159      	lsls	r1, r3, #5
 8003114:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003118:	0150      	lsls	r0, r2, #5
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4641      	mov	r1, r8
 8003120:	1a51      	subs	r1, r2, r1
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	4649      	mov	r1, r9
 8003126:	eb63 0301 	sbc.w	r3, r3, r1
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003138:	4659      	mov	r1, fp
 800313a:	018b      	lsls	r3, r1, #6
 800313c:	4651      	mov	r1, sl
 800313e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003142:	4651      	mov	r1, sl
 8003144:	018a      	lsls	r2, r1, #6
 8003146:	4651      	mov	r1, sl
 8003148:	1a54      	subs	r4, r2, r1
 800314a:	4659      	mov	r1, fp
 800314c:	eb63 0501 	sbc.w	r5, r3, r1
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	00eb      	lsls	r3, r5, #3
 800315a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800315e:	00e2      	lsls	r2, r4, #3
 8003160:	4614      	mov	r4, r2
 8003162:	461d      	mov	r5, r3
 8003164:	4643      	mov	r3, r8
 8003166:	18e3      	adds	r3, r4, r3
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	464b      	mov	r3, r9
 800316c:	eb45 0303 	adc.w	r3, r5, r3
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800317e:	4629      	mov	r1, r5
 8003180:	028b      	lsls	r3, r1, #10
 8003182:	4621      	mov	r1, r4
 8003184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003188:	4621      	mov	r1, r4
 800318a:	028a      	lsls	r2, r1, #10
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003194:	2200      	movs	r2, #0
 8003196:	64bb      	str	r3, [r7, #72]	; 0x48
 8003198:	64fa      	str	r2, [r7, #76]	; 0x4c
 800319a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800319e:	f7fd f831 	bl	8000204 <__aeabi_uldivmod>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4613      	mov	r3, r2
 80031a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031ac:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	0f1b      	lsrs	r3, r3, #28
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80031ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031ca:	e003      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80031ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	37b8      	adds	r7, #184	; 0xb8
 80031dc:	46bd      	mov	sp, r7
 80031de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	00f42400 	.word	0x00f42400

080031ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e28d      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 8083 	beq.w	8003312 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800320c:	4b94      	ldr	r3, [pc, #592]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b04      	cmp	r3, #4
 8003216:	d019      	beq.n	800324c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003218:	4b91      	ldr	r3, [pc, #580]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003220:	2b08      	cmp	r3, #8
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003224:	4b8e      	ldr	r3, [pc, #568]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003230:	d00c      	beq.n	800324c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003232:	4b8b      	ldr	r3, [pc, #556]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800323a:	2b0c      	cmp	r3, #12
 800323c:	d112      	bne.n	8003264 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323e:	4b88      	ldr	r3, [pc, #544]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324a:	d10b      	bne.n	8003264 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	4b84      	ldr	r3, [pc, #528]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d05b      	beq.n	8003310 <HAL_RCC_OscConfig+0x124>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d157      	bne.n	8003310 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e25a      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326c:	d106      	bne.n	800327c <HAL_RCC_OscConfig+0x90>
 800326e:	4b7c      	ldr	r3, [pc, #496]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7b      	ldr	r2, [pc, #492]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e01d      	b.n	80032b8 <HAL_RCC_OscConfig+0xcc>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0xb4>
 8003286:	4b76      	ldr	r3, [pc, #472]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a75      	ldr	r2, [pc, #468]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 800328c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b73      	ldr	r3, [pc, #460]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a72      	ldr	r2, [pc, #456]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e00b      	b.n	80032b8 <HAL_RCC_OscConfig+0xcc>
 80032a0:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a6e      	ldr	r2, [pc, #440]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 80032a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	4b6c      	ldr	r3, [pc, #432]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a6b      	ldr	r2, [pc, #428]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 80032b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d013      	beq.n	80032e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fd fffe 	bl	80012c0 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fd fffa 	bl	80012c0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e21f      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032da:	4b61      	ldr	r3, [pc, #388]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0xdc>
 80032e6:	e014      	b.n	8003312 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fd ffea 	bl	80012c0 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f0:	f7fd ffe6 	bl	80012c0 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e20b      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003302:	4b57      	ldr	r3, [pc, #348]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x104>
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d06f      	beq.n	80033fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800331e:	4b50      	ldr	r3, [pc, #320]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b00      	cmp	r3, #0
 8003328:	d017      	beq.n	800335a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800332a:	4b4d      	ldr	r3, [pc, #308]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003332:	2b08      	cmp	r3, #8
 8003334:	d105      	bne.n	8003342 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003336:	4b4a      	ldr	r3, [pc, #296]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00b      	beq.n	800335a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003342:	4b47      	ldr	r3, [pc, #284]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800334a:	2b0c      	cmp	r3, #12
 800334c:	d11c      	bne.n	8003388 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800334e:	4b44      	ldr	r3, [pc, #272]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d116      	bne.n	8003388 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335a:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_RCC_OscConfig+0x186>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d001      	beq.n	8003372 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e1d3      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003372:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4937      	ldr	r1, [pc, #220]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003386:	e03a      	b.n	80033fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d020      	beq.n	80033d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003390:	4b34      	ldr	r3, [pc, #208]	; (8003464 <HAL_RCC_OscConfig+0x278>)
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003396:	f7fd ff93 	bl	80012c0 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800339e:	f7fd ff8f 	bl	80012c0 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e1b4      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	4b2b      	ldr	r3, [pc, #172]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033bc:	4b28      	ldr	r3, [pc, #160]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4925      	ldr	r1, [pc, #148]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]
 80033d0:	e015      	b.n	80033fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <HAL_RCC_OscConfig+0x278>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fd ff72 	bl	80012c0 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e0:	f7fd ff6e 	bl	80012c0 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e193      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d036      	beq.n	8003478 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d016      	beq.n	8003440 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003412:	4b15      	ldr	r3, [pc, #84]	; (8003468 <HAL_RCC_OscConfig+0x27c>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fd ff52 	bl	80012c0 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003420:	f7fd ff4e 	bl	80012c0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e173      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_OscConfig+0x274>)
 8003434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0x234>
 800343e:	e01b      	b.n	8003478 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003440:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_RCC_OscConfig+0x27c>)
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fd ff3b 	bl	80012c0 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344c:	e00e      	b.n	800346c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800344e:	f7fd ff37 	bl	80012c0 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d907      	bls.n	800346c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e15c      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
 8003460:	40023800 	.word	0x40023800
 8003464:	42470000 	.word	0x42470000
 8003468:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346c:	4b8a      	ldr	r3, [pc, #552]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 800346e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ea      	bne.n	800344e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 8097 	beq.w	80035b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348a:	4b83      	ldr	r3, [pc, #524]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10f      	bne.n	80034b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	4b7f      	ldr	r3, [pc, #508]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	4a7e      	ldr	r2, [pc, #504]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 80034a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a4:	6413      	str	r3, [r2, #64]	; 0x40
 80034a6:	4b7c      	ldr	r3, [pc, #496]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b2:	2301      	movs	r3, #1
 80034b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b6:	4b79      	ldr	r3, [pc, #484]	; (800369c <HAL_RCC_OscConfig+0x4b0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d118      	bne.n	80034f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c2:	4b76      	ldr	r3, [pc, #472]	; (800369c <HAL_RCC_OscConfig+0x4b0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a75      	ldr	r2, [pc, #468]	; (800369c <HAL_RCC_OscConfig+0x4b0>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ce:	f7fd fef7 	bl	80012c0 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d6:	f7fd fef3 	bl	80012c0 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e118      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e8:	4b6c      	ldr	r3, [pc, #432]	; (800369c <HAL_RCC_OscConfig+0x4b0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d106      	bne.n	800350a <HAL_RCC_OscConfig+0x31e>
 80034fc:	4b66      	ldr	r3, [pc, #408]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	4a65      	ldr	r2, [pc, #404]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6713      	str	r3, [r2, #112]	; 0x70
 8003508:	e01c      	b.n	8003544 <HAL_RCC_OscConfig+0x358>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b05      	cmp	r3, #5
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0x340>
 8003512:	4b61      	ldr	r3, [pc, #388]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a60      	ldr	r2, [pc, #384]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 8003518:	f043 0304 	orr.w	r3, r3, #4
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
 800351e:	4b5e      	ldr	r3, [pc, #376]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4a5d      	ldr	r2, [pc, #372]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	6713      	str	r3, [r2, #112]	; 0x70
 800352a:	e00b      	b.n	8003544 <HAL_RCC_OscConfig+0x358>
 800352c:	4b5a      	ldr	r3, [pc, #360]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a59      	ldr	r2, [pc, #356]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 8003532:	f023 0301 	bic.w	r3, r3, #1
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
 8003538:	4b57      	ldr	r3, [pc, #348]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	4a56      	ldr	r2, [pc, #344]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 800353e:	f023 0304 	bic.w	r3, r3, #4
 8003542:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d015      	beq.n	8003578 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354c:	f7fd feb8 	bl	80012c0 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003552:	e00a      	b.n	800356a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003554:	f7fd feb4 	bl	80012c0 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0d7      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356a:	4b4b      	ldr	r3, [pc, #300]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ee      	beq.n	8003554 <HAL_RCC_OscConfig+0x368>
 8003576:	e014      	b.n	80035a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fd fea2 	bl	80012c0 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357e:	e00a      	b.n	8003596 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003580:	f7fd fe9e 	bl	80012c0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e0c1      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003596:	4b40      	ldr	r3, [pc, #256]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ee      	bne.n	8003580 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a8:	4b3b      	ldr	r3, [pc, #236]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	4a3a      	ldr	r2, [pc, #232]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 80035ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 80ad 	beq.w	8003718 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035be:	4b36      	ldr	r3, [pc, #216]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d060      	beq.n	800368c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d145      	bne.n	800365e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d2:	4b33      	ldr	r3, [pc, #204]	; (80036a0 <HAL_RCC_OscConfig+0x4b4>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fd fe72 	bl	80012c0 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fd fe6e 	bl	80012c0 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e093      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	019b      	lsls	r3, r3, #6
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	3b01      	subs	r3, #1
 8003618:	041b      	lsls	r3, r3, #16
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	061b      	lsls	r3, r3, #24
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	071b      	lsls	r3, r3, #28
 800362a:	491b      	ldr	r1, [pc, #108]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_RCC_OscConfig+0x4b4>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003636:	f7fd fe43 	bl	80012c0 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800363e:	f7fd fe3f 	bl	80012c0 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e064      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003650:	4b11      	ldr	r3, [pc, #68]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x452>
 800365c:	e05c      	b.n	8003718 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365e:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <HAL_RCC_OscConfig+0x4b4>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fd fe2c 	bl	80012c0 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366c:	f7fd fe28 	bl	80012c0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e04d      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <HAL_RCC_OscConfig+0x4ac>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x480>
 800368a:	e045      	b.n	8003718 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d107      	bne.n	80036a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e040      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
 8003698:	40023800 	.word	0x40023800
 800369c:	40007000 	.word	0x40007000
 80036a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036a4:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <HAL_RCC_OscConfig+0x538>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d030      	beq.n	8003714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d129      	bne.n	8003714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d122      	bne.n	8003714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036d4:	4013      	ands	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036dc:	4293      	cmp	r3, r2
 80036de:	d119      	bne.n	8003714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	3b01      	subs	r3, #1
 80036ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d10f      	bne.n	8003714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d107      	bne.n	8003714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800

08003728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e041      	b.n	80037be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd fb1c 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f000 f9d8 	bl	8003b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d001      	beq.n	80037e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e04e      	b.n	800387e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a23      	ldr	r2, [pc, #140]	; (800388c <HAL_TIM_Base_Start_IT+0xc4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d022      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x80>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380a:	d01d      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x80>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1f      	ldr	r2, [pc, #124]	; (8003890 <HAL_TIM_Base_Start_IT+0xc8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d018      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x80>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <HAL_TIM_Base_Start_IT+0xcc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d013      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x80>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1c      	ldr	r2, [pc, #112]	; (8003898 <HAL_TIM_Base_Start_IT+0xd0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00e      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x80>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1b      	ldr	r2, [pc, #108]	; (800389c <HAL_TIM_Base_Start_IT+0xd4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d009      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x80>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d004      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x80>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d111      	bne.n	800386c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b06      	cmp	r3, #6
 8003858:	d010      	beq.n	800387c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386a:	e007      	b.n	800387c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40010000 	.word	0x40010000
 8003890:	40000400 	.word	0x40000400
 8003894:	40000800 	.word	0x40000800
 8003898:	40000c00 	.word	0x40000c00
 800389c:	40010400 	.word	0x40010400
 80038a0:	40014000 	.word	0x40014000
 80038a4:	40001800 	.word	0x40001800

080038a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d122      	bne.n	8003904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d11b      	bne.n	8003904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0202 	mvn.w	r2, #2
 80038d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8f8 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8ea 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f8fb 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b04      	cmp	r3, #4
 8003910:	d122      	bne.n	8003958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b04      	cmp	r3, #4
 800391e:	d11b      	bne.n	8003958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0204 	mvn.w	r2, #4
 8003928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8ce 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 8003944:	e005      	b.n	8003952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f8c0 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f8d1 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b08      	cmp	r3, #8
 8003964:	d122      	bne.n	80039ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b08      	cmp	r3, #8
 8003972:	d11b      	bne.n	80039ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0208 	mvn.w	r2, #8
 800397c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2204      	movs	r2, #4
 8003982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f8a4 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 8003998:	e005      	b.n	80039a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f896 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f8a7 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d122      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d11b      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0210 	mvn.w	r2, #16
 80039d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2208      	movs	r2, #8
 80039d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f87a 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 80039ec:	e005      	b.n	80039fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f86c 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f87d 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d10e      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0201 	mvn.w	r2, #1
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f846 	bl	8003ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b80      	cmp	r3, #128	; 0x80
 8003a38:	d10e      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	2b80      	cmp	r3, #128	; 0x80
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f988 	bl	8003d68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d10e      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	2b40      	cmp	r3, #64	; 0x40
 8003a72:	d107      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f842 	bl	8003b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d10e      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d107      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0220 	mvn.w	r2, #32
 8003aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f952 	bl	8003d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a40      	ldr	r2, [pc, #256]	; (8003c30 <TIM_Base_SetConfig+0x114>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3a:	d00f      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a3d      	ldr	r2, [pc, #244]	; (8003c34 <TIM_Base_SetConfig+0x118>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00b      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a3c      	ldr	r2, [pc, #240]	; (8003c38 <TIM_Base_SetConfig+0x11c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d007      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a3b      	ldr	r2, [pc, #236]	; (8003c3c <TIM_Base_SetConfig+0x120>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a3a      	ldr	r2, [pc, #232]	; (8003c40 <TIM_Base_SetConfig+0x124>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d108      	bne.n	8003b6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a2f      	ldr	r2, [pc, #188]	; (8003c30 <TIM_Base_SetConfig+0x114>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d02b      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7c:	d027      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a2c      	ldr	r2, [pc, #176]	; (8003c34 <TIM_Base_SetConfig+0x118>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d023      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a2b      	ldr	r2, [pc, #172]	; (8003c38 <TIM_Base_SetConfig+0x11c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01f      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a2a      	ldr	r2, [pc, #168]	; (8003c3c <TIM_Base_SetConfig+0x120>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01b      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a29      	ldr	r2, [pc, #164]	; (8003c40 <TIM_Base_SetConfig+0x124>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d017      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a28      	ldr	r2, [pc, #160]	; (8003c44 <TIM_Base_SetConfig+0x128>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d013      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a27      	ldr	r2, [pc, #156]	; (8003c48 <TIM_Base_SetConfig+0x12c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00f      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a26      	ldr	r2, [pc, #152]	; (8003c4c <TIM_Base_SetConfig+0x130>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00b      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a25      	ldr	r2, [pc, #148]	; (8003c50 <TIM_Base_SetConfig+0x134>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a24      	ldr	r2, [pc, #144]	; (8003c54 <TIM_Base_SetConfig+0x138>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a23      	ldr	r2, [pc, #140]	; (8003c58 <TIM_Base_SetConfig+0x13c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d108      	bne.n	8003be0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <TIM_Base_SetConfig+0x114>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d003      	beq.n	8003c14 <TIM_Base_SetConfig+0xf8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a0c      	ldr	r2, [pc, #48]	; (8003c40 <TIM_Base_SetConfig+0x124>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d103      	bne.n	8003c1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	615a      	str	r2, [r3, #20]
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40000400 	.word	0x40000400
 8003c38:	40000800 	.word	0x40000800
 8003c3c:	40000c00 	.word	0x40000c00
 8003c40:	40010400 	.word	0x40010400
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800
 8003c50:	40001800 	.word	0x40001800
 8003c54:	40001c00 	.word	0x40001c00
 8003c58:	40002000 	.word	0x40002000

08003c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e05a      	b.n	8003d2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a21      	ldr	r2, [pc, #132]	; (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d022      	beq.n	8003cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc0:	d01d      	beq.n	8003cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d018      	beq.n	8003cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1a      	ldr	r2, [pc, #104]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00e      	beq.n	8003cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a18      	ldr	r2, [pc, #96]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d009      	beq.n	8003cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a17      	ldr	r2, [pc, #92]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d004      	beq.n	8003cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d10c      	bne.n	8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40010000 	.word	0x40010000
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800
 8003d44:	40000c00 	.word	0x40000c00
 8003d48:	40010400 	.word	0x40010400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40001800 	.word	0x40001800

08003d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e03f      	b.n	8003e0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fd f838 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2224      	movs	r2, #36	; 0x24
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f829 	bl	8003e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e1c:	b0c0      	sub	sp, #256	; 0x100
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e34:	68d9      	ldr	r1, [r3, #12]
 8003e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	ea40 0301 	orr.w	r3, r0, r1
 8003e40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e70:	f021 010c 	bic.w	r1, r1, #12
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e92:	6999      	ldr	r1, [r3, #24]
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	ea40 0301 	orr.w	r3, r0, r1
 8003e9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4b8f      	ldr	r3, [pc, #572]	; (80040e4 <UART_SetConfig+0x2cc>)
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d005      	beq.n	8003eb8 <UART_SetConfig+0xa0>
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4b8d      	ldr	r3, [pc, #564]	; (80040e8 <UART_SetConfig+0x2d0>)
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d104      	bne.n	8003ec2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eb8:	f7fe fc2a 	bl	8002710 <HAL_RCC_GetPCLK2Freq>
 8003ebc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ec0:	e003      	b.n	8003eca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ec2:	f7fe fc11 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 8003ec6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed4:	f040 810c 	bne.w	80040f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003edc:	2200      	movs	r2, #0
 8003ede:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ee2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ee6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003eea:	4622      	mov	r2, r4
 8003eec:	462b      	mov	r3, r5
 8003eee:	1891      	adds	r1, r2, r2
 8003ef0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ef2:	415b      	adcs	r3, r3
 8003ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003efa:	4621      	mov	r1, r4
 8003efc:	eb12 0801 	adds.w	r8, r2, r1
 8003f00:	4629      	mov	r1, r5
 8003f02:	eb43 0901 	adc.w	r9, r3, r1
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f1a:	4690      	mov	r8, r2
 8003f1c:	4699      	mov	r9, r3
 8003f1e:	4623      	mov	r3, r4
 8003f20:	eb18 0303 	adds.w	r3, r8, r3
 8003f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f28:	462b      	mov	r3, r5
 8003f2a:	eb49 0303 	adc.w	r3, r9, r3
 8003f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f46:	460b      	mov	r3, r1
 8003f48:	18db      	adds	r3, r3, r3
 8003f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	eb42 0303 	adc.w	r3, r2, r3
 8003f52:	657b      	str	r3, [r7, #84]	; 0x54
 8003f54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f5c:	f7fc f952 	bl	8000204 <__aeabi_uldivmod>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4b61      	ldr	r3, [pc, #388]	; (80040ec <UART_SetConfig+0x2d4>)
 8003f66:	fba3 2302 	umull	r2, r3, r3, r2
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	011c      	lsls	r4, r3, #4
 8003f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f80:	4642      	mov	r2, r8
 8003f82:	464b      	mov	r3, r9
 8003f84:	1891      	adds	r1, r2, r2
 8003f86:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f88:	415b      	adcs	r3, r3
 8003f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f90:	4641      	mov	r1, r8
 8003f92:	eb12 0a01 	adds.w	sl, r2, r1
 8003f96:	4649      	mov	r1, r9
 8003f98:	eb43 0b01 	adc.w	fp, r3, r1
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fb0:	4692      	mov	sl, r2
 8003fb2:	469b      	mov	fp, r3
 8003fb4:	4643      	mov	r3, r8
 8003fb6:	eb1a 0303 	adds.w	r3, sl, r3
 8003fba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	eb4b 0303 	adc.w	r3, fp, r3
 8003fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003fd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	18db      	adds	r3, r3, r3
 8003fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	eb42 0303 	adc.w	r3, r2, r3
 8003fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8003fea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ff2:	f7fc f907 	bl	8000204 <__aeabi_uldivmod>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4b3b      	ldr	r3, [pc, #236]	; (80040ec <UART_SetConfig+0x2d4>)
 8003ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	2264      	movs	r2, #100	; 0x64
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	1acb      	subs	r3, r1, r3
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004012:	4b36      	ldr	r3, [pc, #216]	; (80040ec <UART_SetConfig+0x2d4>)
 8004014:	fba3 2302 	umull	r2, r3, r3, r2
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004020:	441c      	add	r4, r3
 8004022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004026:	2200      	movs	r2, #0
 8004028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800402c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004030:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004034:	4642      	mov	r2, r8
 8004036:	464b      	mov	r3, r9
 8004038:	1891      	adds	r1, r2, r2
 800403a:	63b9      	str	r1, [r7, #56]	; 0x38
 800403c:	415b      	adcs	r3, r3
 800403e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004044:	4641      	mov	r1, r8
 8004046:	1851      	adds	r1, r2, r1
 8004048:	6339      	str	r1, [r7, #48]	; 0x30
 800404a:	4649      	mov	r1, r9
 800404c:	414b      	adcs	r3, r1
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800405c:	4659      	mov	r1, fp
 800405e:	00cb      	lsls	r3, r1, #3
 8004060:	4651      	mov	r1, sl
 8004062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004066:	4651      	mov	r1, sl
 8004068:	00ca      	lsls	r2, r1, #3
 800406a:	4610      	mov	r0, r2
 800406c:	4619      	mov	r1, r3
 800406e:	4603      	mov	r3, r0
 8004070:	4642      	mov	r2, r8
 8004072:	189b      	adds	r3, r3, r2
 8004074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004078:	464b      	mov	r3, r9
 800407a:	460a      	mov	r2, r1
 800407c:	eb42 0303 	adc.w	r3, r2, r3
 8004080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004090:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004094:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004098:	460b      	mov	r3, r1
 800409a:	18db      	adds	r3, r3, r3
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
 800409e:	4613      	mov	r3, r2
 80040a0:	eb42 0303 	adc.w	r3, r2, r3
 80040a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040ae:	f7fc f8a9 	bl	8000204 <__aeabi_uldivmod>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <UART_SetConfig+0x2d4>)
 80040b8:	fba3 1302 	umull	r1, r3, r3, r2
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	2164      	movs	r1, #100	; 0x64
 80040c0:	fb01 f303 	mul.w	r3, r1, r3
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	3332      	adds	r3, #50	; 0x32
 80040ca:	4a08      	ldr	r2, [pc, #32]	; (80040ec <UART_SetConfig+0x2d4>)
 80040cc:	fba2 2303 	umull	r2, r3, r2, r3
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	f003 0207 	and.w	r2, r3, #7
 80040d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4422      	add	r2, r4
 80040de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040e0:	e106      	b.n	80042f0 <UART_SetConfig+0x4d8>
 80040e2:	bf00      	nop
 80040e4:	40011000 	.word	0x40011000
 80040e8:	40011400 	.word	0x40011400
 80040ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040f4:	2200      	movs	r2, #0
 80040f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004102:	4642      	mov	r2, r8
 8004104:	464b      	mov	r3, r9
 8004106:	1891      	adds	r1, r2, r2
 8004108:	6239      	str	r1, [r7, #32]
 800410a:	415b      	adcs	r3, r3
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
 800410e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004112:	4641      	mov	r1, r8
 8004114:	1854      	adds	r4, r2, r1
 8004116:	4649      	mov	r1, r9
 8004118:	eb43 0501 	adc.w	r5, r3, r1
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	00eb      	lsls	r3, r5, #3
 8004126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800412a:	00e2      	lsls	r2, r4, #3
 800412c:	4614      	mov	r4, r2
 800412e:	461d      	mov	r5, r3
 8004130:	4643      	mov	r3, r8
 8004132:	18e3      	adds	r3, r4, r3
 8004134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004138:	464b      	mov	r3, r9
 800413a:	eb45 0303 	adc.w	r3, r5, r3
 800413e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800414e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800415e:	4629      	mov	r1, r5
 8004160:	008b      	lsls	r3, r1, #2
 8004162:	4621      	mov	r1, r4
 8004164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004168:	4621      	mov	r1, r4
 800416a:	008a      	lsls	r2, r1, #2
 800416c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004170:	f7fc f848 	bl	8000204 <__aeabi_uldivmod>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4b60      	ldr	r3, [pc, #384]	; (80042fc <UART_SetConfig+0x4e4>)
 800417a:	fba3 2302 	umull	r2, r3, r3, r2
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	011c      	lsls	r4, r3, #4
 8004182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004186:	2200      	movs	r2, #0
 8004188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800418c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004190:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004194:	4642      	mov	r2, r8
 8004196:	464b      	mov	r3, r9
 8004198:	1891      	adds	r1, r2, r2
 800419a:	61b9      	str	r1, [r7, #24]
 800419c:	415b      	adcs	r3, r3
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041a4:	4641      	mov	r1, r8
 80041a6:	1851      	adds	r1, r2, r1
 80041a8:	6139      	str	r1, [r7, #16]
 80041aa:	4649      	mov	r1, r9
 80041ac:	414b      	adcs	r3, r1
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041bc:	4659      	mov	r1, fp
 80041be:	00cb      	lsls	r3, r1, #3
 80041c0:	4651      	mov	r1, sl
 80041c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041c6:	4651      	mov	r1, sl
 80041c8:	00ca      	lsls	r2, r1, #3
 80041ca:	4610      	mov	r0, r2
 80041cc:	4619      	mov	r1, r3
 80041ce:	4603      	mov	r3, r0
 80041d0:	4642      	mov	r2, r8
 80041d2:	189b      	adds	r3, r3, r2
 80041d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041d8:	464b      	mov	r3, r9
 80041da:	460a      	mov	r2, r1
 80041dc:	eb42 0303 	adc.w	r3, r2, r3
 80041e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80041ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041fc:	4649      	mov	r1, r9
 80041fe:	008b      	lsls	r3, r1, #2
 8004200:	4641      	mov	r1, r8
 8004202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004206:	4641      	mov	r1, r8
 8004208:	008a      	lsls	r2, r1, #2
 800420a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800420e:	f7fb fff9 	bl	8000204 <__aeabi_uldivmod>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4611      	mov	r1, r2
 8004218:	4b38      	ldr	r3, [pc, #224]	; (80042fc <UART_SetConfig+0x4e4>)
 800421a:	fba3 2301 	umull	r2, r3, r3, r1
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	2264      	movs	r2, #100	; 0x64
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	1acb      	subs	r3, r1, r3
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	3332      	adds	r3, #50	; 0x32
 800422c:	4a33      	ldr	r2, [pc, #204]	; (80042fc <UART_SetConfig+0x4e4>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004238:	441c      	add	r4, r3
 800423a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800423e:	2200      	movs	r2, #0
 8004240:	673b      	str	r3, [r7, #112]	; 0x70
 8004242:	677a      	str	r2, [r7, #116]	; 0x74
 8004244:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004248:	4642      	mov	r2, r8
 800424a:	464b      	mov	r3, r9
 800424c:	1891      	adds	r1, r2, r2
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	415b      	adcs	r3, r3
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004258:	4641      	mov	r1, r8
 800425a:	1851      	adds	r1, r2, r1
 800425c:	6039      	str	r1, [r7, #0]
 800425e:	4649      	mov	r1, r9
 8004260:	414b      	adcs	r3, r1
 8004262:	607b      	str	r3, [r7, #4]
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004270:	4659      	mov	r1, fp
 8004272:	00cb      	lsls	r3, r1, #3
 8004274:	4651      	mov	r1, sl
 8004276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800427a:	4651      	mov	r1, sl
 800427c:	00ca      	lsls	r2, r1, #3
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	4603      	mov	r3, r0
 8004284:	4642      	mov	r2, r8
 8004286:	189b      	adds	r3, r3, r2
 8004288:	66bb      	str	r3, [r7, #104]	; 0x68
 800428a:	464b      	mov	r3, r9
 800428c:	460a      	mov	r2, r1
 800428e:	eb42 0303 	adc.w	r3, r2, r3
 8004292:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	663b      	str	r3, [r7, #96]	; 0x60
 800429e:	667a      	str	r2, [r7, #100]	; 0x64
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042ac:	4649      	mov	r1, r9
 80042ae:	008b      	lsls	r3, r1, #2
 80042b0:	4641      	mov	r1, r8
 80042b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042b6:	4641      	mov	r1, r8
 80042b8:	008a      	lsls	r2, r1, #2
 80042ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042be:	f7fb ffa1 	bl	8000204 <__aeabi_uldivmod>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <UART_SetConfig+0x4e4>)
 80042c8:	fba3 1302 	umull	r1, r3, r3, r2
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	2164      	movs	r1, #100	; 0x64
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	3332      	adds	r3, #50	; 0x32
 80042da:	4a08      	ldr	r2, [pc, #32]	; (80042fc <UART_SetConfig+0x4e4>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	095b      	lsrs	r3, r3, #5
 80042e2:	f003 020f 	and.w	r2, r3, #15
 80042e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4422      	add	r2, r4
 80042ee:	609a      	str	r2, [r3, #8]
}
 80042f0:	bf00      	nop
 80042f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042f6:	46bd      	mov	sp, r7
 80042f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042fc:	51eb851f 	.word	0x51eb851f

08004300 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004300:	b084      	sub	sp, #16
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	f107 001c 	add.w	r0, r7, #28
 800430e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	2b01      	cmp	r3, #1
 8004316:	d122      	bne.n	800435e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800432c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004342:	2b01      	cmp	r3, #1
 8004344:	d105      	bne.n	8004352 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fa9c 	bl	8004890 <USB_CoreReset>
 8004358:	4603      	mov	r3, r0
 800435a:	73fb      	strb	r3, [r7, #15]
 800435c:	e01a      	b.n	8004394 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fa90 	bl	8004890 <USB_CoreReset>
 8004370:	4603      	mov	r3, r0
 8004372:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
 8004386:	e005      	b.n	8004394 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	2b01      	cmp	r3, #1
 8004398:	d10b      	bne.n	80043b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f043 0206 	orr.w	r2, r3, #6
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f043 0220 	orr.w	r2, r3, #32
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043be:	b004      	add	sp, #16
 80043c0:	4770      	bx	lr

080043c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d115      	bne.n	8004432 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004412:	2001      	movs	r0, #1
 8004414:	f7fc ff60 	bl	80012d8 <HAL_Delay>
      ms++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa28 	bl	8004874 <USB_GetMode>
 8004424:	4603      	mov	r3, r0
 8004426:	2b01      	cmp	r3, #1
 8004428:	d01e      	beq.n	8004468 <USB_SetCurrentMode+0x84>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b31      	cmp	r3, #49	; 0x31
 800442e:	d9f0      	bls.n	8004412 <USB_SetCurrentMode+0x2e>
 8004430:	e01a      	b.n	8004468 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d115      	bne.n	8004464 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004444:	2001      	movs	r0, #1
 8004446:	f7fc ff47 	bl	80012d8 <HAL_Delay>
      ms++;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3301      	adds	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fa0f 	bl	8004874 <USB_GetMode>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <USB_SetCurrentMode+0x84>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b31      	cmp	r3, #49	; 0x31
 8004460:	d9f0      	bls.n	8004444 <USB_SetCurrentMode+0x60>
 8004462:	e001      	b.n	8004468 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e005      	b.n	8004474 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b32      	cmp	r3, #50	; 0x32
 800446c:	d101      	bne.n	8004472 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800447c:	b084      	sub	sp, #16
 800447e:	b580      	push	{r7, lr}
 8004480:	b086      	sub	sp, #24
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800448a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	e009      	b.n	80044b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	3340      	adds	r3, #64	; 0x40
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	2200      	movs	r2, #0
 80044a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	3301      	adds	r3, #1
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	2b0e      	cmp	r3, #14
 80044b4:	d9f2      	bls.n	800449c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d11c      	bne.n	80044f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ca:	f043 0302 	orr.w	r3, r3, #2
 80044ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e005      	b.n	8004502 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004508:	461a      	mov	r2, r3
 800450a:	2300      	movs	r3, #0
 800450c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004514:	4619      	mov	r1, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451c:	461a      	mov	r2, r3
 800451e:	680b      	ldr	r3, [r1, #0]
 8004520:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	2b01      	cmp	r3, #1
 8004526:	d10c      	bne.n	8004542 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d104      	bne.n	8004538 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800452e:	2100      	movs	r1, #0
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f965 	bl	8004800 <USB_SetDevSpeed>
 8004536:	e008      	b.n	800454a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004538:	2101      	movs	r1, #1
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f960 	bl	8004800 <USB_SetDevSpeed>
 8004540:	e003      	b.n	800454a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004542:	2103      	movs	r1, #3
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f95b 	bl	8004800 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800454a:	2110      	movs	r1, #16
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f8f3 	bl	8004738 <USB_FlushTxFifo>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f91f 	bl	80047a0 <USB_FlushRxFifo>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	461a      	mov	r2, r3
 8004574:	2300      	movs	r3, #0
 8004576:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457e:	461a      	mov	r2, r3
 8004580:	2300      	movs	r3, #0
 8004582:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458a:	461a      	mov	r2, r3
 800458c:	2300      	movs	r3, #0
 800458e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	e043      	b.n	800461e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045ac:	d118      	bne.n	80045e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c0:	461a      	mov	r2, r3
 80045c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	e013      	b.n	80045f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d6:	461a      	mov	r2, r3
 80045d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e008      	b.n	80045f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ec:	461a      	mov	r2, r3
 80045ee:	2300      	movs	r3, #0
 80045f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fe:	461a      	mov	r2, r3
 8004600:	2300      	movs	r3, #0
 8004602:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004610:	461a      	mov	r2, r3
 8004612:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004616:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	3301      	adds	r3, #1
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	429a      	cmp	r2, r3
 8004624:	d3b7      	bcc.n	8004596 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	e043      	b.n	80046b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800463e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004642:	d118      	bne.n	8004676 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	461a      	mov	r2, r3
 8004658:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e013      	b.n	8004688 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466c:	461a      	mov	r2, r3
 800466e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	e008      	b.n	8004688 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004682:	461a      	mov	r2, r3
 8004684:	2300      	movs	r3, #0
 8004686:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004694:	461a      	mov	r2, r3
 8004696:	2300      	movs	r3, #0
 8004698:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	461a      	mov	r2, r3
 80046a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	3301      	adds	r3, #1
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d3b7      	bcc.n	800462c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	f043 0210 	orr.w	r2, r3, #16
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699a      	ldr	r2, [r3, #24]
 80046f4:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <USB_DevInit+0x2b8>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f043 0208 	orr.w	r2, r3, #8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800470e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d107      	bne.n	8004724 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800471c:	f043 0304 	orr.w	r3, r3, #4
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004724:	7dfb      	ldrb	r3, [r7, #23]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004730:	b004      	add	sp, #16
 8004732:	4770      	bx	lr
 8004734:	803c3800 	.word	0x803c3800

08004738 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3301      	adds	r3, #1
 800474a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4a13      	ldr	r2, [pc, #76]	; (800479c <USB_FlushTxFifo+0x64>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d901      	bls.n	8004758 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e01b      	b.n	8004790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	daf2      	bge.n	8004746 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	019b      	lsls	r3, r3, #6
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3301      	adds	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a08      	ldr	r2, [pc, #32]	; (800479c <USB_FlushTxFifo+0x64>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e006      	b.n	8004790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b20      	cmp	r3, #32
 800478c:	d0f0      	beq.n	8004770 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	00030d40 	.word	0x00030d40

080047a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3301      	adds	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4a11      	ldr	r2, [pc, #68]	; (80047fc <USB_FlushRxFifo+0x5c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e018      	b.n	80047f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	daf2      	bge.n	80047ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2210      	movs	r2, #16
 80047ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3301      	adds	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4a08      	ldr	r2, [pc, #32]	; (80047fc <USB_FlushRxFifo+0x5c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e006      	b.n	80047f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b10      	cmp	r3, #16
 80047ec:	d0f0      	beq.n	80047d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	00030d40 	.word	0x00030d40

08004800 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	68f9      	ldr	r1, [r7, #12]
 800481c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004820:	4313      	orrs	r3, r2
 8004822:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004832:	b480      	push	{r7}
 8004834:	b085      	sub	sp, #20
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800484c:	f023 0303 	bic.w	r3, r3, #3
 8004850:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004860:	f043 0302 	orr.w	r3, r3, #2
 8004864:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f003 0301 	and.w	r3, r3, #1
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3301      	adds	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <USB_CoreReset+0x64>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e01b      	b.n	80048e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	daf2      	bge.n	800489c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f043 0201 	orr.w	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3301      	adds	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a09      	ldr	r2, [pc, #36]	; (80048f4 <USB_CoreReset+0x64>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d901      	bls.n	80048d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e006      	b.n	80048e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d0f0      	beq.n	80048c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	00030d40 	.word	0x00030d40

080048f8 <arm_fir_init_f32>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	9c04      	ldr	r4, [sp, #16]
 80048fc:	6082      	str	r2, [r0, #8]
 80048fe:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004902:	3c01      	subs	r4, #1
 8004904:	440c      	add	r4, r1
 8004906:	8001      	strh	r1, [r0, #0]
 8004908:	4605      	mov	r5, r0
 800490a:	00a2      	lsls	r2, r4, #2
 800490c:	4618      	mov	r0, r3
 800490e:	2100      	movs	r1, #0
 8004910:	f000 fa82 	bl	8004e18 <memset>
 8004914:	6068      	str	r0, [r5, #4]
 8004916:	bd38      	pop	{r3, r4, r5, pc}

08004918 <arm_fir_f32>:
 8004918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491c:	ed2d 8b10 	vpush	{d8-d15}
 8004920:	b08b      	sub	sp, #44	; 0x2c
 8004922:	f8b0 8000 	ldrh.w	r8, [r0]
 8004926:	9003      	str	r0, [sp, #12]
 8004928:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 800492c:	461e      	mov	r6, r3
 800492e:	9304      	str	r3, [sp, #16]
 8004930:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
 8004934:	3b01      	subs	r3, #1
 8004936:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 800493a:	08f3      	lsrs	r3, r6, #3
 800493c:	9002      	str	r0, [sp, #8]
 800493e:	9500      	str	r5, [sp, #0]
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	f000 81f1 	beq.w	8004d28 <arm_fir_f32+0x410>
 8004946:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 800494a:	f100 0620 	add.w	r6, r0, #32
 800494e:	9405      	str	r4, [sp, #20]
 8004950:	0164      	lsls	r4, r4, #5
 8004952:	4420      	add	r0, r4
 8004954:	f008 0a07 	and.w	sl, r8, #7
 8004958:	9607      	str	r6, [sp, #28]
 800495a:	9006      	str	r0, [sp, #24]
 800495c:	469c      	mov	ip, r3
 800495e:	4650      	mov	r0, sl
 8004960:	4623      	mov	r3, r4
 8004962:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004966:	f8cd 8020 	str.w	r8, [sp, #32]
 800496a:	1937      	adds	r7, r6, r4
 800496c:	f109 0b1c 	add.w	fp, r9, #28
 8004970:	f8dd e014 	ldr.w	lr, [sp, #20]
 8004974:	9209      	str	r2, [sp, #36]	; 0x24
 8004976:	f8cd 9014 	str.w	r9, [sp, #20]
 800497a:	f101 0620 	add.w	r6, r1, #32
 800497e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8004982:	9106      	str	r1, [sp, #24]
 8004984:	3520      	adds	r5, #32
 8004986:	f102 0420 	add.w	r4, r2, #32
 800498a:	4698      	mov	r8, r3
 800498c:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8004990:	f845 3c20 	str.w	r3, [r5, #-32]
 8004994:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8004998:	f845 3c1c 	str.w	r3, [r5, #-28]
 800499c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 80049a0:	f845 3c18 	str.w	r3, [r5, #-24]
 80049a4:	f856 3c14 	ldr.w	r3, [r6, #-20]
 80049a8:	f845 3c14 	str.w	r3, [r5, #-20]
 80049ac:	f856 3c10 	ldr.w	r3, [r6, #-16]
 80049b0:	f845 3c10 	str.w	r3, [r5, #-16]
 80049b4:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80049b8:	f845 3c0c 	str.w	r3, [r5, #-12]
 80049bc:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80049c0:	f845 3c08 	str.w	r3, [r5, #-8]
 80049c4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80049c8:	f845 3c04 	str.w	r3, [r5, #-4]
 80049cc:	ed1b 2a07 	vldr	s4, [fp, #-28]	; 0xffffffe4
 80049d0:	ed5b 1a06 	vldr	s3, [fp, #-24]	; 0xffffffe8
 80049d4:	ed1b 1a05 	vldr	s2, [fp, #-20]	; 0xffffffec
 80049d8:	ed5b 0a04 	vldr	s1, [fp, #-16]
 80049dc:	ed1b 0a03 	vldr	s0, [fp, #-12]
 80049e0:	ed1b 8a02 	vldr	s16, [fp, #-8]
 80049e4:	ed5b 8a01 	vldr	s17, [fp, #-4]
 80049e8:	eddf 6af5 	vldr	s13, [pc, #980]	; 8004dc0 <arm_fir_f32+0x4a8>
 80049ec:	465a      	mov	r2, fp
 80049ee:	f1be 0f00 	cmp.w	lr, #0
 80049f2:	f000 81fe 	beq.w	8004df2 <arm_fir_f32+0x4da>
 80049f6:	f10b 0120 	add.w	r1, fp, #32
 80049fa:	eef0 ba66 	vmov.f32	s23, s13
 80049fe:	eeb0 6a66 	vmov.f32	s12, s13
 8004a02:	eeb0 9a66 	vmov.f32	s18, s13
 8004a06:	eef0 9a66 	vmov.f32	s19, s13
 8004a0a:	eeb0 aa66 	vmov.f32	s20, s13
 8004a0e:	eef0 aa66 	vmov.f32	s21, s13
 8004a12:	eeb0 ba66 	vmov.f32	s22, s13
 8004a16:	460a      	mov	r2, r1
 8004a18:	4653      	mov	r3, sl
 8004a1a:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8004a1e:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 8004a22:	ed53 ea07 	vldr	s29, [r3, #-28]	; 0xffffffe4
 8004a26:	ed13 ea06 	vldr	s28, [r3, #-24]	; 0xffffffe8
 8004a2a:	ed53 da05 	vldr	s27, [r3, #-20]	; 0xffffffec
 8004a2e:	ed53 ca04 	vldr	s25, [r3, #-16]
 8004a32:	ed53 2a03 	vldr	s5, [r3, #-12]
 8004a36:	ed13 4a02 	vldr	s8, [r3, #-8]
 8004a3a:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004a3e:	ee67 fa02 	vmul.f32	s31, s14, s4
 8004a42:	ee27 da21 	vmul.f32	s26, s14, s3
 8004a46:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
 8004a4a:	ee27 ca01 	vmul.f32	s24, s14, s2
 8004a4e:	ee27 3a20 	vmul.f32	s6, s14, s1
 8004a52:	ee67 3a00 	vmul.f32	s7, s14, s0
 8004a56:	ee67 5a08 	vmul.f32	s11, s14, s16
 8004a5a:	ee27 fa28 	vmul.f32	s30, s14, s17
 8004a5e:	ee67 7a24 	vmul.f32	s15, s14, s9
 8004a62:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8004a66:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8004a6a:	ee6e faa1 	vmul.f32	s31, s29, s3
 8004a6e:	ee2e da81 	vmul.f32	s26, s29, s2
 8004a72:	ed52 1a06 	vldr	s3, [r2, #-24]	; 0xffffffe8
 8004a76:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004a7a:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004a7e:	ee2e caa0 	vmul.f32	s24, s29, s1
 8004a82:	ee2e 3a80 	vmul.f32	s6, s29, s0
 8004a86:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004a8a:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004a8e:	ee6e 3a88 	vmul.f32	s7, s29, s16
 8004a92:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 8004a96:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9e:	ee24 faae 	vmul.f32	s30, s9, s29
 8004aa2:	ee6e ea82 	vmul.f32	s29, s29, s4
 8004aa6:	ee2e 7a01 	vmul.f32	s14, s28, s2
 8004aaa:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8004aae:	ed12 1a05 	vldr	s2, [r2, #-20]	; 0xffffffec
 8004ab2:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8004ab6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004aba:	ee2e da20 	vmul.f32	s26, s28, s1
 8004abe:	ee2e ca00 	vmul.f32	s24, s28, s0
 8004ac2:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004ac6:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004aca:	ee2e 3a08 	vmul.f32	s6, s28, s16
 8004ace:	ee6e 3a28 	vmul.f32	s7, s28, s17
 8004ad2:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004ad6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004ada:	ee64 5a8e 	vmul.f32	s11, s9, s28
 8004ade:	ee22 fa0e 	vmul.f32	s30, s4, s28
 8004ae2:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8004ae6:	ee2e ea21 	vmul.f32	s28, s28, s3
 8004aea:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 8004aee:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8004af2:	ed52 0a04 	vldr	s1, [r2, #-16]
 8004af6:	ee2d da80 	vmul.f32	s26, s27, s0
 8004afa:	ee37 ba0b 	vadd.f32	s22, s14, s22
 8004afe:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004b02:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004b06:	ee2d ca88 	vmul.f32	s24, s27, s16
 8004b0a:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 8004b0e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004b12:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004b16:	ee64 3aad 	vmul.f32	s7, s9, s27
 8004b1a:	ee62 5a2d 	vmul.f32	s11, s4, s27
 8004b1e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004b22:	ee7e 7a27 	vadd.f32	s15, s28, s15
 8004b26:	ee21 faad 	vmul.f32	s30, s3, s27
 8004b2a:	ee6d da81 	vmul.f32	s27, s27, s2
 8004b2e:	ee6c fa80 	vmul.f32	s31, s25, s0
 8004b32:	ee36 ba8b 	vadd.f32	s22, s13, s22
 8004b36:	ed12 0a03 	vldr	s0, [r2, #-12]
 8004b3a:	ee3d da2a 	vadd.f32	s26, s26, s21
 8004b3e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004b42:	ee6c aa88 	vmul.f32	s21, s25, s16
 8004b46:	ee2c caa8 	vmul.f32	s24, s25, s17
 8004b4a:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004b4e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004b52:	ee24 3aac 	vmul.f32	s6, s9, s25
 8004b56:	ee62 3a2c 	vmul.f32	s7, s4, s25
 8004b5a:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004b5e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004b62:	ee61 5aac 	vmul.f32	s11, s3, s25
 8004b66:	ee21 fa2c 	vmul.f32	s30, s2, s25
 8004b6a:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8004b6e:	ee6c caa0 	vmul.f32	s25, s25, s1
 8004b72:	ee62 ea88 	vmul.f32	s29, s5, s16
 8004b76:	ee3a da8d 	vadd.f32	s26, s21, s26
 8004b7a:	ed12 8a02 	vldr	s16, [r2, #-8]
 8004b7e:	ee62 aaa8 	vmul.f32	s21, s5, s17
 8004b82:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8004b86:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004b8a:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004b8e:	ee24 caa2 	vmul.f32	s24, s9, s5
 8004b92:	ee22 3a22 	vmul.f32	s6, s4, s5
 8004b96:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004b9a:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004b9e:	ee61 3aa2 	vmul.f32	s7, s3, s5
 8004ba2:	ee61 5a22 	vmul.f32	s11, s2, s5
 8004ba6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004baa:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8004bae:	ee20 faa2 	vmul.f32	s30, s1, s5
 8004bb2:	ee62 2a80 	vmul.f32	s5, s5, s0
 8004bb6:	ee7e fa8b 	vadd.f32	s31, s29, s22
 8004bba:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8004bbe:	ee24 ba28 	vmul.f32	s22, s8, s17
 8004bc2:	ee7a aa8d 	vadd.f32	s21, s21, s26
 8004bc6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004bca:	ee24 da84 	vmul.f32	s26, s9, s8
 8004bce:	ee22 ca04 	vmul.f32	s24, s4, s8
 8004bd2:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004bd6:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004bda:	ee21 3a84 	vmul.f32	s6, s3, s8
 8004bde:	ee61 3a04 	vmul.f32	s7, s2, s8
 8004be2:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004be6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8004bea:	ee60 5a84 	vmul.f32	s11, s1, s8
 8004bee:	ee20 7a04 	vmul.f32	s14, s0, s8
 8004bf2:	ee64 6a08 	vmul.f32	s13, s8, s16
 8004bf6:	ed52 8a01 	vldr	s17, [r2, #-4]
 8004bfa:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004bfe:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004c02:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004c06:	ee37 7a2b 	vadd.f32	s14, s14, s23
 8004c0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004c0e:	ee3b ba2f 	vadd.f32	s22, s22, s31
 8004c12:	ee64 4a85 	vmul.f32	s9, s9, s10
 8004c16:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8004c1a:	ee22 4a05 	vmul.f32	s8, s4, s10
 8004c1e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8004c22:	ee61 2a85 	vmul.f32	s5, s3, s10
 8004c26:	ee21 3a05 	vmul.f32	s6, s2, s10
 8004c2a:	ee60 3a85 	vmul.f32	s7, s1, s10
 8004c2e:	ee60 5a05 	vmul.f32	s11, s0, s10
 8004c32:	ee68 ba05 	vmul.f32	s23, s16, s10
 8004c36:	ee65 7a28 	vmul.f32	s15, s10, s17
 8004c3a:	3320      	adds	r3, #32
 8004c3c:	429f      	cmp	r7, r3
 8004c3e:	ee34 ba8b 	vadd.f32	s22, s9, s22
 8004c42:	ee74 aa2a 	vadd.f32	s21, s8, s21
 8004c46:	ee32 aa8a 	vadd.f32	s20, s5, s20
 8004c4a:	ee73 9a29 	vadd.f32	s19, s6, s19
 8004c4e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8004c52:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004c56:	ee7b ba87 	vadd.f32	s23, s23, s14
 8004c5a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8004c5e:	f102 0220 	add.w	r2, r2, #32
 8004c62:	f47f aeda 	bne.w	8004a1a <arm_fir_f32+0x102>
 8004c66:	eb0b 0208 	add.w	r2, fp, r8
 8004c6a:	46cb      	mov	fp, r9
 8004c6c:	b3a0      	cbz	r0, 8004cd8 <arm_fir_f32+0x3c0>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	ecfb 7a01 	vldmia	fp!, {s15}
 8004c74:	ecf2 5a01 	vldmia	r2!, {s11}
 8004c78:	ee27 2a82 	vmul.f32	s4, s15, s4
 8004c7c:	ee67 2aa1 	vmul.f32	s5, s15, s3
 8004c80:	ee27 3a81 	vmul.f32	s6, s15, s2
 8004c84:	ee67 3aa0 	vmul.f32	s7, s15, s1
 8004c88:	ee27 4a80 	vmul.f32	s8, s15, s0
 8004c8c:	ee67 4a88 	vmul.f32	s9, s15, s16
 8004c90:	ee27 5aa8 	vmul.f32	s10, s15, s17
 8004c94:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	ee3b ba02 	vadd.f32	s22, s22, s4
 8004c9e:	ee7a aaa2 	vadd.f32	s21, s21, s5
 8004ca2:	eeb0 2a61 	vmov.f32	s4, s3
 8004ca6:	ee3a aa03 	vadd.f32	s20, s20, s6
 8004caa:	eef0 1a41 	vmov.f32	s3, s2
 8004cae:	ee79 9aa3 	vadd.f32	s19, s19, s7
 8004cb2:	eeb0 1a60 	vmov.f32	s2, s1
 8004cb6:	ee39 9a04 	vadd.f32	s18, s18, s8
 8004cba:	eef0 0a40 	vmov.f32	s1, s0
 8004cbe:	ee36 6a24 	vadd.f32	s12, s12, s9
 8004cc2:	eeb0 0a48 	vmov.f32	s0, s16
 8004cc6:	ee7b ba85 	vadd.f32	s23, s23, s10
 8004cca:	eeb0 8a68 	vmov.f32	s16, s17
 8004cce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004cd2:	eef0 8a65 	vmov.f32	s17, s11
 8004cd6:	d1cb      	bne.n	8004c70 <arm_fir_f32+0x358>
 8004cd8:	f1bc 0c01 	subs.w	ip, ip, #1
 8004cdc:	ed04 ba08 	vstr	s22, [r4, #-32]	; 0xffffffe0
 8004ce0:	ed44 aa07 	vstr	s21, [r4, #-28]	; 0xffffffe4
 8004ce4:	ed04 aa06 	vstr	s20, [r4, #-24]	; 0xffffffe8
 8004ce8:	ed44 9a05 	vstr	s19, [r4, #-20]	; 0xffffffec
 8004cec:	ed04 9a04 	vstr	s18, [r4, #-16]
 8004cf0:	ed04 6a03 	vstr	s12, [r4, #-12]
 8004cf4:	ed44 ba02 	vstr	s23, [r4, #-8]
 8004cf8:	ed44 6a01 	vstr	s13, [r4, #-4]
 8004cfc:	f106 0620 	add.w	r6, r6, #32
 8004d00:	f105 0520 	add.w	r5, r5, #32
 8004d04:	f104 0420 	add.w	r4, r4, #32
 8004d08:	468b      	mov	fp, r1
 8004d0a:	f47f ae3f 	bne.w	800498c <arm_fir_f32+0x74>
 8004d0e:	9b01      	ldr	r3, [sp, #4]
 8004d10:	9800      	ldr	r0, [sp, #0]
 8004d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d18:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 8004d1c:	015b      	lsls	r3, r3, #5
 8004d1e:	4418      	add	r0, r3
 8004d20:	4419      	add	r1, r3
 8004d22:	441a      	add	r2, r3
 8004d24:	4499      	add	r9, r3
 8004d26:	9000      	str	r0, [sp, #0]
 8004d28:	9b04      	ldr	r3, [sp, #16]
 8004d2a:	f013 0707 	ands.w	r7, r3, #7
 8004d2e:	d020      	beq.n	8004d72 <arm_fir_f32+0x45a>
 8004d30:	00bf      	lsls	r7, r7, #2
 8004d32:	9e00      	ldr	r6, [sp, #0]
 8004d34:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004d38:	eb01 0c07 	add.w	ip, r1, r7
 8004d3c:	464d      	mov	r5, r9
 8004d3e:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d42:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004dc0 <arm_fir_f32+0x4a8>
 8004d46:	f846 3b04 	str.w	r3, [r6], #4
 8004d4a:	4674      	mov	r4, lr
 8004d4c:	4643      	mov	r3, r8
 8004d4e:	4628      	mov	r0, r5
 8004d50:	ecf0 7a01 	vldmia	r0!, {s15}
 8004d54:	ecf4 6a01 	vldmia	r4!, {s13}
 8004d58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d62:	d1f5      	bne.n	8004d50 <arm_fir_f32+0x438>
 8004d64:	4561      	cmp	r1, ip
 8004d66:	eca2 7a01 	vstmia	r2!, {s14}
 8004d6a:	f105 0504 	add.w	r5, r5, #4
 8004d6e:	d1e6      	bne.n	8004d3e <arm_fir_f32+0x426>
 8004d70:	44b9      	add	r9, r7
 8004d72:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	ea5f 0498 	movs.w	r4, r8, lsr #2
 8004d7c:	685d      	ldr	r5, [r3, #4]
 8004d7e:	d021      	beq.n	8004dc4 <arm_fir_f32+0x4ac>
 8004d80:	f109 0210 	add.w	r2, r9, #16
 8004d84:	f105 0310 	add.w	r3, r5, #16
 8004d88:	4621      	mov	r1, r4
 8004d8a:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8004d8e:	f843 0c10 	str.w	r0, [r3, #-16]
 8004d92:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8004d96:	f843 0c0c 	str.w	r0, [r3, #-12]
 8004d9a:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8004d9e:	f843 0c08 	str.w	r0, [r3, #-8]
 8004da2:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8004da6:	f843 0c04 	str.w	r0, [r3, #-4]
 8004daa:	3901      	subs	r1, #1
 8004dac:	f102 0210 	add.w	r2, r2, #16
 8004db0:	f103 0310 	add.w	r3, r3, #16
 8004db4:	d1e9      	bne.n	8004d8a <arm_fir_f32+0x472>
 8004db6:	0124      	lsls	r4, r4, #4
 8004db8:	44a1      	add	r9, r4
 8004dba:	4425      	add	r5, r4
 8004dbc:	e002      	b.n	8004dc4 <arm_fir_f32+0x4ac>
 8004dbe:	bf00      	nop
 8004dc0:	00000000 	.word	0x00000000
 8004dc4:	f018 0803 	ands.w	r8, r8, #3
 8004dc8:	d00e      	beq.n	8004de8 <arm_fir_f32+0x4d0>
 8004dca:	f8d9 3000 	ldr.w	r3, [r9]
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f1b8 0801 	subs.w	r8, r8, #1
 8004dd4:	d008      	beq.n	8004de8 <arm_fir_f32+0x4d0>
 8004dd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004dda:	606b      	str	r3, [r5, #4]
 8004ddc:	f1b8 0f01 	cmp.w	r8, #1
 8004de0:	bf1c      	itt	ne
 8004de2:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 8004de6:	60ab      	strne	r3, [r5, #8]
 8004de8:	b00b      	add	sp, #44	; 0x2c
 8004dea:	ecbd 8b10 	vpop	{d8-d15}
 8004dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df2:	eef0 ba66 	vmov.f32	s23, s13
 8004df6:	eeb0 6a66 	vmov.f32	s12, s13
 8004dfa:	eeb0 9a66 	vmov.f32	s18, s13
 8004dfe:	eef0 9a66 	vmov.f32	s19, s13
 8004e02:	eeb0 aa66 	vmov.f32	s20, s13
 8004e06:	eef0 aa66 	vmov.f32	s21, s13
 8004e0a:	eeb0 ba66 	vmov.f32	s22, s13
 8004e0e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004e12:	f102 0120 	add.w	r1, r2, #32
 8004e16:	e729      	b.n	8004c6c <arm_fir_f32+0x354>

08004e18 <memset>:
 8004e18:	4402      	add	r2, r0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d100      	bne.n	8004e22 <memset+0xa>
 8004e20:	4770      	bx	lr
 8004e22:	f803 1b01 	strb.w	r1, [r3], #1
 8004e26:	e7f9      	b.n	8004e1c <memset+0x4>

08004e28 <__libc_init_array>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	4d0d      	ldr	r5, [pc, #52]	; (8004e60 <__libc_init_array+0x38>)
 8004e2c:	4c0d      	ldr	r4, [pc, #52]	; (8004e64 <__libc_init_array+0x3c>)
 8004e2e:	1b64      	subs	r4, r4, r5
 8004e30:	10a4      	asrs	r4, r4, #2
 8004e32:	2600      	movs	r6, #0
 8004e34:	42a6      	cmp	r6, r4
 8004e36:	d109      	bne.n	8004e4c <__libc_init_array+0x24>
 8004e38:	4d0b      	ldr	r5, [pc, #44]	; (8004e68 <__libc_init_array+0x40>)
 8004e3a:	4c0c      	ldr	r4, [pc, #48]	; (8004e6c <__libc_init_array+0x44>)
 8004e3c:	f000 f818 	bl	8004e70 <_init>
 8004e40:	1b64      	subs	r4, r4, r5
 8004e42:	10a4      	asrs	r4, r4, #2
 8004e44:	2600      	movs	r6, #0
 8004e46:	42a6      	cmp	r6, r4
 8004e48:	d105      	bne.n	8004e56 <__libc_init_array+0x2e>
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}
 8004e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e50:	4798      	blx	r3
 8004e52:	3601      	adds	r6, #1
 8004e54:	e7ee      	b.n	8004e34 <__libc_init_array+0xc>
 8004e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5a:	4798      	blx	r3
 8004e5c:	3601      	adds	r6, #1
 8004e5e:	e7f2      	b.n	8004e46 <__libc_init_array+0x1e>
 8004e60:	08004fe4 	.word	0x08004fe4
 8004e64:	08004fe4 	.word	0x08004fe4
 8004e68:	08004fe4 	.word	0x08004fe4
 8004e6c:	08004fe8 	.word	0x08004fe8

08004e70 <_init>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	bf00      	nop
 8004e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e76:	bc08      	pop	{r3}
 8004e78:	469e      	mov	lr, r3
 8004e7a:	4770      	bx	lr

08004e7c <_fini>:
 8004e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7e:	bf00      	nop
 8004e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e82:	bc08      	pop	{r3}
 8004e84:	469e      	mov	lr, r3
 8004e86:	4770      	bx	lr
