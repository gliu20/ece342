
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c88  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f74  08005e4c  08005e4c  00006e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc0  08006dc0  00008020  2**0
                  CONTENTS
  4 .ARM          00000008  08006dc0  08006dc0  00007dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dc8  08006dc8  00008020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc8  08006dc8  00007dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dcc  08006dcc  00007dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08006dd0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000089c  20000020  08006df0  00008020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  08006df0  000088bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e50  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003315  00000000  00000000  0001eea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  000221b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e52  00000000  00000000  00023470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002478d  00000000  00000000  000242c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d8f  00000000  00000000  00048a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e259a  00000000  00000000  000607de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00142d78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f24  00000000  00000000  00142e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00147d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000095b  00000000  00000000  00147dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000030  00000000  00000000  00148707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005e34 	.word	0x08005e34

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	08005e34 	.word	0x08005e34

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <check_keys>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Per the adafruit keypad library, it seems like they allow polling the keypad
// at 20 us!! i.e. _KEYPAD_SETTLING_DELAY=20us
// We should be able to do close to that too
void check_keys(){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
  uint16_t row_pins[] = { ROW0_Pin, ROW1_Pin, ROW2_Pin, ROW3_Pin };
 80004fa:	4a49      	ldr	r2, [pc, #292]	@ (8000620 <check_keys+0x12c>)
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000502:	e883 0003 	stmia.w	r3, {r0, r1}

  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000506:	200a      	movs	r0, #10
 8000508:	f001 ffc7 	bl	800249a <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800050c:	2017      	movs	r0, #23
 800050e:	f001 ffc4 	bl	800249a <HAL_NVIC_DisableIRQ>

  key_detected = 0;
 8000512:	4b44      	ldr	r3, [pc, #272]	@ (8000624 <check_keys+0x130>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	e05a      	b.n	80005d4 <check_keys+0xe0>

    // Clear Row0 to Row3; Only valid b/c they are all on GPIOC
    HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000524:	4840      	ldr	r0, [pc, #256]	@ (8000628 <check_keys+0x134>)
 8000526:	f002 fdf5 	bl	8003114 <HAL_GPIO_WritePin>

    // Set desired Row
    HAL_GPIO_WritePin(ROW0_GPIO_Port, row_pins[i], GPIO_PIN_SET);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	3310      	adds	r3, #16
 8000530:	443b      	add	r3, r7
 8000532:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000536:	2201      	movs	r2, #1
 8000538:	4619      	mov	r1, r3
 800053a:	483b      	ldr	r0, [pc, #236]	@ (8000628 <check_keys+0x134>)
 800053c:	f002 fdea 	bl	8003114 <HAL_GPIO_WritePin>
    HAL_Delay(0);
 8000540:	2000      	movs	r0, #0
 8000542:	f001 fa81 	bl	8001a48 <HAL_Delay>

    if (HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin)) {
 8000546:	2110      	movs	r1, #16
 8000548:	4838      	ldr	r0, [pc, #224]	@ (800062c <check_keys+0x138>)
 800054a:	f002 fdcb 	bl	80030e4 <HAL_GPIO_ReadPin>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d009      	beq.n	8000568 <check_keys+0x74>
      current_row = i;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	b25a      	sxtb	r2, r3
 8000558:	4b35      	ldr	r3, [pc, #212]	@ (8000630 <check_keys+0x13c>)
 800055a:	701a      	strb	r2, [r3, #0]
      current_col = 0;
 800055c:	4b35      	ldr	r3, [pc, #212]	@ (8000634 <check_keys+0x140>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
      key_detected = 1;
 8000562:	4b30      	ldr	r3, [pc, #192]	@ (8000624 <check_keys+0x130>)
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
    }
    if (HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin)) {
 8000568:	2120      	movs	r1, #32
 800056a:	4830      	ldr	r0, [pc, #192]	@ (800062c <check_keys+0x138>)
 800056c:	f002 fdba 	bl	80030e4 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d009      	beq.n	800058a <check_keys+0x96>
      current_row = i;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	b25a      	sxtb	r2, r3
 800057a:	4b2d      	ldr	r3, [pc, #180]	@ (8000630 <check_keys+0x13c>)
 800057c:	701a      	strb	r2, [r3, #0]
      current_col = 1;
 800057e:	4b2d      	ldr	r3, [pc, #180]	@ (8000634 <check_keys+0x140>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
      key_detected = 1;
 8000584:	4b27      	ldr	r3, [pc, #156]	@ (8000624 <check_keys+0x130>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
    }
    if (HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin)) {
 800058a:	2140      	movs	r1, #64	@ 0x40
 800058c:	4827      	ldr	r0, [pc, #156]	@ (800062c <check_keys+0x138>)
 800058e:	f002 fda9 	bl	80030e4 <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d009      	beq.n	80005ac <check_keys+0xb8>
      current_row = i;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	b25a      	sxtb	r2, r3
 800059c:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <check_keys+0x13c>)
 800059e:	701a      	strb	r2, [r3, #0]
      current_col = 2;
 80005a0:	4b24      	ldr	r3, [pc, #144]	@ (8000634 <check_keys+0x140>)
 80005a2:	2202      	movs	r2, #2
 80005a4:	701a      	strb	r2, [r3, #0]
      key_detected = 1;
 80005a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <check_keys+0x130>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
    }
    if (HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin)) {
 80005ac:	2180      	movs	r1, #128	@ 0x80
 80005ae:	481f      	ldr	r0, [pc, #124]	@ (800062c <check_keys+0x138>)
 80005b0:	f002 fd98 	bl	80030e4 <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d009      	beq.n	80005ce <check_keys+0xda>
      current_row = i;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	b25a      	sxtb	r2, r3
 80005be:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <check_keys+0x13c>)
 80005c0:	701a      	strb	r2, [r3, #0]
      current_col = 3;
 80005c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <check_keys+0x140>)
 80005c4:	2203      	movs	r2, #3
 80005c6:	701a      	strb	r2, [r3, #0]
      key_detected = 1;
 80005c8:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <check_keys+0x130>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	dda1      	ble.n	800051e <check_keys+0x2a>
    }
  }
  key = keys[current_row][current_col];
 80005da:	4b15      	ldr	r3, [pc, #84]	@ (8000630 <check_keys+0x13c>)
 80005dc:	f993 3000 	ldrsb.w	r3, [r3]
 80005e0:	4618      	mov	r0, r3
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <check_keys+0x140>)
 80005e4:	f993 3000 	ldrsb.w	r3, [r3]
 80005e8:	4619      	mov	r1, r3
 80005ea:	4a13      	ldr	r2, [pc, #76]	@ (8000638 <check_keys+0x144>)
 80005ec:	0083      	lsls	r3, r0, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	440b      	add	r3, r1
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <check_keys+0x148>)
 80005f6:	701a      	strb	r2, [r3, #0]
  // This ensures that after scanning the rows, they are all set
  // to high, so the interrupt detects if ANY key is pressed
  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80005fe:	480a      	ldr	r0, [pc, #40]	@ (8000628 <check_keys+0x134>)
 8000600:	f002 fd88 	bl	8003114 <HAL_GPIO_WritePin>

  HAL_Delay(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f001 fa1f 	bl	8001a48 <HAL_Delay>

  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800060a:	200a      	movs	r0, #10
 800060c:	f001 ff37 	bl	800247e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000610:	2017      	movs	r0, #23
 8000612:	f001 ff34 	bl	800247e <HAL_NVIC_EnableIRQ>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	08005e4c 	.word	0x08005e4c
 8000624:	20000781 	.word	0x20000781
 8000628:	40020800 	.word	0x40020800
 800062c:	40020c00 	.word	0x40020c00
 8000630:	20000001 	.word	0x20000001
 8000634:	20000002 	.word	0x20000002
 8000638:	20000004 	.word	0x20000004
 800063c:	20000782 	.word	0x20000782

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b098      	sub	sp, #96	@ 0x60
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f001 f98d 	bl	8001964 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Call FIR init function to initialize the instance structure. */
  arm_fir_init_f32(&lp, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], BLOCK_SIZE);
 800064a:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800064e:	2301      	movs	r3, #1
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	4bac      	ldr	r3, [pc, #688]	@ (8000904 <main+0x2c4>)
 8000654:	4aac      	ldr	r2, [pc, #688]	@ (8000908 <main+0x2c8>)
 8000656:	211d      	movs	r1, #29
 8000658:	f005 faa6 	bl	8005ba8 <arm_fir_init_f32>

  arm_biquad_cascade_df1_init_f32(&S1, NUMSTAGES, &coeffTable[190*0 + 10*(band_gainDB[0] + 9)], biquadStateBand1);
 800065c:	4bab      	ldr	r3, [pc, #684]	@ (800090c <main+0x2cc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f103 0209 	add.w	r2, r3, #9
 8000664:	4613      	mov	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4413      	add	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4aa8      	ldr	r2, [pc, #672]	@ (8000910 <main+0x2d0>)
 8000670:	441a      	add	r2, r3
 8000672:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000676:	4ba7      	ldr	r3, [pc, #668]	@ (8000914 <main+0x2d4>)
 8000678:	2102      	movs	r1, #2
 800067a:	f005 faa5 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(&S2, NUMSTAGES, &coeffTable[190*1 + 10*(band_gainDB[1] + 9)], biquadStateBand2);
 800067e:	4ba3      	ldr	r3, [pc, #652]	@ (800090c <main+0x2cc>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f103 0209 	add.w	r2, r3, #9
 8000686:	4613      	mov	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	33be      	adds	r3, #190	@ 0xbe
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4a9f      	ldr	r2, [pc, #636]	@ (8000910 <main+0x2d0>)
 8000694:	441a      	add	r2, r3
 8000696:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800069a:	4b9f      	ldr	r3, [pc, #636]	@ (8000918 <main+0x2d8>)
 800069c:	2102      	movs	r1, #2
 800069e:	f005 fa93 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(&S3, NUMSTAGES, &coeffTable[190*2 + 10*(band_gainDB[2] + 9)], biquadStateBand3);
 80006a2:	4b9a      	ldr	r3, [pc, #616]	@ (800090c <main+0x2cc>)
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	f103 0209 	add.w	r2, r3, #9
 80006aa:	4613      	mov	r3, r2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4a95      	ldr	r2, [pc, #596]	@ (8000910 <main+0x2d0>)
 80006ba:	441a      	add	r2, r3
 80006bc:	f107 0020 	add.w	r0, r7, #32
 80006c0:	4b96      	ldr	r3, [pc, #600]	@ (800091c <main+0x2dc>)
 80006c2:	2102      	movs	r1, #2
 80006c4:	f005 fa80 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(&S4, NUMSTAGES, &coeffTable[190*3 + 10*(band_gainDB[3] + 9)], biquadStateBand4);
 80006c8:	4b90      	ldr	r3, [pc, #576]	@ (800090c <main+0x2cc>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	f103 0209 	add.w	r2, r3, #9
 80006d0:	4613      	mov	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4413      	add	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	f203 233a 	addw	r3, r3, #570	@ 0x23a
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4a8c      	ldr	r2, [pc, #560]	@ (8000910 <main+0x2d0>)
 80006e0:	441a      	add	r2, r3
 80006e2:	f107 0014 	add.w	r0, r7, #20
 80006e6:	4b8e      	ldr	r3, [pc, #568]	@ (8000920 <main+0x2e0>)
 80006e8:	2102      	movs	r1, #2
 80006ea:	f005 fa6d 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(&S5, NUMSTAGES, &coeffTable[190*4 + 10*(band_gainDB[4] + 9)], biquadStateBand5);
 80006ee:	4b87      	ldr	r3, [pc, #540]	@ (800090c <main+0x2cc>)
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	f103 0209 	add.w	r2, r3, #9
 80006f6:	4613      	mov	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4a82      	ldr	r2, [pc, #520]	@ (8000910 <main+0x2d0>)
 8000706:	441a      	add	r2, r3
 8000708:	f107 0008 	add.w	r0, r7, #8
 800070c:	4b85      	ldr	r3, [pc, #532]	@ (8000924 <main+0x2e4>)
 800070e:	2102      	movs	r1, #2
 8000710:	f005 fa5a 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000714:	f000 fabc 	bl	8000c90 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  float32_t output = 0;
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
  float index = 0;
 800071e:	f04f 0300 	mov.w	r3, #0
 8000722:	653b      	str	r3, [r7, #80]	@ 0x50
  float incr = 1;
 8000724:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000728:	657b      	str	r3, [r7, #84]	@ 0x54
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072a:	f000 fce1 	bl	80010f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800072e:	f000 fca9 	bl	8001084 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000732:	f000 fc4f 	bl	8000fd4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000736:	f000 fc77 	bl	8001028 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 800073a:	f000 fb67 	bl	8000e0c <MX_DAC_Init>
  MX_TIM7_Init();
 800073e:	f000 fc13 	bl	8000f68 <MX_TIM7_Init>
  MX_TIM6_Init();
 8000742:	f000 fbdb 	bl	8000efc <MX_TIM6_Init>
  MX_TIM5_Init();
 8000746:	f000 fb8b 	bl	8000e60 <MX_TIM5_Init>
  MX_ADC3_Init();
 800074a:	f000 fb0d 	bl	8000d68 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  // Set Row0 to Row3; Only valid b/c they are all on GPIOC

  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 800074e:	200a      	movs	r0, #10
 8000750:	f001 fea3 	bl	800249a <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000754:	2017      	movs	r0, #23
 8000756:	f001 fea0 	bl	800249a <HAL_NVIC_DisableIRQ>

  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000760:	4871      	ldr	r0, [pc, #452]	@ (8000928 <main+0x2e8>)
 8000762:	f002 fcd7 	bl	8003114 <HAL_GPIO_WritePin>

  HAL_Delay(1);
 8000766:	2001      	movs	r0, #1
 8000768:	f001 f96e 	bl	8001a48 <HAL_Delay>

  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800076c:	200a      	movs	r0, #10
 800076e:	f001 fe86 	bl	800247e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000772:	2017      	movs	r0, #23
 8000774:	f001 fe83 	bl	800247e <HAL_NVIC_EnableIRQ>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000778:	2100      	movs	r1, #0
 800077a:	486c      	ldr	r0, [pc, #432]	@ (800092c <main+0x2ec>)
 800077c:	f001 fec9 	bl	8002512 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8000780:	486b      	ldr	r0, [pc, #428]	@ (8000930 <main+0x2f0>)
 8000782:	f004 f817 	bl	80047b4 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_Base_Start(&htim5);
 8000786:	486b      	ldr	r0, [pc, #428]	@ (8000934 <main+0x2f4>)
 8000788:	f003 ffac 	bl	80046e4 <HAL_TIM_Base_Start>

  HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, (0 << 8));
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	4866      	ldr	r0, [pc, #408]	@ (800092c <main+0x2ec>)
 8000792:	f001 ffe8 	bl	8002766 <HAL_DACEx_TriangleWaveGenerate>
  while (1)
  {
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	if (key_pressed){
 8000796:	4b68      	ldr	r3, [pc, #416]	@ (8000938 <main+0x2f8>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	f000 81ed 	beq.w	8000b7a <main+0x53a>
		// We cannot clear key_pressed here since we haven't
		// figured out which key was actually pressed
		// This is because scanning through keys generates
		// interrupts which re-enables key_pressed, which
		// we won't be able to properly clear
		check_keys();
 80007a0:	f7ff fea8 	bl	80004f4 <check_keys>
		key_pressed = 0;
 80007a4:	4b64      	ldr	r3, [pc, #400]	@ (8000938 <main+0x2f8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]

		if (key_detected) {
 80007aa:	4b64      	ldr	r3, [pc, #400]	@ (800093c <main+0x2fc>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	f000 81e3 	beq.w	8000b7a <main+0x53a>
			if (key == 'A'){
 80007b4:	4b62      	ldr	r3, [pc, #392]	@ (8000940 <main+0x300>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b41      	cmp	r3, #65	@ 0x41
 80007ba:	d106      	bne.n	80007ca <main+0x18a>
				// double the frequency
				incr = incr*2;
 80007bc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80007c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007c4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 80007c8:	e1cb      	b.n	8000b62 <main+0x522>
			}
			else if (key == 'B'){
 80007ca:	4b5d      	ldr	r3, [pc, #372]	@ (8000940 <main+0x300>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b42      	cmp	r3, #66	@ 0x42
 80007d0:	d108      	bne.n	80007e4 <main+0x1a4>
				// half the frequency (haven't exactly figured out how to go below 1 kHz)
				incr = incr/2;
 80007d2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80007d6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80007da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007de:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 80007e2:	e1be      	b.n	8000b62 <main+0x522>
//					volume_level--;
//				}
//
//			// Control volume of triangular wave
//			}
			else if (key == 'C'){
 80007e4:	4b56      	ldr	r3, [pc, #344]	@ (8000940 <main+0x300>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b43      	cmp	r3, #67	@ 0x43
 80007ea:	d112      	bne.n	8000812 <main+0x1d2>
				if (trig_vol < 11){
 80007ec:	4b55      	ldr	r3, [pc, #340]	@ (8000944 <main+0x304>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b0a      	cmp	r3, #10
 80007f2:	d805      	bhi.n	8000800 <main+0x1c0>
					trig_vol++;
 80007f4:	4b53      	ldr	r3, [pc, #332]	@ (8000944 <main+0x304>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b51      	ldr	r3, [pc, #324]	@ (8000944 <main+0x304>)
 80007fe:	701a      	strb	r2, [r3, #0]
				}
				HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, (trig_vol << 8));
 8000800:	4b50      	ldr	r3, [pc, #320]	@ (8000944 <main+0x304>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	461a      	mov	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	4848      	ldr	r0, [pc, #288]	@ (800092c <main+0x2ec>)
 800080c:	f001 ffab 	bl	8002766 <HAL_DACEx_TriangleWaveGenerate>
 8000810:	e1a7      	b.n	8000b62 <main+0x522>
			}
			else if (key == 'D'){
 8000812:	4b4b      	ldr	r3, [pc, #300]	@ (8000940 <main+0x300>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b44      	cmp	r3, #68	@ 0x44
 8000818:	d112      	bne.n	8000840 <main+0x200>
				if (trig_vol > 0){
 800081a:	4b4a      	ldr	r3, [pc, #296]	@ (8000944 <main+0x304>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d005      	beq.n	800082e <main+0x1ee>
					trig_vol--;
 8000822:	4b48      	ldr	r3, [pc, #288]	@ (8000944 <main+0x304>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	3b01      	subs	r3, #1
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b46      	ldr	r3, [pc, #280]	@ (8000944 <main+0x304>)
 800082c:	701a      	strb	r2, [r3, #0]
				}
				HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, (trig_vol << 8));
 800082e:	4b45      	ldr	r3, [pc, #276]	@ (8000944 <main+0x304>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	021b      	lsls	r3, r3, #8
 8000834:	461a      	mov	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	483c      	ldr	r0, [pc, #240]	@ (800092c <main+0x2ec>)
 800083a:	f001 ff94 	bl	8002766 <HAL_DACEx_TriangleWaveGenerate>
 800083e:	e190      	b.n	8000b62 <main+0x522>
			//	          }

			// ******* Gains of Equalizers *******//

			// Band 1
			else if (key == '0'){
 8000840:	4b3f      	ldr	r3, [pc, #252]	@ (8000940 <main+0x300>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b30      	cmp	r3, #48	@ 0x30
 8000846:	d11b      	bne.n	8000880 <main+0x240>
				if (band_gainDB[0] < MAX_GAIN){
 8000848:	4b30      	ldr	r3, [pc, #192]	@ (800090c <main+0x2cc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b09      	cmp	r3, #9
 800084e:	f300 8188 	bgt.w	8000b62 <main+0x522>
					band_gainDB[0]++;
 8000852:	4b2e      	ldr	r3, [pc, #184]	@ (800090c <main+0x2cc>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3301      	adds	r3, #1
 8000858:	4a2c      	ldr	r2, [pc, #176]	@ (800090c <main+0x2cc>)
 800085a:	6013      	str	r3, [r2, #0]
					arm_biquad_cascade_df1_init_f32(&S1, NUMSTAGES, &coeffTable[190*0 + 10*(band_gainDB[0] + 9)], biquadStateBand1);
 800085c:	4b2b      	ldr	r3, [pc, #172]	@ (800090c <main+0x2cc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f103 0209 	add.w	r2, r3, #9
 8000864:	4613      	mov	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	4a28      	ldr	r2, [pc, #160]	@ (8000910 <main+0x2d0>)
 8000870:	441a      	add	r2, r3
 8000872:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000876:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <main+0x2d4>)
 8000878:	2102      	movs	r1, #2
 800087a:	f005 f9a5 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
 800087e:	e170      	b.n	8000b62 <main+0x522>
				}
			}else if (key == '1'){
 8000880:	4b2f      	ldr	r3, [pc, #188]	@ (8000940 <main+0x300>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b31      	cmp	r3, #49	@ 0x31
 8000886:	d11c      	bne.n	80008c2 <main+0x282>
				if (band_gainDB[0] > -MAX_GAIN){
 8000888:	4b20      	ldr	r3, [pc, #128]	@ (800090c <main+0x2cc>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f113 0f09 	cmn.w	r3, #9
 8000890:	f2c0 8167 	blt.w	8000b62 <main+0x522>
					band_gainDB[0]--;
 8000894:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <main+0x2cc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3b01      	subs	r3, #1
 800089a:	4a1c      	ldr	r2, [pc, #112]	@ (800090c <main+0x2cc>)
 800089c:	6013      	str	r3, [r2, #0]
					arm_biquad_cascade_df1_init_f32(&S1, NUMSTAGES, &coeffTable[190*0 + 10*(band_gainDB[0] + 9)], biquadStateBand1);
 800089e:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <main+0x2cc>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f103 0209 	add.w	r2, r3, #9
 80008a6:	4613      	mov	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4a17      	ldr	r2, [pc, #92]	@ (8000910 <main+0x2d0>)
 80008b2:	441a      	add	r2, r3
 80008b4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80008b8:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <main+0x2d4>)
 80008ba:	2102      	movs	r1, #2
 80008bc:	f005 f984 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
 80008c0:	e14f      	b.n	8000b62 <main+0x522>
				}
			}

			// band 2
			else if (key == '2'){
 80008c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <main+0x300>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b32      	cmp	r3, #50	@ 0x32
 80008c8:	d13e      	bne.n	8000948 <main+0x308>
				if (band_gainDB[1] < MAX_GAIN){
 80008ca:	4b10      	ldr	r3, [pc, #64]	@ (800090c <main+0x2cc>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2b09      	cmp	r3, #9
 80008d0:	f300 8147 	bgt.w	8000b62 <main+0x522>
					band_gainDB[1]++;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <main+0x2cc>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	3301      	adds	r3, #1
 80008da:	4a0c      	ldr	r2, [pc, #48]	@ (800090c <main+0x2cc>)
 80008dc:	6053      	str	r3, [r2, #4]
					arm_biquad_cascade_df1_init_f32(&S2, NUMSTAGES, &coeffTable[190*1 + 10*(band_gainDB[1] + 9)], biquadStateBand2);
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <main+0x2cc>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f103 0209 	add.w	r2, r3, #9
 80008e6:	4613      	mov	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	33be      	adds	r3, #190	@ 0xbe
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4a07      	ldr	r2, [pc, #28]	@ (8000910 <main+0x2d0>)
 80008f4:	441a      	add	r2, r3
 80008f6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80008fa:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <main+0x2d8>)
 80008fc:	2102      	movs	r1, #2
 80008fe:	f005 f963 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
 8000902:	e12e      	b.n	8000b62 <main+0x522>
 8000904:	20000788 	.word	0x20000788
 8000908:	08005e54 	.word	0x08005e54
 800090c:	2000089c 	.word	0x2000089c
 8000910:	08005ec8 	.word	0x08005ec8
 8000914:	200007fc 	.word	0x200007fc
 8000918:	2000081c 	.word	0x2000081c
 800091c:	2000083c 	.word	0x2000083c
 8000920:	2000085c 	.word	0x2000085c
 8000924:	2000087c 	.word	0x2000087c
 8000928:	40020800 	.word	0x40020800
 800092c:	200000e4 	.word	0x200000e4
 8000930:	200001e8 	.word	0x200001e8
 8000934:	20000158 	.word	0x20000158
 8000938:	20000780 	.word	0x20000780
 800093c:	20000781 	.word	0x20000781
 8000940:	20000782 	.word	0x20000782
 8000944:	20000000 	.word	0x20000000
				}
			}else if (key == '3'){
 8000948:	4b7a      	ldr	r3, [pc, #488]	@ (8000b34 <main+0x4f4>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b33      	cmp	r3, #51	@ 0x33
 800094e:	d11d      	bne.n	800098c <main+0x34c>
				if (band_gainDB[1] > -MAX_GAIN){
 8000950:	4b79      	ldr	r3, [pc, #484]	@ (8000b38 <main+0x4f8>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f113 0f09 	cmn.w	r3, #9
 8000958:	f2c0 8103 	blt.w	8000b62 <main+0x522>
					band_gainDB[1]--;
 800095c:	4b76      	ldr	r3, [pc, #472]	@ (8000b38 <main+0x4f8>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	3b01      	subs	r3, #1
 8000962:	4a75      	ldr	r2, [pc, #468]	@ (8000b38 <main+0x4f8>)
 8000964:	6053      	str	r3, [r2, #4]
					arm_biquad_cascade_df1_init_f32(&S2, NUMSTAGES, &coeffTable[190*1 + 10*(band_gainDB[1] + 9)], biquadStateBand2);
 8000966:	4b74      	ldr	r3, [pc, #464]	@ (8000b38 <main+0x4f8>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f103 0209 	add.w	r2, r3, #9
 800096e:	4613      	mov	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4413      	add	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	33be      	adds	r3, #190	@ 0xbe
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4a70      	ldr	r2, [pc, #448]	@ (8000b3c <main+0x4fc>)
 800097c:	441a      	add	r2, r3
 800097e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000982:	4b6f      	ldr	r3, [pc, #444]	@ (8000b40 <main+0x500>)
 8000984:	2102      	movs	r1, #2
 8000986:	f005 f91f 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
 800098a:	e0ea      	b.n	8000b62 <main+0x522>
				}
			}

			// band 3
			else if (key == '4'){
 800098c:	4b69      	ldr	r3, [pc, #420]	@ (8000b34 <main+0x4f4>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b34      	cmp	r3, #52	@ 0x34
 8000992:	d11d      	bne.n	80009d0 <main+0x390>
				if (band_gainDB[2] < MAX_GAIN){
 8000994:	4b68      	ldr	r3, [pc, #416]	@ (8000b38 <main+0x4f8>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	2b09      	cmp	r3, #9
 800099a:	f300 80e2 	bgt.w	8000b62 <main+0x522>
					band_gainDB[2]++;
 800099e:	4b66      	ldr	r3, [pc, #408]	@ (8000b38 <main+0x4f8>)
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	3301      	adds	r3, #1
 80009a4:	4a64      	ldr	r2, [pc, #400]	@ (8000b38 <main+0x4f8>)
 80009a6:	6093      	str	r3, [r2, #8]
					arm_biquad_cascade_df1_init_f32(&S3, NUMSTAGES, &coeffTable[190*2 + 10*(band_gainDB[2] + 9)], biquadStateBand3);
 80009a8:	4b63      	ldr	r3, [pc, #396]	@ (8000b38 <main+0x4f8>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f103 0209 	add.w	r2, r3, #9
 80009b0:	4613      	mov	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4a5f      	ldr	r2, [pc, #380]	@ (8000b3c <main+0x4fc>)
 80009c0:	441a      	add	r2, r3
 80009c2:	f107 0020 	add.w	r0, r7, #32
 80009c6:	4b5f      	ldr	r3, [pc, #380]	@ (8000b44 <main+0x504>)
 80009c8:	2102      	movs	r1, #2
 80009ca:	f005 f8fd 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
 80009ce:	e0c8      	b.n	8000b62 <main+0x522>
				}
			}else if (key == '5'){
 80009d0:	4b58      	ldr	r3, [pc, #352]	@ (8000b34 <main+0x4f4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b35      	cmp	r3, #53	@ 0x35
 80009d6:	d11d      	bne.n	8000a14 <main+0x3d4>
				if (band_gainDB[2] > -1){
 80009d8:	4b57      	ldr	r3, [pc, #348]	@ (8000b38 <main+0x4f8>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f2c0 80c0 	blt.w	8000b62 <main+0x522>
					band_gainDB[2]--;
 80009e2:	4b55      	ldr	r3, [pc, #340]	@ (8000b38 <main+0x4f8>)
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	4a53      	ldr	r2, [pc, #332]	@ (8000b38 <main+0x4f8>)
 80009ea:	6093      	str	r3, [r2, #8]
					arm_biquad_cascade_df1_init_f32(&S2, NUMSTAGES, &coeffTable[190*2 + 10*(band_gainDB[2] + 9)], biquadStateBand3);
 80009ec:	4b52      	ldr	r3, [pc, #328]	@ (8000b38 <main+0x4f8>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f103 0209 	add.w	r2, r3, #9
 80009f4:	4613      	mov	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4a4e      	ldr	r2, [pc, #312]	@ (8000b3c <main+0x4fc>)
 8000a04:	441a      	add	r2, r3
 8000a06:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000a0a:	4b4e      	ldr	r3, [pc, #312]	@ (8000b44 <main+0x504>)
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	f005 f8db 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
 8000a12:	e0a6      	b.n	8000b62 <main+0x522>
				}
			}

			// band 4
			else if (key == '6'){
 8000a14:	4b47      	ldr	r3, [pc, #284]	@ (8000b34 <main+0x4f4>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b36      	cmp	r3, #54	@ 0x36
 8000a1a:	d11d      	bne.n	8000a58 <main+0x418>
				if (band_gainDB[3] < MAX_GAIN){
 8000a1c:	4b46      	ldr	r3, [pc, #280]	@ (8000b38 <main+0x4f8>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	2b09      	cmp	r3, #9
 8000a22:	f300 809e 	bgt.w	8000b62 <main+0x522>
					band_gainDB[3]++;
 8000a26:	4b44      	ldr	r3, [pc, #272]	@ (8000b38 <main+0x4f8>)
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	4a42      	ldr	r2, [pc, #264]	@ (8000b38 <main+0x4f8>)
 8000a2e:	60d3      	str	r3, [r2, #12]
					arm_biquad_cascade_df1_init_f32(&S4, NUMSTAGES, &coeffTable[190*3 + 10*(band_gainDB[3] + 9)], biquadStateBand4);
 8000a30:	4b41      	ldr	r3, [pc, #260]	@ (8000b38 <main+0x4f8>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	f103 0209 	add.w	r2, r3, #9
 8000a38:	4613      	mov	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	f203 233a 	addw	r3, r3, #570	@ 0x23a
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4a3d      	ldr	r2, [pc, #244]	@ (8000b3c <main+0x4fc>)
 8000a48:	441a      	add	r2, r3
 8000a4a:	f107 0014 	add.w	r0, r7, #20
 8000a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b48 <main+0x508>)
 8000a50:	2102      	movs	r1, #2
 8000a52:	f005 f8b9 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
 8000a56:	e084      	b.n	8000b62 <main+0x522>
				}
			}else if (key == '7'){
 8000a58:	4b36      	ldr	r3, [pc, #216]	@ (8000b34 <main+0x4f4>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b37      	cmp	r3, #55	@ 0x37
 8000a5e:	d11d      	bne.n	8000a9c <main+0x45c>
				if (band_gainDB[3] > -MAX_GAIN){
 8000a60:	4b35      	ldr	r3, [pc, #212]	@ (8000b38 <main+0x4f8>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	f113 0f09 	cmn.w	r3, #9
 8000a68:	db7b      	blt.n	8000b62 <main+0x522>
					band_gainDB[3]--;
 8000a6a:	4b33      	ldr	r3, [pc, #204]	@ (8000b38 <main+0x4f8>)
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	4a31      	ldr	r2, [pc, #196]	@ (8000b38 <main+0x4f8>)
 8000a72:	60d3      	str	r3, [r2, #12]
					arm_biquad_cascade_df1_init_f32(&S4, NUMSTAGES, &coeffTable[190*3 + 10*(band_gainDB[3] + 9)], biquadStateBand4);
 8000a74:	4b30      	ldr	r3, [pc, #192]	@ (8000b38 <main+0x4f8>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	f103 0209 	add.w	r2, r3, #9
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	f203 233a 	addw	r3, r3, #570	@ 0x23a
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8000b3c <main+0x4fc>)
 8000a8c:	441a      	add	r2, r3
 8000a8e:	f107 0014 	add.w	r0, r7, #20
 8000a92:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <main+0x508>)
 8000a94:	2102      	movs	r1, #2
 8000a96:	f005 f897 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
 8000a9a:	e062      	b.n	8000b62 <main+0x522>
				}
			}

			// band 5
			else if (key == '8'){
 8000a9c:	4b25      	ldr	r3, [pc, #148]	@ (8000b34 <main+0x4f4>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b38      	cmp	r3, #56	@ 0x38
 8000aa2:	d11c      	bne.n	8000ade <main+0x49e>
				if (band_gainDB[4] < MAX_GAIN){
 8000aa4:	4b24      	ldr	r3, [pc, #144]	@ (8000b38 <main+0x4f8>)
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	2b09      	cmp	r3, #9
 8000aaa:	dc5a      	bgt.n	8000b62 <main+0x522>
					band_gainDB[4]++;
 8000aac:	4b22      	ldr	r3, [pc, #136]	@ (8000b38 <main+0x4f8>)
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	4a21      	ldr	r2, [pc, #132]	@ (8000b38 <main+0x4f8>)
 8000ab4:	6113      	str	r3, [r2, #16]
					arm_biquad_cascade_df1_init_f32(&S5, NUMSTAGES, &coeffTable[190*4 + 10*(band_gainDB[4] + 9)], biquadStateBand5);
 8000ab6:	4b20      	ldr	r3, [pc, #128]	@ (8000b38 <main+0x4f8>)
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	f103 0209 	add.w	r2, r3, #9
 8000abe:	4613      	mov	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b3c <main+0x4fc>)
 8000ace:	441a      	add	r2, r3
 8000ad0:	f107 0008 	add.w	r0, r7, #8
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <main+0x50c>)
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	f005 f876 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
 8000adc:	e041      	b.n	8000b62 <main+0x522>
				}
			}else if (key == '9'){
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <main+0x4f4>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b39      	cmp	r3, #57	@ 0x39
 8000ae4:	d11d      	bne.n	8000b22 <main+0x4e2>
				if (band_gainDB[4] > -MAX_GAIN){
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <main+0x4f8>)
 8000ae8:	691b      	ldr	r3, [r3, #16]
 8000aea:	f113 0f09 	cmn.w	r3, #9
 8000aee:	db38      	blt.n	8000b62 <main+0x522>
					band_gainDB[4]--;
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <main+0x4f8>)
 8000af2:	691b      	ldr	r3, [r3, #16]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	4a10      	ldr	r2, [pc, #64]	@ (8000b38 <main+0x4f8>)
 8000af8:	6113      	str	r3, [r2, #16]
					arm_biquad_cascade_df1_init_f32(&S5, NUMSTAGES, &coeffTable[190*4 + 10*(band_gainDB[4] + 9)], biquadStateBand5);
 8000afa:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <main+0x4f8>)
 8000afc:	691b      	ldr	r3, [r3, #16]
 8000afe:	f103 0209 	add.w	r2, r3, #9
 8000b02:	4613      	mov	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <main+0x4fc>)
 8000b12:	441a      	add	r2, r3
 8000b14:	f107 0008 	add.w	r0, r7, #8
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <main+0x50c>)
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	f005 f854 	bl	8005bc8 <arm_biquad_cascade_df1_init_f32>
 8000b20:	e01f      	b.n	8000b62 <main+0x522>
				}
			}

			else if (key == 'E'){
 8000b22:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <main+0x4f4>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b45      	cmp	r3, #69	@ 0x45
 8000b28:	d114      	bne.n	8000b54 <main+0x514>
				echo_en = 1;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <main+0x510>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
 8000b30:	e017      	b.n	8000b62 <main+0x522>
 8000b32:	bf00      	nop
 8000b34:	20000782 	.word	0x20000782
 8000b38:	2000089c 	.word	0x2000089c
 8000b3c:	08005ec8 	.word	0x08005ec8
 8000b40:	2000081c 	.word	0x2000081c
 8000b44:	2000083c 	.word	0x2000083c
 8000b48:	2000085c 	.word	0x2000085c
 8000b4c:	2000087c 	.word	0x2000087c
 8000b50:	20000785 	.word	0x20000785
			}
			else if (key == 'F'){
 8000b54:	4b43      	ldr	r3, [pc, #268]	@ (8000c64 <main+0x624>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b46      	cmp	r3, #70	@ 0x46
 8000b5a:	d102      	bne.n	8000b62 <main+0x522>
				echo_en = 0;
 8000b5c:	4b42      	ldr	r3, [pc, #264]	@ (8000c68 <main+0x628>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
			}
			// Clear keypress and keydetect
			key_detected = 0;
 8000b62:	4b42      	ldr	r3, [pc, #264]	@ (8000c6c <main+0x62c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
			key_pressed = 0;
 8000b68:	4b41      	ldr	r3, [pc, #260]	@ (8000c70 <main+0x630>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
			current_row = -1;
 8000b6e:	4b41      	ldr	r3, [pc, #260]	@ (8000c74 <main+0x634>)
 8000b70:	22ff      	movs	r2, #255	@ 0xff
 8000b72:	701a      	strb	r2, [r3, #0]
			current_col = -1;
 8000b74:	4b40      	ldr	r3, [pc, #256]	@ (8000c78 <main+0x638>)
 8000b76:	22ff      	movs	r2, #255	@ 0xff
 8000b78:	701a      	strb	r2, [r3, #0]
		}
	}

	if (new_sample){
 8000b7a:	4b40      	ldr	r3, [pc, #256]	@ (8000c7c <main+0x63c>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f43f ae09 	beq.w	8000796 <main+0x156>
	new_sample = 0;
 8000b84:	4b3d      	ldr	r3, [pc, #244]	@ (8000c7c <main+0x63c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start(&hadc3);
 8000b8a:	483d      	ldr	r0, [pc, #244]	@ (8000c80 <main+0x640>)
 8000b8c:	f000 ffc4 	bl	8001b18 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 100);
 8000b90:	2164      	movs	r1, #100	@ 0x64
 8000b92:	483b      	ldr	r0, [pc, #236]	@ (8000c80 <main+0x640>)
 8000b94:	f001 f892 	bl	8001cbc <HAL_ADC_PollForConversion>
	input = (float32_t)HAL_ADC_GetValue(&hadc3);
 8000b98:	4839      	ldr	r0, [pc, #228]	@ (8000c80 <main+0x640>)
 8000b9a:	f001 f91a 	bl	8001dd2 <HAL_ADC_GetValue>
 8000b9e:	ee07 0a90 	vmov	s15, r0
 8000ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba6:	4b37      	ldr	r3, [pc, #220]	@ (8000c84 <main+0x644>)
 8000ba8:	edc3 7a00 	vstr	s15, [r3]
	//
	//	  	  	  output *= 4095;
	//	  	  	  output += 2047;
	//	  		  output = input;

	arm_biquad_cascade_df1_f32(&S1, &input, &output, 1);
 8000bac:	1d3a      	adds	r2, r7, #4
 8000bae:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	4933      	ldr	r1, [pc, #204]	@ (8000c84 <main+0x644>)
 8000bb6:	f005 f813 	bl	8005be0 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32(&S2, &output, &output, 1);
 8000bba:	1d3a      	adds	r2, r7, #4
 8000bbc:	1d39      	adds	r1, r7, #4
 8000bbe:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f005 f80c 	bl	8005be0 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32(&S3, &output, &output, 1);
 8000bc8:	1d3a      	adds	r2, r7, #4
 8000bca:	1d39      	adds	r1, r7, #4
 8000bcc:	f107 0020 	add.w	r0, r7, #32
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f005 f805 	bl	8005be0 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32(&S4, &output, &output, 1);
 8000bd6:	1d3a      	adds	r2, r7, #4
 8000bd8:	1d39      	adds	r1, r7, #4
 8000bda:	f107 0014 	add.w	r0, r7, #20
 8000bde:	2301      	movs	r3, #1
 8000be0:	f004 fffe 	bl	8005be0 <arm_biquad_cascade_df1_f32>
	arm_biquad_cascade_df1_f32(&S5, &output, &output, 1);
 8000be4:	1d3a      	adds	r2, r7, #4
 8000be6:	1d39      	adds	r1, r7, #4
 8000be8:	f107 0008 	add.w	r0, r7, #8
 8000bec:	2301      	movs	r3, #1
 8000bee:	f004 fff7 	bl	8005be0 <arm_biquad_cascade_df1_f32>

	if (echo_en){
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <main+0x628>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d027      	beq.n	8000c4a <main+0x60a>
		output += 0.5f*biquadStateBand1[0] + 0.25f*biquadStateBand1[1] + 0.25f*biquadStateBand1[2] + 0.125f*biquadStateBand1[3];
 8000bfa:	4b23      	ldr	r3, [pc, #140]	@ (8000c88 <main+0x648>)
 8000bfc:	edd3 7a00 	vldr	s15, [r3]
 8000c00:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000c04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c08:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <main+0x648>)
 8000c0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c0e:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8000c12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <main+0x648>)
 8000c1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c20:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8000c24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c2c:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <main+0x648>)
 8000c2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c32:	eef4 6a00 	vmov.f32	s13, #64	@ 0x3e000000  0.125
 8000c36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c46:	edc7 7a01 	vstr	s15, [r7, #4]
	}

//	output = input;
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint16_t)output);
 8000c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c52:	ee17 3a90 	vmov	r3, s15
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	480b      	ldr	r0, [pc, #44]	@ (8000c8c <main+0x64c>)
 8000c5e:	f001 fd04 	bl	800266a <HAL_DAC_SetValue>
	if (key_pressed){
 8000c62:	e598      	b.n	8000796 <main+0x156>
 8000c64:	20000782 	.word	0x20000782
 8000c68:	20000785 	.word	0x20000785
 8000c6c:	20000781 	.word	0x20000781
 8000c70:	20000780 	.word	0x20000780
 8000c74:	20000001 	.word	0x20000001
 8000c78:	20000002 	.word	0x20000002
 8000c7c:	20000784 	.word	0x20000784
 8000c80:	2000003c 	.word	0x2000003c
 8000c84:	200008b0 	.word	0x200008b0
 8000c88:	200007fc 	.word	0x200007fc
 8000c8c:	200000e4 	.word	0x200000e4

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b094      	sub	sp, #80	@ 0x50
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	2234      	movs	r2, #52	@ 0x34
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f005 f89c 	bl	8005ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	4b29      	ldr	r3, [pc, #164]	@ (8000d60 <SystemClock_Config+0xd0>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbc:	4a28      	ldr	r2, [pc, #160]	@ (8000d60 <SystemClock_Config+0xd0>)
 8000cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc4:	4b26      	ldr	r3, [pc, #152]	@ (8000d60 <SystemClock_Config+0xd0>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	4b23      	ldr	r3, [pc, #140]	@ (8000d64 <SystemClock_Config+0xd4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a22      	ldr	r2, [pc, #136]	@ (8000d64 <SystemClock_Config+0xd4>)
 8000cda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	4b20      	ldr	r3, [pc, #128]	@ (8000d64 <SystemClock_Config+0xd4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cf0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000cf4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d00:	2308      	movs	r3, #8
 8000d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d04:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d08:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 f9f4 	bl	8004108 <HAL_RCC_OscConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d26:	f000 fadb 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2a:	230f      	movs	r3, #15
 8000d2c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d36:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d40:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	2105      	movs	r1, #5
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f002 fb69 	bl	8003420 <HAL_RCC_ClockConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d54:	f000 fac4 	bl	80012e0 <Error_Handler>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3750      	adds	r7, #80	@ 0x50
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40007000 	.word	0x40007000

08000d68 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <MX_ADC3_Init+0x98>)
 8000d7c:	4a21      	ldr	r2, [pc, #132]	@ (8000e04 <MX_ADC3_Init+0x9c>)
 8000d7e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	@ (8000e00 <MX_ADC3_Init+0x98>)
 8000d82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d86:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <MX_ADC3_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <MX_ADC3_Init+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <MX_ADC3_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <MX_ADC3_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000da2:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <MX_ADC3_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <MX_ADC3_Init+0x98>)
 8000daa:	4a17      	ldr	r2, [pc, #92]	@ (8000e08 <MX_ADC3_Init+0xa0>)
 8000dac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dae:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_ADC3_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <MX_ADC3_Init+0x98>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_ADC3_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <MX_ADC3_Init+0x98>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dc8:	480d      	ldr	r0, [pc, #52]	@ (8000e00 <MX_ADC3_Init+0x98>)
 8000dca:	f000 fe61 	bl	8001a90 <HAL_ADC_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000dd4:	f000 fa84 	bl	80012e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000dd8:	230f      	movs	r3, #15
 8000dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_ADC3_Init+0x98>)
 8000dea:	f000 ffff 	bl	8001dec <HAL_ADC_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000df4:	f000 fa74 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000003c 	.word	0x2000003c
 8000e04:	40012200 	.word	0x40012200
 8000e08:	0f000001 	.word	0x0f000001

08000e0c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <MX_DAC_Init+0x4c>)
 8000e1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e5c <MX_DAC_Init+0x50>)
 8000e1e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e20:	480d      	ldr	r0, [pc, #52]	@ (8000e58 <MX_DAC_Init+0x4c>)
 8000e22:	f001 fb54 	bl	80024ce <HAL_DAC_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e2c:	f000 fa58 	bl	80012e0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 8000e30:	231c      	movs	r3, #28
 8000e32:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	@ (8000e58 <MX_DAC_Init+0x4c>)
 8000e40:	f001 fc42 	bl	80026c8 <HAL_DAC_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e4a:	f000 fa49 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000e4 	.word	0x200000e4
 8000e5c:	40007400 	.word	0x40007400

08000e60 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	463b      	mov	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <MX_TIM5_Init+0x94>)
 8000e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef8 <MX_TIM5_Init+0x98>)
 8000e80:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <MX_TIM5_Init+0x94>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <MX_TIM5_Init+0x94>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7000-1;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <MX_TIM5_Init+0x94>)
 8000e90:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8000e94:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <MX_TIM5_Init+0x94>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_TIM5_Init+0x94>)
 8000e9e:	2280      	movs	r2, #128	@ 0x80
 8000ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ea2:	4814      	ldr	r0, [pc, #80]	@ (8000ef4 <MX_TIM5_Init+0x94>)
 8000ea4:	f003 fbce 	bl	8004644 <HAL_TIM_Base_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000eae:	f000 fa17 	bl	80012e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <MX_TIM5_Init+0x94>)
 8000ec0:	f003 fdf0 	bl	8004aa4 <HAL_TIM_ConfigClockSource>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000eca:	f000 fa09 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ece:	2320      	movs	r3, #32
 8000ed0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	@ (8000ef4 <MX_TIM5_Init+0x94>)
 8000edc:	f004 f816 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000ee6:	f000 f9fb 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000158 	.word	0x20000158
 8000ef8:	40000c00 	.word	0x40000c00

08000efc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f02:	463b      	mov	r3, r7
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <MX_TIM6_Init+0x64>)
 8000f0c:	4a15      	ldr	r2, [pc, #84]	@ (8000f64 <MX_TIM6_Init+0x68>)
 8000f0e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400 - 1;
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <MX_TIM6_Init+0x64>)
 8000f12:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000f16:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <MX_TIM6_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <MX_TIM6_Init+0x64>)
 8000f20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f24:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <MX_TIM6_Init+0x64>)
 8000f28:	2280      	movs	r2, #128	@ 0x80
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f2c:	480c      	ldr	r0, [pc, #48]	@ (8000f60 <MX_TIM6_Init+0x64>)
 8000f2e:	f003 fb89 	bl	8004644 <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f38:	f000 f9d2 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <MX_TIM6_Init+0x64>)
 8000f4a:	f003 ffdf 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f54:	f000 f9c4 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200001a0 	.word	0x200001a0
 8000f64:	40001000 	.word	0x40001000

08000f68 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <MX_TIM7_Init+0x64>)
 8000f78:	4a15      	ldr	r2, [pc, #84]	@ (8000fd0 <MX_TIM7_Init+0x68>)
 8000f7a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f7c:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <MX_TIM7_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <MX_TIM7_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1750-1;
 8000f88:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <MX_TIM7_Init+0x64>)
 8000f8a:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8000f8e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <MX_TIM7_Init+0x64>)
 8000f92:	2280      	movs	r2, #128	@ 0x80
 8000f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f96:	480d      	ldr	r0, [pc, #52]	@ (8000fcc <MX_TIM7_Init+0x64>)
 8000f98:	f003 fb54 	bl	8004644 <HAL_TIM_Base_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000fa2:	f000 f99d 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4806      	ldr	r0, [pc, #24]	@ (8000fcc <MX_TIM7_Init+0x64>)
 8000fb4:	f003 ffaa 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000fbe:	f000 f98f 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001e8 	.word	0x200001e8
 8000fd0:	40001400 	.word	0x40001400

08000fd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_USART3_UART_Init+0x4c>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <MX_USART3_UART_Init+0x50>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <MX_USART3_UART_Init+0x4c>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <MX_USART3_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <MX_USART3_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <MX_USART3_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <MX_USART3_UART_Init+0x4c>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <MX_USART3_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <MX_USART3_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_USART3_UART_Init+0x4c>)
 800100c:	f004 f80e 	bl	800502c <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001016:	f000 f963 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000230 	.word	0x20000230
 8001024:	40004800 	.word	0x40004800

08001028 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800102e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001032:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001036:	2206      	movs	r2, #6
 8001038:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800103a:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800103c:	2202      	movs	r2, #2
 800103e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001048:	2202      	movs	r2, #2
 800104a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800104e:	2201      	movs	r2, #1
 8001050:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001060:	2201      	movs	r2, #1
 8001062:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800106c:	f002 f88f 	bl	800318e <HAL_PCD_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001076:	f000 f933 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000274 	.word	0x20000274

08001084 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <MX_DMA_Init+0x68>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a16      	ldr	r2, [pc, #88]	@ (80010ec <MX_DMA_Init+0x68>)
 8001094:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <MX_DMA_Init+0x68>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <MX_DMA_Init+0x68>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a0f      	ldr	r2, [pc, #60]	@ (80010ec <MX_DMA_Init+0x68>)
 80010b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b0d      	ldr	r3, [pc, #52]	@ (80010ec <MX_DMA_Init+0x68>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	2010      	movs	r0, #16
 80010c8:	f001 f9bd 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010cc:	2010      	movs	r0, #16
 80010ce:	f001 f9d6 	bl	800247e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2038      	movs	r0, #56	@ 0x38
 80010d8:	f001 f9b5 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010dc:	2038      	movs	r0, #56	@ 0x38
 80010de:	f001 f9ce 	bl	800247e <HAL_NVIC_EnableIRQ>

}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800

080010f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	@ 0x30
 80010f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	4b70      	ldr	r3, [pc, #448]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a6f      	ldr	r2, [pc, #444]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b6d      	ldr	r3, [pc, #436]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	61bb      	str	r3, [r7, #24]
 8001120:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	4b69      	ldr	r3, [pc, #420]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a68      	ldr	r2, [pc, #416]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 800112c:	f043 0320 	orr.w	r3, r3, #32
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b66      	ldr	r3, [pc, #408]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0320 	and.w	r3, r3, #32
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b62      	ldr	r3, [pc, #392]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a61      	ldr	r2, [pc, #388]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 8001148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b5f      	ldr	r3, [pc, #380]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b5b      	ldr	r3, [pc, #364]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a5a      	ldr	r2, [pc, #360]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b58      	ldr	r3, [pc, #352]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b54      	ldr	r3, [pc, #336]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a53      	ldr	r2, [pc, #332]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b51      	ldr	r3, [pc, #324]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b4d      	ldr	r3, [pc, #308]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a4c      	ldr	r2, [pc, #304]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b4a      	ldr	r3, [pc, #296]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	4b46      	ldr	r3, [pc, #280]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a45      	ldr	r2, [pc, #276]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 80011b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b43      	ldr	r3, [pc, #268]	@ (80012cc <MX_GPIO_Init+0x1dc>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80011d0:	483f      	ldr	r0, [pc, #252]	@ (80012d0 <MX_GPIO_Init+0x1e0>)
 80011d2:	f001 ff9f 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2140      	movs	r1, #64	@ 0x40
 80011da:	483e      	ldr	r0, [pc, #248]	@ (80012d4 <MX_GPIO_Init+0x1e4>)
 80011dc:	f001 ff9a 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80011e6:	483c      	ldr	r0, [pc, #240]	@ (80012d8 <MX_GPIO_Init+0x1e8>)
 80011e8:	f001 ff94 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	4835      	ldr	r0, [pc, #212]	@ (80012d8 <MX_GPIO_Init+0x1e8>)
 8001204:	f001 fdda 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001208:	f244 0381 	movw	r3, #16513	@ 0x4081
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	482b      	ldr	r0, [pc, #172]	@ (80012d0 <MX_GPIO_Init+0x1e0>)
 8001222:	f001 fdcb 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001226:	2340      	movs	r3, #64	@ 0x40
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4825      	ldr	r0, [pc, #148]	@ (80012d4 <MX_GPIO_Init+0x1e4>)
 800123e:	f001 fdbd 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001242:	2380      	movs	r3, #128	@ 0x80
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	481f      	ldr	r0, [pc, #124]	@ (80012d4 <MX_GPIO_Init+0x1e4>)
 8001256:	f001 fdb1 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 800125a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	4819      	ldr	r0, [pc, #100]	@ (80012d8 <MX_GPIO_Init+0x1e8>)
 8001274:	f001 fda2 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin;
 8001278:	23f0      	movs	r3, #240	@ 0xf0
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800127c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001282:	2302      	movs	r3, #2
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	4813      	ldr	r0, [pc, #76]	@ (80012dc <MX_GPIO_Init+0x1ec>)
 800128e:	f001 fd95 	bl	8002dbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	200a      	movs	r0, #10
 8001298:	f001 f8d5 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800129c:	200a      	movs	r0, #10
 800129e:	f001 f8ee 	bl	800247e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2017      	movs	r0, #23
 80012a8:	f001 f8cd 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012ac:	2017      	movs	r0, #23
 80012ae:	f001 f8e6 	bl	800247e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2028      	movs	r0, #40	@ 0x28
 80012b8:	f001 f8c5 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012bc:	2028      	movs	r0, #40	@ 0x28
 80012be:	f001 f8de 	bl	800247e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c2:	bf00      	nop
 80012c4:	3730      	adds	r7, #48	@ 0x30
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40021800 	.word	0x40021800
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020c00 	.word	0x40020c00

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <Error_Handler+0x8>

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001338 <HAL_MspInit+0x4c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001300:	6453      	str	r3, [r2, #68]	@ 0x44
 8001302:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <HAL_MspInit+0x4c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	@ 0x40
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	@ 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a2f      	ldr	r2, [pc, #188]	@ (8001418 <HAL_ADC_MspInit+0xdc>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d157      	bne.n	800140e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b2e      	ldr	r3, [pc, #184]	@ (800141c <HAL_ADC_MspInit+0xe0>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	4a2d      	ldr	r2, [pc, #180]	@ (800141c <HAL_ADC_MspInit+0xe0>)
 8001368:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800136c:	6453      	str	r3, [r2, #68]	@ 0x44
 800136e:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <HAL_ADC_MspInit+0xe0>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b27      	ldr	r3, [pc, #156]	@ (800141c <HAL_ADC_MspInit+0xe0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a26      	ldr	r2, [pc, #152]	@ (800141c <HAL_ADC_MspInit+0xe0>)
 8001384:	f043 0320 	orr.w	r3, r3, #32
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b24      	ldr	r3, [pc, #144]	@ (800141c <HAL_ADC_MspInit+0xe0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF5     ------> ADC3_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001396:	2320      	movs	r3, #32
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139a:	2303      	movs	r3, #3
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	481d      	ldr	r0, [pc, #116]	@ (8001420 <HAL_ADC_MspInit+0xe4>)
 80013aa:	f001 fd07 	bl	8002dbc <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001428 <HAL_ADC_MspInit+0xec>)
 80013b2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013b6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013ba:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013bc:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80013c8:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ce:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d0:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013d6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013de:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80013f2:	480c      	ldr	r0, [pc, #48]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 80013f4:	f001 f9f8 	bl	80027e8 <HAL_DMA_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80013fe:	f7ff ff6f 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a07      	ldr	r2, [pc, #28]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 8001406:	639a      	str	r2, [r3, #56]	@ 0x38
 8001408:	4a06      	ldr	r2, [pc, #24]	@ (8001424 <HAL_ADC_MspInit+0xe8>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	@ 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40012200 	.word	0x40012200
 800141c:	40023800 	.word	0x40023800
 8001420:	40021400 	.word	0x40021400
 8001424:	20000084 	.word	0x20000084
 8001428:	40026410 	.word	0x40026410

0800142c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a34      	ldr	r2, [pc, #208]	@ (800151c <HAL_DAC_MspInit+0xf0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d161      	bne.n	8001512 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b33      	ldr	r3, [pc, #204]	@ (8001520 <HAL_DAC_MspInit+0xf4>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	4a32      	ldr	r2, [pc, #200]	@ (8001520 <HAL_DAC_MspInit+0xf4>)
 8001458:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800145c:	6413      	str	r3, [r2, #64]	@ 0x40
 800145e:	4b30      	ldr	r3, [pc, #192]	@ (8001520 <HAL_DAC_MspInit+0xf4>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <HAL_DAC_MspInit+0xf4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a2b      	ldr	r2, [pc, #172]	@ (8001520 <HAL_DAC_MspInit+0xf4>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <HAL_DAC_MspInit+0xf4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001486:	2310      	movs	r3, #16
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148a:	2303      	movs	r3, #3
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4822      	ldr	r0, [pc, #136]	@ (8001524 <HAL_DAC_MspInit+0xf8>)
 800149a:	f001 fc8f 	bl	8002dbc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800149e:	4b22      	ldr	r3, [pc, #136]	@ (8001528 <HAL_DAC_MspInit+0xfc>)
 80014a0:	4a22      	ldr	r2, [pc, #136]	@ (800152c <HAL_DAC_MspInit+0x100>)
 80014a2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80014a4:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <HAL_DAC_MspInit+0xfc>)
 80014a6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80014aa:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <HAL_DAC_MspInit+0xfc>)
 80014ae:	2240      	movs	r2, #64	@ 0x40
 80014b0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <HAL_DAC_MspInit+0xfc>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <HAL_DAC_MspInit+0xfc>)
 80014ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014be:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <HAL_DAC_MspInit+0xfc>)
 80014c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014c6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014c8:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <HAL_DAC_MspInit+0xfc>)
 80014ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ce:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80014d0:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <HAL_DAC_MspInit+0xfc>)
 80014d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014d6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <HAL_DAC_MspInit+0xfc>)
 80014da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014de:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <HAL_DAC_MspInit+0xfc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80014e6:	4810      	ldr	r0, [pc, #64]	@ (8001528 <HAL_DAC_MspInit+0xfc>)
 80014e8:	f001 f97e 	bl	80027e8 <HAL_DMA_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80014f2:	f7ff fef5 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001528 <HAL_DAC_MspInit+0xfc>)
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <HAL_DAC_MspInit+0xfc>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2036      	movs	r0, #54	@ 0x36
 8001508:	f000 ff9d 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800150c:	2036      	movs	r0, #54	@ 0x36
 800150e:	f000 ffb6 	bl	800247e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	@ 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40007400 	.word	0x40007400
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000
 8001528:	200000f8 	.word	0x200000f8
 800152c:	40026088 	.word	0x40026088

08001530 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a26      	ldr	r2, [pc, #152]	@ (80015d8 <HAL_TIM_Base_MspInit+0xa8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d10e      	bne.n	8001560 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <HAL_TIM_Base_MspInit+0xac>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	4a24      	ldr	r2, [pc, #144]	@ (80015dc <HAL_TIM_Base_MspInit+0xac>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	6413      	str	r3, [r2, #64]	@ 0x40
 8001552:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <HAL_TIM_Base_MspInit+0xac>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800155e:	e036      	b.n	80015ce <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a1e      	ldr	r2, [pc, #120]	@ (80015e0 <HAL_TIM_Base_MspInit+0xb0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d116      	bne.n	8001598 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <HAL_TIM_Base_MspInit+0xac>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	4a1a      	ldr	r2, [pc, #104]	@ (80015dc <HAL_TIM_Base_MspInit+0xac>)
 8001574:	f043 0310 	orr.w	r3, r3, #16
 8001578:	6413      	str	r3, [r2, #64]	@ 0x40
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <HAL_TIM_Base_MspInit+0xac>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2036      	movs	r0, #54	@ 0x36
 800158c:	f000 ff5b 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001590:	2036      	movs	r0, #54	@ 0x36
 8001592:	f000 ff74 	bl	800247e <HAL_NVIC_EnableIRQ>
}
 8001596:	e01a      	b.n	80015ce <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a11      	ldr	r2, [pc, #68]	@ (80015e4 <HAL_TIM_Base_MspInit+0xb4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d115      	bne.n	80015ce <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <HAL_TIM_Base_MspInit+0xac>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	4a0c      	ldr	r2, [pc, #48]	@ (80015dc <HAL_TIM_Base_MspInit+0xac>)
 80015ac:	f043 0320 	orr.w	r3, r3, #32
 80015b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_TIM_Base_MspInit+0xac>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f003 0320 	and.w	r3, r3, #32
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2037      	movs	r0, #55	@ 0x37
 80015c4:	f000 ff3f 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80015c8:	2037      	movs	r0, #55	@ 0x37
 80015ca:	f000 ff58 	bl	800247e <HAL_NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40000c00 	.word	0x40000c00
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40001000 	.word	0x40001000
 80015e4:	40001400 	.word	0x40001400

080015e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	@ 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a19      	ldr	r2, [pc, #100]	@ (800166c <HAL_UART_MspInit+0x84>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d12c      	bne.n	8001664 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <HAL_UART_MspInit+0x88>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	4a17      	ldr	r2, [pc, #92]	@ (8001670 <HAL_UART_MspInit+0x88>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001618:	6413      	str	r3, [r2, #64]	@ 0x40
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <HAL_UART_MspInit+0x88>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <HAL_UART_MspInit+0x88>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a10      	ldr	r2, [pc, #64]	@ (8001670 <HAL_UART_MspInit+0x88>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <HAL_UART_MspInit+0x88>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001642:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001654:	2307      	movs	r3, #7
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4805      	ldr	r0, [pc, #20]	@ (8001674 <HAL_UART_MspInit+0x8c>)
 8001660:	f001 fbac 	bl	8002dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	@ 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40004800 	.word	0x40004800
 8001670:	40023800 	.word	0x40023800
 8001674:	40020c00 	.word	0x40020c00

08001678 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0a0      	sub	sp, #128	@ 0x80
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	225c      	movs	r2, #92	@ 0x5c
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f004 fb9f 	bl	8005ddc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016a6:	d14e      	bne.n	8001746 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80016a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80016ae:	2300      	movs	r3, #0
 80016b0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 ffcc 	bl	8003654 <HAL_RCCEx_PeriphCLKConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80016c2:	f7ff fe0d 	bl	80012e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <HAL_PCD_MspInit+0xd8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a20      	ldr	r2, [pc, #128]	@ (8001750 <HAL_PCD_MspInit+0xd8>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_PCD_MspInit+0xd8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016e2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80016e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016f4:	230a      	movs	r3, #10
 80016f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016fc:	4619      	mov	r1, r3
 80016fe:	4815      	ldr	r0, [pc, #84]	@ (8001754 <HAL_PCD_MspInit+0xdc>)
 8001700:	f001 fb5c 	bl	8002dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001708:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001716:	4619      	mov	r1, r3
 8001718:	480e      	ldr	r0, [pc, #56]	@ (8001754 <HAL_PCD_MspInit+0xdc>)
 800171a:	f001 fb4f 	bl	8002dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800171e:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <HAL_PCD_MspInit+0xd8>)
 8001720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001722:	4a0b      	ldr	r2, [pc, #44]	@ (8001750 <HAL_PCD_MspInit+0xd8>)
 8001724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001728:	6353      	str	r3, [r2, #52]	@ 0x34
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <HAL_PCD_MspInit+0xd8>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	4a07      	ldr	r2, [pc, #28]	@ (8001750 <HAL_PCD_MspInit+0xd8>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001738:	6453      	str	r3, [r2, #68]	@ 0x44
 800173a:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <HAL_PCD_MspInit+0xd8>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3780      	adds	r7, #128	@ 0x80
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <NMI_Handler+0x4>

08001760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <MemManage_Handler+0x4>

08001770 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <UsageFault_Handler+0x4>

08001780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ae:	f000 f92b 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_FLAG(COL0_Pin)){
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <EXTI4_IRQHandler+0x20>)
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <EXTI4_IRQHandler+0x16>
    key_pressed = 1;
 80017c8:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <EXTI4_IRQHandler+0x24>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL0_Pin);
 80017ce:	2010      	movs	r0, #16
 80017d0:	f001 fcba 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40013c00 	.word	0x40013c00
 80017dc:	20000780 	.word	0x20000780

080017e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <DMA1_Stream5_IRQHandler+0x10>)
 80017e6:	f001 f8ad 	bl	8002944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200000f8 	.word	0x200000f8

080017f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  // Checks if any col is active is pressed
  if (__HAL_GPIO_EXTI_GET_FLAG(COL1_Pin) ||
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <EXTI9_5_IRQHandler+0x44>)
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10b      	bne.n	800181c <EXTI9_5_IRQHandler+0x28>
      __HAL_GPIO_EXTI_GET_FLAG(COL2_Pin) ||
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <EXTI9_5_IRQHandler+0x44>)
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if (__HAL_GPIO_EXTI_GET_FLAG(COL1_Pin) ||
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <EXTI9_5_IRQHandler+0x28>
      __HAL_GPIO_EXTI_GET_FLAG(COL3_Pin)) {
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <EXTI9_5_IRQHandler+0x44>)
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      __HAL_GPIO_EXTI_GET_FLAG(COL2_Pin) ||
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <EXTI9_5_IRQHandler+0x2e>
	  key_pressed = 1;
 800181c:	4b07      	ldr	r3, [pc, #28]	@ (800183c <EXTI9_5_IRQHandler+0x48>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL1_Pin);
 8001822:	2020      	movs	r0, #32
 8001824:	f001 fc90 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL2_Pin);
 8001828:	2040      	movs	r0, #64	@ 0x40
 800182a:	f001 fc8d 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL3_Pin);
 800182e:	2080      	movs	r0, #128	@ 0x80
 8001830:	f001 fc8a 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40013c00 	.word	0x40013c00
 800183c:	20000780 	.word	0x20000780

08001840 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (HAL_GetTick() - dead_time >= 50){
 8001844:	f000 f8f4 	bl	8001a30 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <EXTI15_10_IRQHandler+0x54>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b31      	cmp	r3, #49	@ 0x31
 8001852:	d90f      	bls.n	8001874 <EXTI15_10_IRQHandler+0x34>
	    if (__HAL_GPIO_EXTI_GET_FLAG(USER_Btn_Pin)) {
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <EXTI15_10_IRQHandler+0x58>)
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d009      	beq.n	8001874 <EXTI15_10_IRQHandler+0x34>
	      // Your code here
	    	filter_en = !filter_en;
 8001860:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <EXTI15_10_IRQHandler+0x5c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <EXTI15_10_IRQHandler+0x5c>)
 8001872:	701a      	strb	r2, [r3, #0]
	    }
	  }

	HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001874:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001878:	f001 fc66 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800187c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001880:	f001 fc62 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  dead_time = HAL_GetTick();
 8001884:	f000 f8d4 	bl	8001a30 <HAL_GetTick>
 8001888:	4603      	mov	r3, r0
 800188a:	4a02      	ldr	r2, [pc, #8]	@ (8001894 <EXTI15_10_IRQHandler+0x54>)
 800188c:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200008b4 	.word	0x200008b4
 8001898:	40013c00 	.word	0x40013c00
 800189c:	20000783 	.word	0x20000783

080018a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80018a4:	4803      	ldr	r0, [pc, #12]	@ (80018b4 <TIM6_DAC_IRQHandler+0x14>)
 80018a6:	f000 fe86 	bl	80025b6 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80018aa:	4803      	ldr	r0, [pc, #12]	@ (80018b8 <TIM6_DAC_IRQHandler+0x18>)
 80018ac:	f002 fff2 	bl	8004894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200000e4 	.word	0x200000e4
 80018b8:	200001a0 	.word	0x200001a0

080018bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	new_sample = 1;
 80018c0:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <TIM7_IRQHandler+0x14>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018c6:	4803      	ldr	r0, [pc, #12]	@ (80018d4 <TIM7_IRQHandler+0x18>)
 80018c8:	f002 ffe4 	bl	8004894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000784 	.word	0x20000784
 80018d4:	200001e8 	.word	0x200001e8

080018d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <DMA2_Stream0_IRQHandler+0x10>)
 80018de:	f001 f831 	bl	8002944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000084 	.word	0x20000084

080018ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <SystemInit+0x20>)
 80018f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018f6:	4a05      	ldr	r2, [pc, #20]	@ (800190c <SystemInit+0x20>)
 80018f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001910:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001948 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001914:	480d      	ldr	r0, [pc, #52]	@ (800194c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001916:	490e      	ldr	r1, [pc, #56]	@ (8001950 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001918:	4a0e      	ldr	r2, [pc, #56]	@ (8001954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192a:	4a0b      	ldr	r2, [pc, #44]	@ (8001958 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800192c:	4c0b      	ldr	r4, [pc, #44]	@ (800195c <LoopFillZerobss+0x26>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800193a:	f7ff ffd7 	bl	80018ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193e:	f004 fa55 	bl	8005dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001942:	f7fe fe7d 	bl	8000640 <main>
  bx  lr    
 8001946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800194c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001950:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001954:	08006dd0 	.word	0x08006dd0
  ldr r2, =_sbss
 8001958:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800195c:	200008bc 	.word	0x200008bc

08001960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC_IRQHandler>
	...

08001964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001968:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <HAL_Init+0x40>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0d      	ldr	r2, [pc, #52]	@ (80019a4 <HAL_Init+0x40>)
 800196e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001974:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <HAL_Init+0x40>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <HAL_Init+0x40>)
 800197a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800197e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a07      	ldr	r2, [pc, #28]	@ (80019a4 <HAL_Init+0x40>)
 8001986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800198a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198c:	2003      	movs	r0, #3
 800198e:	f000 fd4f 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001992:	2000      	movs	r0, #0
 8001994:	f000 f808 	bl	80019a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001998:	f7ff fca8 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023c00 	.word	0x40023c00

080019a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b0:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_InitTick+0x54>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_InitTick+0x58>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019be:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fd75 	bl	80024b6 <HAL_SYSTICK_Config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00e      	b.n	80019f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b0f      	cmp	r3, #15
 80019da:	d80a      	bhi.n	80019f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019dc:	2200      	movs	r2, #0
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f000 fd2f 	bl	8002446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e8:	4a06      	ldr	r2, [pc, #24]	@ (8001a04 <HAL_InitTick+0x5c>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e000      	b.n	80019f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000014 	.word	0x20000014
 8001a00:	2000001c 	.word	0x2000001c
 8001a04:	20000018 	.word	0x20000018

08001a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_IncTick+0x20>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_IncTick+0x24>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a04      	ldr	r2, [pc, #16]	@ (8001a2c <HAL_IncTick+0x24>)
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	2000001c 	.word	0x2000001c
 8001a2c:	200008b8 	.word	0x200008b8

08001a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b03      	ldr	r3, [pc, #12]	@ (8001a44 <HAL_GetTick+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	200008b8 	.word	0x200008b8

08001a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff ffee 	bl	8001a30 <HAL_GetTick>
 8001a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d005      	beq.n	8001a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a62:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <HAL_Delay+0x44>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a6e:	bf00      	nop
 8001a70:	f7ff ffde 	bl	8001a30 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d8f7      	bhi.n	8001a70 <HAL_Delay+0x28>
  {
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000001c 	.word	0x2000001c

08001a90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e033      	b.n	8001b0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fc44 	bl	800133c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ad6:	f023 0302 	bic.w	r3, r3, #2
 8001ada:	f043 0202 	orr.w	r2, r3, #2
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 fab4 	bl	8002050 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f023 0303 	bic.w	r3, r3, #3
 8001af6:	f043 0201 	orr.w	r2, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001afe:	e001      	b.n	8001b04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_ADC_Start+0x1a>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e0b2      	b.n	8001c98 <HAL_ADC_Start+0x180>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d018      	beq.n	8001b7a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b58:	4b52      	ldr	r3, [pc, #328]	@ (8001ca4 <HAL_ADC_Start+0x18c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	@ (8001ca8 <HAL_ADC_Start+0x190>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	0c9a      	lsrs	r2, r3, #18
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b6c:	e002      	b.n	8001b74 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f9      	bne.n	8001b6e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d17a      	bne.n	8001c7e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bb2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bc6:	d106      	bne.n	8001bd6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bcc:	f023 0206 	bic.w	r2, r3, #6
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bd4:	e002      	b.n	8001bdc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be4:	4b31      	ldr	r3, [pc, #196]	@ (8001cac <HAL_ADC_Start+0x194>)
 8001be6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001bf0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d12a      	bne.n	8001c54 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a2b      	ldr	r2, [pc, #172]	@ (8001cb0 <HAL_ADC_Start+0x198>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d015      	beq.n	8001c34 <HAL_ADC_Start+0x11c>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a29      	ldr	r2, [pc, #164]	@ (8001cb4 <HAL_ADC_Start+0x19c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d105      	bne.n	8001c1e <HAL_ADC_Start+0x106>
 8001c12:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <HAL_ADC_Start+0x194>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00a      	beq.n	8001c34 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a25      	ldr	r2, [pc, #148]	@ (8001cb8 <HAL_ADC_Start+0x1a0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d136      	bne.n	8001c96 <HAL_ADC_Start+0x17e>
 8001c28:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <HAL_ADC_Start+0x194>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0310 	and.w	r3, r3, #16
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d130      	bne.n	8001c96 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d129      	bne.n	8001c96 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	e020      	b.n	8001c96 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a15      	ldr	r2, [pc, #84]	@ (8001cb0 <HAL_ADC_Start+0x198>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d11b      	bne.n	8001c96 <HAL_ADC_Start+0x17e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d114      	bne.n	8001c96 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	e00b      	b.n	8001c96 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f043 0210 	orr.w	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f043 0201 	orr.w	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	20000014 	.word	0x20000014
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	40012300 	.word	0x40012300
 8001cb0:	40012000 	.word	0x40012000
 8001cb4:	40012100 	.word	0x40012100
 8001cb8:	40012200 	.word	0x40012200

08001cbc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cd8:	d113      	bne.n	8001d02 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ce8:	d10b      	bne.n	8001d02 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f043 0220 	orr.w	r2, r3, #32
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e063      	b.n	8001dca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d02:	f7ff fe95 	bl	8001a30 <HAL_GetTick>
 8001d06:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d08:	e021      	b.n	8001d4e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d01d      	beq.n	8001d4e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_ADC_PollForConversion+0x6c>
 8001d18:	f7ff fe8a 	bl	8001a30 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d212      	bcs.n	8001d4e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d00b      	beq.n	8001d4e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	f043 0204 	orr.w	r2, r3, #4
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e03d      	b.n	8001dca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d1d6      	bne.n	8001d0a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0212 	mvn.w	r2, #18
 8001d64:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d123      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d11f      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d006      	beq.n	8001da4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d111      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d105      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x1c>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e113      	b.n	8002030 <HAL_ADC_ConfigChannel+0x244>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b09      	cmp	r3, #9
 8001e16:	d925      	bls.n	8001e64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68d9      	ldr	r1, [r3, #12]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b1e      	subs	r3, #30
 8001e2e:	2207      	movs	r2, #7
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43da      	mvns	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68d9      	ldr	r1, [r3, #12]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	4603      	mov	r3, r0
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4403      	add	r3, r0
 8001e56:	3b1e      	subs	r3, #30
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	e022      	b.n	8001eaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6919      	ldr	r1, [r3, #16]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	2207      	movs	r2, #7
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	400a      	ands	r2, r1
 8001e86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6919      	ldr	r1, [r3, #16]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4403      	add	r3, r0
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d824      	bhi.n	8001efc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3b05      	subs	r3, #5
 8001ec4:	221f      	movs	r2, #31
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	3b05      	subs	r3, #5
 8001eee:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001efa:	e04c      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b0c      	cmp	r3, #12
 8001f02:	d824      	bhi.n	8001f4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	3b23      	subs	r3, #35	@ 0x23
 8001f16:	221f      	movs	r2, #31
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43da      	mvns	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	400a      	ands	r2, r1
 8001f24:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3b23      	subs	r3, #35	@ 0x23
 8001f40:	fa00 f203 	lsl.w	r2, r0, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f4c:	e023      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3b41      	subs	r3, #65	@ 0x41
 8001f60:	221f      	movs	r2, #31
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	3b41      	subs	r3, #65	@ 0x41
 8001f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f96:	4b29      	ldr	r3, [pc, #164]	@ (800203c <HAL_ADC_ConfigChannel+0x250>)
 8001f98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a28      	ldr	r2, [pc, #160]	@ (8002040 <HAL_ADC_ConfigChannel+0x254>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d10f      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x1d8>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b12      	cmp	r3, #18
 8001faa:	d10b      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002040 <HAL_ADC_ConfigChannel+0x254>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d12b      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x23a>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8002044 <HAL_ADC_ConfigChannel+0x258>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d003      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0x1f4>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b11      	cmp	r3, #17
 8001fde:	d122      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a11      	ldr	r2, [pc, #68]	@ (8002044 <HAL_ADC_ConfigChannel+0x258>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d111      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002002:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_ADC_ConfigChannel+0x25c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a11      	ldr	r2, [pc, #68]	@ (800204c <HAL_ADC_ConfigChannel+0x260>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	0c9a      	lsrs	r2, r3, #18
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002018:	e002      	b.n	8002020 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	3b01      	subs	r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f9      	bne.n	800201a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	40012300 	.word	0x40012300
 8002040:	40012000 	.word	0x40012000
 8002044:	10000012 	.word	0x10000012
 8002048:	20000014 	.word	0x20000014
 800204c:	431bde83 	.word	0x431bde83

08002050 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002058:	4b79      	ldr	r3, [pc, #484]	@ (8002240 <ADC_Init+0x1f0>)
 800205a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	431a      	orrs	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002084:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	021a      	lsls	r2, r3, #8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6899      	ldr	r1, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	4a58      	ldr	r2, [pc, #352]	@ (8002244 <ADC_Init+0x1f4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d022      	beq.n	800212e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6899      	ldr	r1, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002118:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6899      	ldr	r1, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	e00f      	b.n	800214e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800213c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800214c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0202 	bic.w	r2, r2, #2
 800215c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6899      	ldr	r1, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7e1b      	ldrb	r3, [r3, #24]
 8002168:	005a      	lsls	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01b      	beq.n	80021b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800218a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800219a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	3b01      	subs	r3, #1
 80021a8:	035a      	lsls	r2, r3, #13
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	e007      	b.n	80021c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80021d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	3b01      	subs	r3, #1
 80021e0:	051a      	lsls	r2, r3, #20
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6899      	ldr	r1, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002206:	025a      	lsls	r2, r3, #9
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800221e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6899      	ldr	r1, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	029a      	lsls	r2, r3, #10
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	609a      	str	r2, [r3, #8]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40012300 	.word	0x40012300
 8002244:	0f000001 	.word	0x0f000001

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002270:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227a:	4a04      	ldr	r2, [pc, #16]	@ (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60d3      	str	r3, [r2, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002294:	4b04      	ldr	r3, [pc, #16]	@ (80022a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0307 	and.w	r3, r3, #7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4907      	ldr	r1, [pc, #28]	@ (80022e4 <__NVIC_EnableIRQ+0x38>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db12      	blt.n	8002320 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	490a      	ldr	r1, [pc, #40]	@ (800232c <__NVIC_DisableIRQ+0x44>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	3320      	adds	r3, #32
 8002310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002314:	f3bf 8f4f 	dsb	sy
}
 8002318:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800231a:	f3bf 8f6f 	isb	sy
}
 800231e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100

08002330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	2b00      	cmp	r3, #0
 8002342:	db0a      	blt.n	800235a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	490c      	ldr	r1, [pc, #48]	@ (800237c <__NVIC_SetPriority+0x4c>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	0112      	lsls	r2, r2, #4
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	440b      	add	r3, r1
 8002354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002358:	e00a      	b.n	8002370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4908      	ldr	r1, [pc, #32]	@ (8002380 <__NVIC_SetPriority+0x50>)
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	3b04      	subs	r3, #4
 8002368:	0112      	lsls	r2, r2, #4
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	440b      	add	r3, r1
 800236e:	761a      	strb	r2, [r3, #24]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000e100 	.word	0xe000e100
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	@ 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f1c3 0307 	rsb	r3, r3, #7
 800239e:	2b04      	cmp	r3, #4
 80023a0:	bf28      	it	cs
 80023a2:	2304      	movcs	r3, #4
 80023a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d902      	bls.n	80023b4 <NVIC_EncodePriority+0x30>
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3b03      	subs	r3, #3
 80023b2:	e000      	b.n	80023b6 <NVIC_EncodePriority+0x32>
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	f04f 32ff 	mov.w	r2, #4294967295
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43d9      	mvns	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	4313      	orrs	r3, r2
         );
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3724      	adds	r7, #36	@ 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023fc:	d301      	bcc.n	8002402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fe:	2301      	movs	r3, #1
 8002400:	e00f      	b.n	8002422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002402:	4a0a      	ldr	r2, [pc, #40]	@ (800242c <SysTick_Config+0x40>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240a:	210f      	movs	r1, #15
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f7ff ff8e 	bl	8002330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002414:	4b05      	ldr	r3, [pc, #20]	@ (800242c <SysTick_Config+0x40>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241a:	4b04      	ldr	r3, [pc, #16]	@ (800242c <SysTick_Config+0x40>)
 800241c:	2207      	movs	r2, #7
 800241e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	e000e010 	.word	0xe000e010

08002430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff05 	bl	8002248 <__NVIC_SetPriorityGrouping>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002458:	f7ff ff1a 	bl	8002290 <__NVIC_GetPriorityGrouping>
 800245c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff ff8e 	bl	8002384 <NVIC_EncodePriority>
 8002468:	4602      	mov	r2, r0
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff5d 	bl	8002330 <__NVIC_SetPriority>
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff0d 	bl	80022ac <__NVIC_EnableIRQ>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff1d 	bl	80022e8 <__NVIC_DisableIRQ>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff ff94 	bl	80023ec <SysTick_Config>
 80024c4:	4603      	mov	r3, r0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e014      	b.n	800250a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	791b      	ldrb	r3, [r3, #4]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d105      	bne.n	80024f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7fe ff9b 	bl	800142c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2202      	movs	r2, #2
 80024fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	795b      	ldrb	r3, [r3, #5]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_DAC_Start+0x16>
 8002524:	2302      	movs	r3, #2
 8002526:	e040      	b.n	80025aa <HAL_DAC_Start+0x98>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6819      	ldr	r1, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2201      	movs	r2, #1
 8002542:	409a      	lsls	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800255c:	2b3c      	cmp	r3, #60	@ 0x3c
 800255e:	d11d      	bne.n	800259c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	e014      	b.n	800259c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	213c      	movs	r1, #60	@ 0x3c
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	429a      	cmp	r2, r3
 800258a:	d107      	bne.n	800259c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0202 	orr.w	r2, r2, #2
 800259a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025cc:	d120      	bne.n	8002610 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025dc:	d118      	bne.n	8002610 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2204      	movs	r2, #4
 80025e2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f043 0201 	orr.w	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002608:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f852 	bl	80026b4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800261a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800261e:	d120      	bne.n	8002662 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002626:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800262a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800262e:	d118      	bne.n	8002662 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2204      	movs	r2, #4
 8002634:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f043 0202 	orr.w	r2, r3, #2
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800264a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800265a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f8b9 	bl	80027d4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800266a:	b480      	push	{r7}
 800266c:	b087      	sub	sp, #28
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	3308      	adds	r3, #8
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e004      	b.n	800269e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	3314      	adds	r3, #20
 800269c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	461a      	mov	r2, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	371c      	adds	r7, #28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	795b      	ldrb	r3, [r3, #5]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_DAC_ConfigChannel+0x18>
 80026dc:	2302      	movs	r3, #2
 80026de:	e03c      	b.n	800275a <HAL_DAC_ConfigChannel+0x92>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2202      	movs	r2, #2
 80026ea:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4013      	ands	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6819      	ldr	r1, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	22c0      	movs	r2, #192	@ 0xc0
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	400a      	ands	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8002766:	b480      	push	{r7}
 8002768:	b085      	sub	sp, #20
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	795b      	ldrb	r3, [r3, #5]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_DACEx_TriangleWaveGenerate+0x18>
 800277a:	2302      	movs	r3, #2
 800277c:	e024      	b.n	80027c8 <HAL_DACEx_TriangleWaveGenerate+0x62>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2202      	movs	r2, #2
 8002788:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 800279a:	fa01 f303 	lsl.w	r3, r1, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	ea02 0103 	and.w	r1, r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	409a      	lsls	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff f91c 	bl	8001a30 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e099      	b.n	8002938 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002824:	e00f      	b.n	8002846 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002826:	f7ff f903 	bl	8001a30 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b05      	cmp	r3, #5
 8002832:	d908      	bls.n	8002846 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2203      	movs	r2, #3
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e078      	b.n	8002938 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e8      	bne.n	8002826 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4b38      	ldr	r3, [pc, #224]	@ (8002940 <HAL_DMA_Init+0x158>)
 8002860:	4013      	ands	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002872:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	2b04      	cmp	r3, #4
 800289e:	d107      	bne.n	80028b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	4313      	orrs	r3, r2
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f023 0307 	bic.w	r3, r3, #7
 80028c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d117      	bne.n	800290a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00e      	beq.n	800290a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f9e9 	bl	8002cc4 <DMA_CheckFifoParam>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2240      	movs	r2, #64	@ 0x40
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002906:	2301      	movs	r3, #1
 8002908:	e016      	b.n	8002938 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f9a0 	bl	8002c58 <DMA_CalcBaseAndBitshift>
 8002918:	4603      	mov	r3, r0
 800291a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002920:	223f      	movs	r2, #63	@ 0x3f
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	f010803f 	.word	0xf010803f

08002944 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002950:	4b8e      	ldr	r3, [pc, #568]	@ (8002b8c <HAL_DMA_IRQHandler+0x248>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a8e      	ldr	r2, [pc, #568]	@ (8002b90 <HAL_DMA_IRQHandler+0x24c>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0a9b      	lsrs	r3, r3, #10
 800295c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002962:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296e:	2208      	movs	r2, #8
 8002970:	409a      	lsls	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01a      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d013      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0204 	bic.w	r2, r2, #4
 8002996:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299c:	2208      	movs	r2, #8
 800299e:	409a      	lsls	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	2201      	movs	r2, #1
 80029b6:	409a      	lsls	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d012      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d2:	2201      	movs	r2, #1
 80029d4:	409a      	lsls	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029de:	f043 0202 	orr.w	r2, r3, #2
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	2204      	movs	r2, #4
 80029ec:	409a      	lsls	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d012      	beq.n	8002a1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00b      	beq.n	8002a1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	2204      	movs	r2, #4
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a14:	f043 0204 	orr.w	r2, r3, #4
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a20:	2210      	movs	r2, #16
 8002a22:	409a      	lsls	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d043      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d03c      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3e:	2210      	movs	r2, #16
 8002a40:	409a      	lsls	r2, r3
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d018      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d108      	bne.n	8002a74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d024      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
 8002a72:	e01f      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01b      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
 8002a84:	e016      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d107      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0208 	bic.w	r2, r2, #8
 8002aa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	2220      	movs	r2, #32
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 808f 	beq.w	8002be4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 8087 	beq.w	8002be4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ada:	2220      	movs	r2, #32
 8002adc:	409a      	lsls	r2, r3
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d136      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0216 	bic.w	r2, r2, #22
 8002afc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d103      	bne.n	8002b1e <HAL_DMA_IRQHandler+0x1da>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0208 	bic.w	r2, r2, #8
 8002b2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b32:	223f      	movs	r2, #63	@ 0x3f
 8002b34:	409a      	lsls	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d07e      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
        }
        return;
 8002b5a:	e079      	b.n	8002c50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01d      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10d      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d031      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
 8002b88:	e02c      	b.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
 8002b8a:	bf00      	nop
 8002b8c:	20000014 	.word	0x20000014
 8002b90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d023      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	4798      	blx	r3
 8002ba4:	e01e      	b.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10f      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0210 	bic.w	r2, r2, #16
 8002bc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d032      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d022      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2205      	movs	r2, #5
 8002bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	3301      	adds	r3, #1
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d307      	bcc.n	8002c2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f2      	bne.n	8002c10 <HAL_DMA_IRQHandler+0x2cc>
 8002c2a:	e000      	b.n	8002c2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	4798      	blx	r3
 8002c4e:	e000      	b.n	8002c52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c50:	bf00      	nop
    }
  }
}
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	3b10      	subs	r3, #16
 8002c68:	4a14      	ldr	r2, [pc, #80]	@ (8002cbc <DMA_CalcBaseAndBitshift+0x64>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c72:	4a13      	ldr	r2, [pc, #76]	@ (8002cc0 <DMA_CalcBaseAndBitshift+0x68>)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d909      	bls.n	8002c9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c8e:	f023 0303 	bic.w	r3, r3, #3
 8002c92:	1d1a      	adds	r2, r3, #4
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c98:	e007      	b.n	8002caa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ca2:	f023 0303 	bic.w	r3, r3, #3
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	aaaaaaab 	.word	0xaaaaaaab
 8002cc0:	08006db8 	.word	0x08006db8

08002cc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d11f      	bne.n	8002d1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d856      	bhi.n	8002d92 <DMA_CheckFifoParam+0xce>
 8002ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cec <DMA_CheckFifoParam+0x28>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002cfd 	.word	0x08002cfd
 8002cf0:	08002d0f 	.word	0x08002d0f
 8002cf4:	08002cfd 	.word	0x08002cfd
 8002cf8:	08002d93 	.word	0x08002d93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d046      	beq.n	8002d96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0c:	e043      	b.n	8002d96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d16:	d140      	bne.n	8002d9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1c:	e03d      	b.n	8002d9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d26:	d121      	bne.n	8002d6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d837      	bhi.n	8002d9e <DMA_CheckFifoParam+0xda>
 8002d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d34 <DMA_CheckFifoParam+0x70>)
 8002d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d34:	08002d45 	.word	0x08002d45
 8002d38:	08002d4b 	.word	0x08002d4b
 8002d3c:	08002d45 	.word	0x08002d45
 8002d40:	08002d5d 	.word	0x08002d5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      break;
 8002d48:	e030      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d025      	beq.n	8002da2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5a:	e022      	b.n	8002da2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d64:	d11f      	bne.n	8002da6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d6a:	e01c      	b.n	8002da6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d903      	bls.n	8002d7a <DMA_CheckFifoParam+0xb6>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d003      	beq.n	8002d80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d78:	e018      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d7e:	e015      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00e      	beq.n	8002daa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d90:	e00b      	b.n	8002daa <DMA_CheckFifoParam+0xe6>
      break;
 8002d92:	bf00      	nop
 8002d94:	e00a      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      break;
 8002d96:	bf00      	nop
 8002d98:	e008      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e006      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e004      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      break;
 8002da2:	bf00      	nop
 8002da4:	e002      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      break;   
 8002da6:	bf00      	nop
 8002da8:	e000      	b.n	8002dac <DMA_CheckFifoParam+0xe8>
      break;
 8002daa:	bf00      	nop
    }
  } 
  
  return status; 
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop

08002dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	@ 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	e165      	b.n	80030a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dd8:	2201      	movs	r2, #1
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4013      	ands	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	f040 8154 	bne.w	800309e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d005      	beq.n	8002e0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d130      	bne.n	8002e70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	2203      	movs	r2, #3
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e44:	2201      	movs	r2, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f003 0201 	and.w	r2, r3, #1
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d017      	beq.n	8002eac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d123      	bne.n	8002f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	08da      	lsrs	r2, r3, #3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3208      	adds	r2, #8
 8002ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	220f      	movs	r2, #15
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	08da      	lsrs	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3208      	adds	r2, #8
 8002efa:	69b9      	ldr	r1, [r7, #24]
 8002efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0203 	and.w	r2, r3, #3
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80ae 	beq.w	800309e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	4b5d      	ldr	r3, [pc, #372]	@ (80030bc <HAL_GPIO_Init+0x300>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4a:	4a5c      	ldr	r2, [pc, #368]	@ (80030bc <HAL_GPIO_Init+0x300>)
 8002f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f52:	4b5a      	ldr	r3, [pc, #360]	@ (80030bc <HAL_GPIO_Init+0x300>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f5e:	4a58      	ldr	r2, [pc, #352]	@ (80030c0 <HAL_GPIO_Init+0x304>)
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	089b      	lsrs	r3, r3, #2
 8002f64:	3302      	adds	r3, #2
 8002f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	220f      	movs	r2, #15
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4f      	ldr	r2, [pc, #316]	@ (80030c4 <HAL_GPIO_Init+0x308>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d025      	beq.n	8002fd6 <HAL_GPIO_Init+0x21a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a4e      	ldr	r2, [pc, #312]	@ (80030c8 <HAL_GPIO_Init+0x30c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01f      	beq.n	8002fd2 <HAL_GPIO_Init+0x216>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a4d      	ldr	r2, [pc, #308]	@ (80030cc <HAL_GPIO_Init+0x310>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d019      	beq.n	8002fce <HAL_GPIO_Init+0x212>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a4c      	ldr	r2, [pc, #304]	@ (80030d0 <HAL_GPIO_Init+0x314>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d013      	beq.n	8002fca <HAL_GPIO_Init+0x20e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a4b      	ldr	r2, [pc, #300]	@ (80030d4 <HAL_GPIO_Init+0x318>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00d      	beq.n	8002fc6 <HAL_GPIO_Init+0x20a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a4a      	ldr	r2, [pc, #296]	@ (80030d8 <HAL_GPIO_Init+0x31c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d007      	beq.n	8002fc2 <HAL_GPIO_Init+0x206>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a49      	ldr	r2, [pc, #292]	@ (80030dc <HAL_GPIO_Init+0x320>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d101      	bne.n	8002fbe <HAL_GPIO_Init+0x202>
 8002fba:	2306      	movs	r3, #6
 8002fbc:	e00c      	b.n	8002fd8 <HAL_GPIO_Init+0x21c>
 8002fbe:	2307      	movs	r3, #7
 8002fc0:	e00a      	b.n	8002fd8 <HAL_GPIO_Init+0x21c>
 8002fc2:	2305      	movs	r3, #5
 8002fc4:	e008      	b.n	8002fd8 <HAL_GPIO_Init+0x21c>
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	e006      	b.n	8002fd8 <HAL_GPIO_Init+0x21c>
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e004      	b.n	8002fd8 <HAL_GPIO_Init+0x21c>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e002      	b.n	8002fd8 <HAL_GPIO_Init+0x21c>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_GPIO_Init+0x21c>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	f002 0203 	and.w	r2, r2, #3
 8002fde:	0092      	lsls	r2, r2, #2
 8002fe0:	4093      	lsls	r3, r2
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe8:	4935      	ldr	r1, [pc, #212]	@ (80030c0 <HAL_GPIO_Init+0x304>)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	3302      	adds	r3, #2
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80030e0 <HAL_GPIO_Init+0x324>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4013      	ands	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800301a:	4a31      	ldr	r2, [pc, #196]	@ (80030e0 <HAL_GPIO_Init+0x324>)
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003020:	4b2f      	ldr	r3, [pc, #188]	@ (80030e0 <HAL_GPIO_Init+0x324>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003044:	4a26      	ldr	r2, [pc, #152]	@ (80030e0 <HAL_GPIO_Init+0x324>)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800304a:	4b25      	ldr	r3, [pc, #148]	@ (80030e0 <HAL_GPIO_Init+0x324>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800306e:	4a1c      	ldr	r2, [pc, #112]	@ (80030e0 <HAL_GPIO_Init+0x324>)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003074:	4b1a      	ldr	r3, [pc, #104]	@ (80030e0 <HAL_GPIO_Init+0x324>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003098:	4a11      	ldr	r2, [pc, #68]	@ (80030e0 <HAL_GPIO_Init+0x324>)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3301      	adds	r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	2b0f      	cmp	r3, #15
 80030a8:	f67f ae96 	bls.w	8002dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3724      	adds	r7, #36	@ 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40013800 	.word	0x40013800
 80030c4:	40020000 	.word	0x40020000
 80030c8:	40020400 	.word	0x40020400
 80030cc:	40020800 	.word	0x40020800
 80030d0:	40020c00 	.word	0x40020c00
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40021400 	.word	0x40021400
 80030dc:	40021800 	.word	0x40021800
 80030e0:	40013c00 	.word	0x40013c00

080030e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	887b      	ldrh	r3, [r7, #2]
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
 8003100:	e001      	b.n	8003106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003106:	7bfb      	ldrb	r3, [r7, #15]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	807b      	strh	r3, [r7, #2]
 8003120:	4613      	mov	r3, r2
 8003122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003124:	787b      	ldrb	r3, [r7, #1]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800312a:	887a      	ldrh	r2, [r7, #2]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003130:	e003      	b.n	800313a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003132:	887b      	ldrh	r3, [r7, #2]
 8003134:	041a      	lsls	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	619a      	str	r2, [r3, #24]
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003152:	4b08      	ldr	r3, [pc, #32]	@ (8003174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800315e:	4a05      	ldr	r2, [pc, #20]	@ (8003174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f806 	bl	8003178 <HAL_GPIO_EXTI_Callback>
  }
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40013c00 	.word	0x40013c00

08003178 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800318e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003190:	b08f      	sub	sp, #60	@ 0x3c
 8003192:	af0a      	add	r7, sp, #40	@ 0x28
 8003194:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e116      	b.n	80033ce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fe fa5c 	bl	8001678 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2203      	movs	r2, #3
 80031c4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f002 fa47 	bl	8005672 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	687e      	ldr	r6, [r7, #4]
 80031ec:	466d      	mov	r5, sp
 80031ee:	f106 0410 	add.w	r4, r6, #16
 80031f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003202:	1d33      	adds	r3, r6, #4
 8003204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003206:	6838      	ldr	r0, [r7, #0]
 8003208:	f002 f9d2 	bl	80055b0 <USB_CoreInit>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2202      	movs	r2, #2
 8003216:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0d7      	b.n	80033ce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f002 fa35 	bl	8005694 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]
 800322e:	e04a      	b.n	80032c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003230:	7bfa      	ldrb	r2, [r7, #15]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	333d      	adds	r3, #61	@ 0x3d
 8003240:	2201      	movs	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	333c      	adds	r3, #60	@ 0x3c
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	b298      	uxth	r0, r3
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	3344      	adds	r3, #68	@ 0x44
 800326c:	4602      	mov	r2, r0
 800326e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3340      	adds	r3, #64	@ 0x40
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	3348      	adds	r3, #72	@ 0x48
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	334c      	adds	r3, #76	@ 0x4c
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	3354      	adds	r3, #84	@ 0x54
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	3301      	adds	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	7bfa      	ldrb	r2, [r7, #15]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d3af      	bcc.n	8003230 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	e044      	b.n	8003360 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	3301      	adds	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	429a      	cmp	r2, r3
 8003368:	d3b5      	bcc.n	80032d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	687e      	ldr	r6, [r7, #4]
 8003372:	466d      	mov	r5, sp
 8003374:	f106 0410 	add.w	r4, r6, #16
 8003378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800337a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800337c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800337e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003380:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003384:	e885 0003 	stmia.w	r5, {r0, r1}
 8003388:	1d33      	adds	r3, r6, #4
 800338a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800338c:	6838      	ldr	r0, [r7, #0]
 800338e:	f002 f9cd 	bl	800572c <USB_DevInit>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e014      	b.n	80033ce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d102      	bne.n	80033c2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f80a 	bl	80033d6 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f002 fb8b 	bl	8005ae2 <USB_DevDisconnect>

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033d6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b085      	sub	sp, #20
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003408:	f043 0303 	orr.w	r3, r3, #3
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0cc      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003434:	4b68      	ldr	r3, [pc, #416]	@ (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d90c      	bls.n	800345c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b65      	ldr	r3, [pc, #404]	@ (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b63      	ldr	r3, [pc, #396]	@ (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0b8      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003474:	4b59      	ldr	r3, [pc, #356]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a58      	ldr	r2, [pc, #352]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800347e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800348c:	4b53      	ldr	r3, [pc, #332]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4a52      	ldr	r2, [pc, #328]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003498:	4b50      	ldr	r3, [pc, #320]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	494d      	ldr	r1, [pc, #308]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d044      	beq.n	8003540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	4b47      	ldr	r3, [pc, #284]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d119      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e07f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d003      	beq.n	80034de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034de:	4b3f      	ldr	r3, [pc, #252]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e06f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ee:	4b3b      	ldr	r3, [pc, #236]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e067      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fe:	4b37      	ldr	r3, [pc, #220]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f023 0203 	bic.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4934      	ldr	r1, [pc, #208]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	4313      	orrs	r3, r2
 800350e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003510:	f7fe fa8e 	bl	8001a30 <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	e00a      	b.n	800352e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003518:	f7fe fa8a 	bl	8001a30 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e04f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	4b2b      	ldr	r3, [pc, #172]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 020c 	and.w	r2, r3, #12
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	429a      	cmp	r2, r3
 800353e:	d1eb      	bne.n	8003518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003540:	4b25      	ldr	r3, [pc, #148]	@ (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d20c      	bcs.n	8003568 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b22      	ldr	r3, [pc, #136]	@ (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b20      	ldr	r3, [pc, #128]	@ (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e032      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003574:	4b19      	ldr	r3, [pc, #100]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4916      	ldr	r1, [pc, #88]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003592:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	490e      	ldr	r1, [pc, #56]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035a6:	f000 fb7f 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b0b      	ldr	r3, [pc, #44]	@ (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	490a      	ldr	r1, [pc, #40]	@ (80035e0 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	5ccb      	ldrb	r3, [r1, r3]
 80035ba:	fa22 f303 	lsr.w	r3, r2, r3
 80035be:	4a09      	ldr	r2, [pc, #36]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035c2:	4b09      	ldr	r3, [pc, #36]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe f9ee 	bl	80019a8 <HAL_InitTick>

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023c00 	.word	0x40023c00
 80035dc:	40023800 	.word	0x40023800
 80035e0:	08006da0 	.word	0x08006da0
 80035e4:	20000014 	.word	0x20000014
 80035e8:	20000018 	.word	0x20000018

080035ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f0:	4b03      	ldr	r3, [pc, #12]	@ (8003600 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000014 	.word	0x20000014

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003608:	f7ff fff0 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0a9b      	lsrs	r3, r3, #10
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	@ (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	08006db0 	.word	0x08006db0

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003630:	f7ff ffdc 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	@ (800364c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0b5b      	lsrs	r3, r3, #13
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4903      	ldr	r1, [pc, #12]	@ (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	08006db0 	.word	0x08006db0

08003654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08c      	sub	sp, #48	@ 0x30
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d010      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800368c:	4b6f      	ldr	r3, [pc, #444]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800368e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003692:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369a:	496c      	ldr	r1, [pc, #432]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80036aa:	2301      	movs	r3, #1
 80036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d010      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80036ba:	4b64      	ldr	r3, [pc, #400]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036c0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c8:	4960      	ldr	r1, [pc, #384]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80036d8:	2301      	movs	r3, #1
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d017      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036e8:	4b58      	ldr	r3, [pc, #352]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	4955      	ldr	r1, [pc, #340]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003706:	d101      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003708:	2301      	movs	r3, #1
 800370a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003714:	2301      	movs	r3, #1
 8003716:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d017      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003724:	4b49      	ldr	r3, [pc, #292]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800372a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003732:	4946      	ldr	r1, [pc, #280]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800373e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003742:	d101      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003744:	2301      	movs	r3, #1
 8003746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003750:	2301      	movs	r3, #1
 8003752:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 808a 	beq.w	8003876 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	4b39      	ldr	r3, [pc, #228]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	4a38      	ldr	r2, [pc, #224]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	@ 0x40
 8003772:	4b36      	ldr	r3, [pc, #216]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800377e:	4b34      	ldr	r3, [pc, #208]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a33      	ldr	r2, [pc, #204]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003788:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800378a:	f7fe f951 	bl	8001a30 <HAL_GetTick>
 800378e:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7fe f94d 	bl	8001a30 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e278      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037b0:	4b26      	ldr	r3, [pc, #152]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d02f      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c8:	6a3a      	ldr	r2, [r7, #32]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d028      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037ce:	4b1f      	ldr	r3, [pc, #124]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037de:	4b1d      	ldr	r3, [pc, #116]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80037e4:	4a19      	ldr	r2, [pc, #100]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037ea:	4b18      	ldr	r3, [pc, #96]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d114      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80037f6:	f7fe f91b 	bl	8001a30 <HAL_GetTick>
 80037fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fc:	e00a      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fe f917 	bl	8001a30 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e240      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003814:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0ee      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003828:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800382c:	d114      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800382e:	4b07      	ldr	r3, [pc, #28]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800383e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003842:	4902      	ldr	r1, [pc, #8]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003844:	4313      	orrs	r3, r2
 8003846:	608b      	str	r3, [r1, #8]
 8003848:	e00c      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800
 8003850:	40007000 	.word	0x40007000
 8003854:	42470e40 	.word	0x42470e40
 8003858:	4b4a      	ldr	r3, [pc, #296]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a49      	ldr	r2, [pc, #292]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800385e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003862:	6093      	str	r3, [r2, #8]
 8003864:	4b47      	ldr	r3, [pc, #284]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003866:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003870:	4944      	ldr	r1, [pc, #272]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003872:	4313      	orrs	r3, r2
 8003874:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	d004      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003888:	4b3f      	ldr	r3, [pc, #252]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800388a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003898:	4b3a      	ldr	r3, [pc, #232]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800389a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800389e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a6:	4937      	ldr	r1, [pc, #220]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038ba:	4b32      	ldr	r3, [pc, #200]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038c0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c8:	492e      	ldr	r1, [pc, #184]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d011      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038dc:	4b29      	ldr	r3, [pc, #164]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ea:	4926      	ldr	r1, [pc, #152]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038fa:	d101      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80038fc:	2301      	movs	r3, #1
 80038fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800390c:	4b1d      	ldr	r3, [pc, #116]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800390e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003912:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391a:	491a      	ldr	r1, [pc, #104]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800392a:	2b00      	cmp	r3, #0
 800392c:	d011      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800392e:	4b15      	ldr	r3, [pc, #84]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003934:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393c:	4911      	ldr	r1, [pc, #68]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800394c:	d101      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800394e:	2301      	movs	r3, #1
 8003950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003954:	2b01      	cmp	r3, #1
 8003956:	d005      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003960:	f040 80ff 	bne.w	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003964:	4b09      	ldr	r3, [pc, #36]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800396a:	f7fe f861 	bl	8001a30 <HAL_GetTick>
 800396e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003970:	e00e      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003972:	f7fe f85d 	bl	8001a30 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d907      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e188      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003984:	40023800 	.word	0x40023800
 8003988:	424711e0 	.word	0x424711e0
 800398c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003990:	4b7e      	ldr	r3, [pc, #504]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ea      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d009      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d028      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d124      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80039c4:	4b71      	ldr	r3, [pc, #452]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039ca:	0c1b      	lsrs	r3, r3, #16
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	3301      	adds	r3, #1
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039d6:	4b6d      	ldr	r3, [pc, #436]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039dc:	0e1b      	lsrs	r3, r3, #24
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	019b      	lsls	r3, r3, #6
 80039ee:	431a      	orrs	r2, r3
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	3b01      	subs	r3, #1
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	431a      	orrs	r2, r3
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	061b      	lsls	r3, r3, #24
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	071b      	lsls	r3, r3, #28
 8003a06:	4961      	ldr	r1, [pc, #388]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d004      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a22:	d00a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d035      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a38:	d130      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a3a:	4b54      	ldr	r3, [pc, #336]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	3301      	adds	r3, #1
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a4c:	4b4f      	ldr	r3, [pc, #316]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a52:	0f1b      	lsrs	r3, r3, #28
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	019b      	lsls	r3, r3, #6
 8003a64:	431a      	orrs	r2, r3
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	085b      	lsrs	r3, r3, #1
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	041b      	lsls	r3, r3, #16
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	061b      	lsls	r3, r3, #24
 8003a76:	431a      	orrs	r2, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	071b      	lsls	r3, r3, #28
 8003a7c:	4943      	ldr	r1, [pc, #268]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a84:	4b41      	ldr	r3, [pc, #260]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a8a:	f023 021f 	bic.w	r2, r3, #31
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a92:	3b01      	subs	r3, #1
 8003a94:	493d      	ldr	r1, [pc, #244]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d029      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ab0:	d124      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ab2:	4b36      	ldr	r3, [pc, #216]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ac4:	4b31      	ldr	r3, [pc, #196]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aca:	0f1b      	lsrs	r3, r3, #28
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	019b      	lsls	r3, r3, #6
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	041b      	lsls	r3, r3, #16
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	431a      	orrs	r2, r3
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	071b      	lsls	r3, r3, #28
 8003af4:	4925      	ldr	r1, [pc, #148]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d016      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	019b      	lsls	r3, r3, #6
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	085b      	lsrs	r3, r3, #1
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	041b      	lsls	r3, r3, #16
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	061b      	lsls	r3, r3, #24
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	071b      	lsls	r3, r3, #28
 8003b2e:	4917      	ldr	r1, [pc, #92]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b36:	4b16      	ldr	r3, [pc, #88]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b3c:	f7fd ff78 	bl	8001a30 <HAL_GetTick>
 8003b40:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b44:	f7fd ff74 	bl	8001a30 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e09f      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b56:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	f040 8095 	bne.w	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b70:	f7fd ff5e 	bl	8001a30 <HAL_GetTick>
 8003b74:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b76:	e00f      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b78:	f7fd ff5a 	bl	8001a30 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d908      	bls.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e085      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	42470068 	.word	0x42470068
 8003b94:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b98:	4b41      	ldr	r3, [pc, #260]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ba0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ba4:	d0e8      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d02b      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d127      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003bce:	4b34      	ldr	r3, [pc, #208]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	019b      	lsls	r3, r3, #6
 8003bea:	431a      	orrs	r2, r3
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	041b      	lsls	r3, r3, #16
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	061b      	lsls	r3, r3, #24
 8003bfc:	4928      	ldr	r1, [pc, #160]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c04:	4b26      	ldr	r3, [pc, #152]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c0a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c12:	3b01      	subs	r3, #1
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	4922      	ldr	r1, [pc, #136]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d01d      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c32:	d118      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3a:	0e1b      	lsrs	r3, r3, #24
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	019b      	lsls	r3, r3, #6
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	3b01      	subs	r3, #1
 8003c56:	041b      	lsls	r3, r3, #16
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	4910      	ldr	r1, [pc, #64]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c66:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c6c:	f7fd fee0 	bl	8001a30 <HAL_GetTick>
 8003c70:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c74:	f7fd fedc 	bl	8001a30 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e007      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c86:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c92:	d1ef      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3730      	adds	r7, #48	@ 0x30
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	42470070 	.word	0x42470070

08003ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cac:	b0ae      	sub	sp, #184	@ 0xb8
 8003cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cce:	4bcb      	ldr	r3, [pc, #812]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x354>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	2b0c      	cmp	r3, #12
 8003cd8:	f200 8206 	bhi.w	80040e8 <HAL_RCC_GetSysClockFreq+0x440>
 8003cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d19 	.word	0x08003d19
 8003ce8:	080040e9 	.word	0x080040e9
 8003cec:	080040e9 	.word	0x080040e9
 8003cf0:	080040e9 	.word	0x080040e9
 8003cf4:	08003d21 	.word	0x08003d21
 8003cf8:	080040e9 	.word	0x080040e9
 8003cfc:	080040e9 	.word	0x080040e9
 8003d00:	080040e9 	.word	0x080040e9
 8003d04:	08003d29 	.word	0x08003d29
 8003d08:	080040e9 	.word	0x080040e9
 8003d0c:	080040e9 	.word	0x080040e9
 8003d10:	080040e9 	.word	0x080040e9
 8003d14:	08003f19 	.word	0x08003f19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d18:	4bb9      	ldr	r3, [pc, #740]	@ (8004000 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003d1e:	e1e7      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d20:	4bb8      	ldr	r3, [pc, #736]	@ (8004004 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d26:	e1e3      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d28:	4bb4      	ldr	r3, [pc, #720]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x354>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d34:	4bb1      	ldr	r3, [pc, #708]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x354>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d071      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d40:	4bae      	ldr	r3, [pc, #696]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x354>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	099b      	lsrs	r3, r3, #6
 8003d46:	2200      	movs	r2, #0
 8003d48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d4c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d66:	4622      	mov	r2, r4
 8003d68:	462b      	mov	r3, r5
 8003d6a:	f04f 0000 	mov.w	r0, #0
 8003d6e:	f04f 0100 	mov.w	r1, #0
 8003d72:	0159      	lsls	r1, r3, #5
 8003d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d78:	0150      	lsls	r0, r2, #5
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4621      	mov	r1, r4
 8003d80:	1a51      	subs	r1, r2, r1
 8003d82:	6439      	str	r1, [r7, #64]	@ 0x40
 8003d84:	4629      	mov	r1, r5
 8003d86:	eb63 0301 	sbc.w	r3, r3, r1
 8003d8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003d98:	4649      	mov	r1, r9
 8003d9a:	018b      	lsls	r3, r1, #6
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003da2:	4641      	mov	r1, r8
 8003da4:	018a      	lsls	r2, r1, #6
 8003da6:	4641      	mov	r1, r8
 8003da8:	1a51      	subs	r1, r2, r1
 8003daa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003dac:	4649      	mov	r1, r9
 8003dae:	eb63 0301 	sbc.w	r3, r3, r1
 8003db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003dc0:	4649      	mov	r1, r9
 8003dc2:	00cb      	lsls	r3, r1, #3
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dca:	4641      	mov	r1, r8
 8003dcc:	00ca      	lsls	r2, r1, #3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4622      	mov	r2, r4
 8003dd6:	189b      	adds	r3, r3, r2
 8003dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dda:	462b      	mov	r3, r5
 8003ddc:	460a      	mov	r2, r1
 8003dde:	eb42 0303 	adc.w	r3, r2, r3
 8003de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003df0:	4629      	mov	r1, r5
 8003df2:	024b      	lsls	r3, r1, #9
 8003df4:	4621      	mov	r1, r4
 8003df6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	024a      	lsls	r2, r1, #9
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003e14:	f7fc f9f6 	bl	8000204 <__aeabi_uldivmod>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e22:	e067      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e24:	4b75      	ldr	r3, [pc, #468]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x354>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	099b      	lsrs	r3, r3, #6
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e30:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e3e:	2300      	movs	r3, #0
 8003e40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003e46:	4622      	mov	r2, r4
 8003e48:	462b      	mov	r3, r5
 8003e4a:	f04f 0000 	mov.w	r0, #0
 8003e4e:	f04f 0100 	mov.w	r1, #0
 8003e52:	0159      	lsls	r1, r3, #5
 8003e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e58:	0150      	lsls	r0, r2, #5
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4621      	mov	r1, r4
 8003e60:	1a51      	subs	r1, r2, r1
 8003e62:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e64:	4629      	mov	r1, r5
 8003e66:	eb63 0301 	sbc.w	r3, r3, r1
 8003e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003e78:	4649      	mov	r1, r9
 8003e7a:	018b      	lsls	r3, r1, #6
 8003e7c:	4641      	mov	r1, r8
 8003e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e82:	4641      	mov	r1, r8
 8003e84:	018a      	lsls	r2, r1, #6
 8003e86:	4641      	mov	r1, r8
 8003e88:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ea2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ea6:	4692      	mov	sl, r2
 8003ea8:	469b      	mov	fp, r3
 8003eaa:	4623      	mov	r3, r4
 8003eac:	eb1a 0303 	adds.w	r3, sl, r3
 8003eb0:	623b      	str	r3, [r7, #32]
 8003eb2:	462b      	mov	r3, r5
 8003eb4:	eb4b 0303 	adc.w	r3, fp, r3
 8003eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	028b      	lsls	r3, r1, #10
 8003eca:	4621      	mov	r1, r4
 8003ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	028a      	lsls	r2, r1, #10
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003edc:	2200      	movs	r2, #0
 8003ede:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ee0:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ee2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003ee6:	f7fc f98d 	bl	8000204 <__aeabi_uldivmod>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4613      	mov	r3, r2
 8003ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ef4:	4b41      	ldr	r3, [pc, #260]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x354>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	3301      	adds	r3, #1
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003f06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f16:	e0eb      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f18:	4b38      	ldr	r3, [pc, #224]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x354>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f24:	4b35      	ldr	r3, [pc, #212]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x354>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d06b      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f30:	4b32      	ldr	r3, [pc, #200]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x354>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	099b      	lsrs	r3, r3, #6
 8003f36:	2200      	movs	r2, #0
 8003f38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f42:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f44:	2300      	movs	r3, #0
 8003f46:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003f4c:	4622      	mov	r2, r4
 8003f4e:	462b      	mov	r3, r5
 8003f50:	f04f 0000 	mov.w	r0, #0
 8003f54:	f04f 0100 	mov.w	r1, #0
 8003f58:	0159      	lsls	r1, r3, #5
 8003f5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f5e:	0150      	lsls	r0, r2, #5
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4621      	mov	r1, r4
 8003f66:	1a51      	subs	r1, r2, r1
 8003f68:	61b9      	str	r1, [r7, #24]
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	eb63 0301 	sbc.w	r3, r3, r1
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f7e:	4659      	mov	r1, fp
 8003f80:	018b      	lsls	r3, r1, #6
 8003f82:	4651      	mov	r1, sl
 8003f84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f88:	4651      	mov	r1, sl
 8003f8a:	018a      	lsls	r2, r1, #6
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	ebb2 0801 	subs.w	r8, r2, r1
 8003f92:	4659      	mov	r1, fp
 8003f94:	eb63 0901 	sbc.w	r9, r3, r1
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fa4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fa8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fac:	4690      	mov	r8, r2
 8003fae:	4699      	mov	r9, r3
 8003fb0:	4623      	mov	r3, r4
 8003fb2:	eb18 0303 	adds.w	r3, r8, r3
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	462b      	mov	r3, r5
 8003fba:	eb49 0303 	adc.w	r3, r9, r3
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003fcc:	4629      	mov	r1, r5
 8003fce:	024b      	lsls	r3, r1, #9
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	024a      	lsls	r2, r1, #9
 8003fda:	4610      	mov	r0, r2
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fe6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003fe8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fec:	f7fc f90a 	bl	8000204 <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ffa:	e065      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x420>
 8003ffc:	40023800 	.word	0x40023800
 8004000:	00f42400 	.word	0x00f42400
 8004004:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004008:	4b3d      	ldr	r3, [pc, #244]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x458>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	099b      	lsrs	r3, r3, #6
 800400e:	2200      	movs	r2, #0
 8004010:	4618      	mov	r0, r3
 8004012:	4611      	mov	r1, r2
 8004014:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004018:	653b      	str	r3, [r7, #80]	@ 0x50
 800401a:	2300      	movs	r3, #0
 800401c:	657b      	str	r3, [r7, #84]	@ 0x54
 800401e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004022:	4642      	mov	r2, r8
 8004024:	464b      	mov	r3, r9
 8004026:	f04f 0000 	mov.w	r0, #0
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	0159      	lsls	r1, r3, #5
 8004030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004034:	0150      	lsls	r0, r2, #5
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4641      	mov	r1, r8
 800403c:	1a51      	subs	r1, r2, r1
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	4649      	mov	r1, r9
 8004042:	eb63 0301 	sbc.w	r3, r3, r1
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004054:	4659      	mov	r1, fp
 8004056:	018b      	lsls	r3, r1, #6
 8004058:	4651      	mov	r1, sl
 800405a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800405e:	4651      	mov	r1, sl
 8004060:	018a      	lsls	r2, r1, #6
 8004062:	4651      	mov	r1, sl
 8004064:	1a54      	subs	r4, r2, r1
 8004066:	4659      	mov	r1, fp
 8004068:	eb63 0501 	sbc.w	r5, r3, r1
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	00eb      	lsls	r3, r5, #3
 8004076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800407a:	00e2      	lsls	r2, r4, #3
 800407c:	4614      	mov	r4, r2
 800407e:	461d      	mov	r5, r3
 8004080:	4643      	mov	r3, r8
 8004082:	18e3      	adds	r3, r4, r3
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	464b      	mov	r3, r9
 8004088:	eb45 0303 	adc.w	r3, r5, r3
 800408c:	607b      	str	r3, [r7, #4]
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	e9d7 4500 	ldrd	r4, r5, [r7]
 800409a:	4629      	mov	r1, r5
 800409c:	028b      	lsls	r3, r1, #10
 800409e:	4621      	mov	r1, r4
 80040a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040a4:	4621      	mov	r1, r4
 80040a6:	028a      	lsls	r2, r1, #10
 80040a8:	4610      	mov	r0, r2
 80040aa:	4619      	mov	r1, r3
 80040ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040b0:	2200      	movs	r2, #0
 80040b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040b4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80040b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040ba:	f7fc f8a3 	bl	8000204 <__aeabi_uldivmod>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4613      	mov	r3, r2
 80040c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x458>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	0f1b      	lsrs	r3, r3, #28
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80040d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040de:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040e6:	e003      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e8:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x45c>)
 80040ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	37b8      	adds	r7, #184	@ 0xb8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	00f42400 	.word	0x00f42400

08004108 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e28d      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8083 	beq.w	800422e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004128:	4b94      	ldr	r3, [pc, #592]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b04      	cmp	r3, #4
 8004132:	d019      	beq.n	8004168 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004134:	4b91      	ldr	r3, [pc, #580]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800413c:	2b08      	cmp	r3, #8
 800413e:	d106      	bne.n	800414e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004140:	4b8e      	ldr	r3, [pc, #568]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004148:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800414c:	d00c      	beq.n	8004168 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414e:	4b8b      	ldr	r3, [pc, #556]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004156:	2b0c      	cmp	r3, #12
 8004158:	d112      	bne.n	8004180 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800415a:	4b88      	ldr	r3, [pc, #544]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004162:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004166:	d10b      	bne.n	8004180 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004168:	4b84      	ldr	r3, [pc, #528]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d05b      	beq.n	800422c <HAL_RCC_OscConfig+0x124>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d157      	bne.n	800422c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e25a      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004188:	d106      	bne.n	8004198 <HAL_RCC_OscConfig+0x90>
 800418a:	4b7c      	ldr	r3, [pc, #496]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a7b      	ldr	r2, [pc, #492]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e01d      	b.n	80041d4 <HAL_RCC_OscConfig+0xcc>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041a0:	d10c      	bne.n	80041bc <HAL_RCC_OscConfig+0xb4>
 80041a2:	4b76      	ldr	r3, [pc, #472]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a75      	ldr	r2, [pc, #468]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 80041a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	4b73      	ldr	r3, [pc, #460]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a72      	ldr	r2, [pc, #456]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e00b      	b.n	80041d4 <HAL_RCC_OscConfig+0xcc>
 80041bc:	4b6f      	ldr	r3, [pc, #444]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a6e      	ldr	r2, [pc, #440]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 80041c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	4b6c      	ldr	r3, [pc, #432]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a6b      	ldr	r2, [pc, #428]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 80041ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d013      	beq.n	8004204 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd fc28 	bl	8001a30 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e4:	f7fd fc24 	bl	8001a30 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	@ 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e21f      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f6:	4b61      	ldr	r3, [pc, #388]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0xdc>
 8004202:	e014      	b.n	800422e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fd fc14 	bl	8001a30 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800420c:	f7fd fc10 	bl	8001a30 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	@ 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e20b      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421e:	4b57      	ldr	r3, [pc, #348]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x104>
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d06f      	beq.n	800431a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800423a:	4b50      	ldr	r3, [pc, #320]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b00      	cmp	r3, #0
 8004244:	d017      	beq.n	8004276 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004246:	4b4d      	ldr	r3, [pc, #308]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800424e:	2b08      	cmp	r3, #8
 8004250:	d105      	bne.n	800425e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004252:	4b4a      	ldr	r3, [pc, #296]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800425e:	4b47      	ldr	r3, [pc, #284]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004266:	2b0c      	cmp	r3, #12
 8004268:	d11c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800426a:	4b44      	ldr	r3, [pc, #272]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d116      	bne.n	80042a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004276:	4b41      	ldr	r3, [pc, #260]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_RCC_OscConfig+0x186>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d001      	beq.n	800428e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e1d3      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428e:	4b3b      	ldr	r3, [pc, #236]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4937      	ldr	r1, [pc, #220]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a2:	e03a      	b.n	800431a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d020      	beq.n	80042ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042ac:	4b34      	ldr	r3, [pc, #208]	@ (8004380 <HAL_RCC_OscConfig+0x278>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fd fbbd 	bl	8001a30 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ba:	f7fd fbb9 	bl	8001a30 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e1b4      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042cc:	4b2b      	ldr	r3, [pc, #172]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d8:	4b28      	ldr	r3, [pc, #160]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4925      	ldr	r1, [pc, #148]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	600b      	str	r3, [r1, #0]
 80042ec:	e015      	b.n	800431a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ee:	4b24      	ldr	r3, [pc, #144]	@ (8004380 <HAL_RCC_OscConfig+0x278>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fd fb9c 	bl	8001a30 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042fc:	f7fd fb98 	bl	8001a30 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e193      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800430e:	4b1b      	ldr	r3, [pc, #108]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d036      	beq.n	8004394 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d016      	beq.n	800435c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800432e:	4b15      	ldr	r3, [pc, #84]	@ (8004384 <HAL_RCC_OscConfig+0x27c>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fd fb7c 	bl	8001a30 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800433c:	f7fd fb78 	bl	8001a30 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e173      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434e:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <HAL_RCC_OscConfig+0x274>)
 8004350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x234>
 800435a:	e01b      	b.n	8004394 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800435c:	4b09      	ldr	r3, [pc, #36]	@ (8004384 <HAL_RCC_OscConfig+0x27c>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004362:	f7fd fb65 	bl	8001a30 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004368:	e00e      	b.n	8004388 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436a:	f7fd fb61 	bl	8001a30 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d907      	bls.n	8004388 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e15c      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
 800437c:	40023800 	.word	0x40023800
 8004380:	42470000 	.word	0x42470000
 8004384:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004388:	4b8a      	ldr	r3, [pc, #552]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 800438a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1ea      	bne.n	800436a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8097 	beq.w	80044d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a6:	4b83      	ldr	r3, [pc, #524]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	4b7f      	ldr	r3, [pc, #508]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	4a7e      	ldr	r2, [pc, #504]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 80043bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043c2:	4b7c      	ldr	r3, [pc, #496]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ce:	2301      	movs	r3, #1
 80043d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d2:	4b79      	ldr	r3, [pc, #484]	@ (80045b8 <HAL_RCC_OscConfig+0x4b0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d118      	bne.n	8004410 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043de:	4b76      	ldr	r3, [pc, #472]	@ (80045b8 <HAL_RCC_OscConfig+0x4b0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a75      	ldr	r2, [pc, #468]	@ (80045b8 <HAL_RCC_OscConfig+0x4b0>)
 80043e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ea:	f7fd fb21 	bl	8001a30 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f2:	f7fd fb1d 	bl	8001a30 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e118      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004404:	4b6c      	ldr	r3, [pc, #432]	@ (80045b8 <HAL_RCC_OscConfig+0x4b0>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d106      	bne.n	8004426 <HAL_RCC_OscConfig+0x31e>
 8004418:	4b66      	ldr	r3, [pc, #408]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441c:	4a65      	ldr	r2, [pc, #404]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	6713      	str	r3, [r2, #112]	@ 0x70
 8004424:	e01c      	b.n	8004460 <HAL_RCC_OscConfig+0x358>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b05      	cmp	r3, #5
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0x340>
 800442e:	4b61      	ldr	r3, [pc, #388]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004432:	4a60      	ldr	r2, [pc, #384]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 8004434:	f043 0304 	orr.w	r3, r3, #4
 8004438:	6713      	str	r3, [r2, #112]	@ 0x70
 800443a:	4b5e      	ldr	r3, [pc, #376]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443e:	4a5d      	ldr	r2, [pc, #372]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	6713      	str	r3, [r2, #112]	@ 0x70
 8004446:	e00b      	b.n	8004460 <HAL_RCC_OscConfig+0x358>
 8004448:	4b5a      	ldr	r3, [pc, #360]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444c:	4a59      	ldr	r2, [pc, #356]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	6713      	str	r3, [r2, #112]	@ 0x70
 8004454:	4b57      	ldr	r3, [pc, #348]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004458:	4a56      	ldr	r2, [pc, #344]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 800445a:	f023 0304 	bic.w	r3, r3, #4
 800445e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d015      	beq.n	8004494 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004468:	f7fd fae2 	bl	8001a30 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446e:	e00a      	b.n	8004486 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fd fade 	bl	8001a30 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e0d7      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004486:	4b4b      	ldr	r3, [pc, #300]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ee      	beq.n	8004470 <HAL_RCC_OscConfig+0x368>
 8004492:	e014      	b.n	80044be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fd facc 	bl	8001a30 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fd fac8 	bl	8001a30 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e0c1      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b2:	4b40      	ldr	r3, [pc, #256]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1ee      	bne.n	800449c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044be:	7dfb      	ldrb	r3, [r7, #23]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d105      	bne.n	80044d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c4:	4b3b      	ldr	r3, [pc, #236]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	4a3a      	ldr	r2, [pc, #232]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 80044ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80ad 	beq.w	8004634 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044da:	4b36      	ldr	r3, [pc, #216]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d060      	beq.n	80045a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d145      	bne.n	800457a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ee:	4b33      	ldr	r3, [pc, #204]	@ (80045bc <HAL_RCC_OscConfig+0x4b4>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fd fa9c 	bl	8001a30 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fc:	f7fd fa98 	bl	8001a30 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e093      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450e:	4b29      	ldr	r3, [pc, #164]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69da      	ldr	r2, [r3, #28]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	019b      	lsls	r3, r3, #6
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	3b01      	subs	r3, #1
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	061b      	lsls	r3, r3, #24
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004544:	071b      	lsls	r3, r3, #28
 8004546:	491b      	ldr	r1, [pc, #108]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800454c:	4b1b      	ldr	r3, [pc, #108]	@ (80045bc <HAL_RCC_OscConfig+0x4b4>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004552:	f7fd fa6d 	bl	8001a30 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455a:	f7fd fa69 	bl	8001a30 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e064      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456c:	4b11      	ldr	r3, [pc, #68]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f0      	beq.n	800455a <HAL_RCC_OscConfig+0x452>
 8004578:	e05c      	b.n	8004634 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457a:	4b10      	ldr	r3, [pc, #64]	@ (80045bc <HAL_RCC_OscConfig+0x4b4>)
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004580:	f7fd fa56 	bl	8001a30 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004588:	f7fd fa52 	bl	8001a30 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e04d      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459a:	4b06      	ldr	r3, [pc, #24]	@ (80045b4 <HAL_RCC_OscConfig+0x4ac>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f0      	bne.n	8004588 <HAL_RCC_OscConfig+0x480>
 80045a6:	e045      	b.n	8004634 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d107      	bne.n	80045c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e040      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
 80045b4:	40023800 	.word	0x40023800
 80045b8:	40007000 	.word	0x40007000
 80045bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004640 <HAL_RCC_OscConfig+0x538>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d030      	beq.n	8004630 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d129      	bne.n	8004630 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d122      	bne.n	8004630 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045f0:	4013      	ands	r3, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d119      	bne.n	8004630 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004606:	085b      	lsrs	r3, r3, #1
 8004608:	3b01      	subs	r3, #1
 800460a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800460c:	429a      	cmp	r2, r3
 800460e:	d10f      	bne.n	8004630 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800461c:	429a      	cmp	r2, r3
 800461e:	d107      	bne.n	8004630 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40023800 	.word	0x40023800

08004644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e041      	b.n	80046da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fc ff60 	bl	8001530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3304      	adds	r3, #4
 8004680:	4619      	mov	r1, r3
 8004682:	4610      	mov	r0, r2
 8004684:	f000 fb08 	bl	8004c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d001      	beq.n	80046fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e046      	b.n	800478a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a23      	ldr	r2, [pc, #140]	@ (8004798 <HAL_TIM_Base_Start+0xb4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d022      	beq.n	8004754 <HAL_TIM_Base_Start+0x70>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004716:	d01d      	beq.n	8004754 <HAL_TIM_Base_Start+0x70>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1f      	ldr	r2, [pc, #124]	@ (800479c <HAL_TIM_Base_Start+0xb8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d018      	beq.n	8004754 <HAL_TIM_Base_Start+0x70>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1e      	ldr	r2, [pc, #120]	@ (80047a0 <HAL_TIM_Base_Start+0xbc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d013      	beq.n	8004754 <HAL_TIM_Base_Start+0x70>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1c      	ldr	r2, [pc, #112]	@ (80047a4 <HAL_TIM_Base_Start+0xc0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00e      	beq.n	8004754 <HAL_TIM_Base_Start+0x70>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a1b      	ldr	r2, [pc, #108]	@ (80047a8 <HAL_TIM_Base_Start+0xc4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_TIM_Base_Start+0x70>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a19      	ldr	r2, [pc, #100]	@ (80047ac <HAL_TIM_Base_Start+0xc8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_TIM_Base_Start+0x70>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a18      	ldr	r2, [pc, #96]	@ (80047b0 <HAL_TIM_Base_Start+0xcc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d111      	bne.n	8004778 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b06      	cmp	r3, #6
 8004764:	d010      	beq.n	8004788 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004776:	e007      	b.n	8004788 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40010400 	.word	0x40010400
 80047ac:	40014000 	.word	0x40014000
 80047b0:	40001800 	.word	0x40001800

080047b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d001      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e04e      	b.n	800486a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a23      	ldr	r2, [pc, #140]	@ (8004878 <HAL_TIM_Base_Start_IT+0xc4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d022      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f6:	d01d      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1f      	ldr	r2, [pc, #124]	@ (800487c <HAL_TIM_Base_Start_IT+0xc8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d018      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1e      	ldr	r2, [pc, #120]	@ (8004880 <HAL_TIM_Base_Start_IT+0xcc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d013      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1c      	ldr	r2, [pc, #112]	@ (8004884 <HAL_TIM_Base_Start_IT+0xd0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00e      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1b      	ldr	r2, [pc, #108]	@ (8004888 <HAL_TIM_Base_Start_IT+0xd4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d009      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a19      	ldr	r2, [pc, #100]	@ (800488c <HAL_TIM_Base_Start_IT+0xd8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a18      	ldr	r2, [pc, #96]	@ (8004890 <HAL_TIM_Base_Start_IT+0xdc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d111      	bne.n	8004858 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b06      	cmp	r3, #6
 8004844:	d010      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0201 	orr.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004856:	e007      	b.n	8004868 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40010000 	.word	0x40010000
 800487c:	40000400 	.word	0x40000400
 8004880:	40000800 	.word	0x40000800
 8004884:	40000c00 	.word	0x40000c00
 8004888:	40010400 	.word	0x40010400
 800488c:	40014000 	.word	0x40014000
 8004890:	40001800 	.word	0x40001800

08004894 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d122      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d11b      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0202 	mvn.w	r2, #2
 80048c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f9bf 	bl	8004c5a <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f9b1 	bl	8004c46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f9c2 	bl	8004c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d122      	bne.n	8004944 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b04      	cmp	r3, #4
 800490a:	d11b      	bne.n	8004944 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0204 	mvn.w	r2, #4
 8004914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2202      	movs	r2, #2
 800491a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f995 	bl	8004c5a <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f987 	bl	8004c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f998 	bl	8004c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b08      	cmp	r3, #8
 8004950:	d122      	bne.n	8004998 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b08      	cmp	r3, #8
 800495e:	d11b      	bne.n	8004998 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0208 	mvn.w	r2, #8
 8004968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2204      	movs	r2, #4
 800496e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f96b 	bl	8004c5a <HAL_TIM_IC_CaptureCallback>
 8004984:	e005      	b.n	8004992 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f95d 	bl	8004c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f96e 	bl	8004c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b10      	cmp	r3, #16
 80049a4:	d122      	bne.n	80049ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	d11b      	bne.n	80049ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0210 	mvn.w	r2, #16
 80049bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2208      	movs	r2, #8
 80049c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f941 	bl	8004c5a <HAL_TIM_IC_CaptureCallback>
 80049d8:	e005      	b.n	80049e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f933 	bl	8004c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f944 	bl	8004c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d10e      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d107      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0201 	mvn.w	r2, #1
 8004a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f90d 	bl	8004c32 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a22:	2b80      	cmp	r3, #128	@ 0x80
 8004a24:	d10e      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a30:	2b80      	cmp	r3, #128	@ 0x80
 8004a32:	d107      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 faea 	bl	8005018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4e:	2b40      	cmp	r3, #64	@ 0x40
 8004a50:	d10e      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5c:	2b40      	cmp	r3, #64	@ 0x40
 8004a5e:	d107      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f909 	bl	8004c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d10e      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d107      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0220 	mvn.w	r2, #32
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fab4 	bl	8005004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e0b4      	b.n	8004c2a <HAL_TIM_ConfigClockSource+0x186>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004af8:	d03e      	beq.n	8004b78 <HAL_TIM_ConfigClockSource+0xd4>
 8004afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004afe:	f200 8087 	bhi.w	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b06:	f000 8086 	beq.w	8004c16 <HAL_TIM_ConfigClockSource+0x172>
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b0e:	d87f      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b70      	cmp	r3, #112	@ 0x70
 8004b12:	d01a      	beq.n	8004b4a <HAL_TIM_ConfigClockSource+0xa6>
 8004b14:	2b70      	cmp	r3, #112	@ 0x70
 8004b16:	d87b      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b60      	cmp	r3, #96	@ 0x60
 8004b1a:	d050      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x11a>
 8004b1c:	2b60      	cmp	r3, #96	@ 0x60
 8004b1e:	d877      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b50      	cmp	r3, #80	@ 0x50
 8004b22:	d03c      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0xfa>
 8004b24:	2b50      	cmp	r3, #80	@ 0x50
 8004b26:	d873      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b40      	cmp	r3, #64	@ 0x40
 8004b2a:	d058      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x13a>
 8004b2c:	2b40      	cmp	r3, #64	@ 0x40
 8004b2e:	d86f      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b30      	cmp	r3, #48	@ 0x30
 8004b32:	d064      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b34:	2b30      	cmp	r3, #48	@ 0x30
 8004b36:	d86b      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d060      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d867      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d05c      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d05a      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b48:	e062      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6899      	ldr	r1, [r3, #8]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f000 f9b7 	bl	8004ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	609a      	str	r2, [r3, #8]
      break;
 8004b76:	e04f      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	6899      	ldr	r1, [r3, #8]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f000 f9a0 	bl	8004ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b9a:	609a      	str	r2, [r3, #8]
      break;
 8004b9c:	e03c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6859      	ldr	r1, [r3, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	461a      	mov	r2, r3
 8004bac:	f000 f914 	bl	8004dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2150      	movs	r1, #80	@ 0x50
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 f96d 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004bbc:	e02c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6859      	ldr	r1, [r3, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f000 f933 	bl	8004e36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2160      	movs	r1, #96	@ 0x60
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f95d 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004bdc:	e01c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 f8f4 	bl	8004dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2140      	movs	r1, #64	@ 0x40
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f94d 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e00c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f000 f944 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004c0e:	e003      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
      break;
 8004c14:	e000      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a40      	ldr	r2, [pc, #256]	@ (8004dac <TIM_Base_SetConfig+0x114>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d013      	beq.n	8004cd8 <TIM_Base_SetConfig+0x40>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb6:	d00f      	beq.n	8004cd8 <TIM_Base_SetConfig+0x40>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a3d      	ldr	r2, [pc, #244]	@ (8004db0 <TIM_Base_SetConfig+0x118>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00b      	beq.n	8004cd8 <TIM_Base_SetConfig+0x40>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a3c      	ldr	r2, [pc, #240]	@ (8004db4 <TIM_Base_SetConfig+0x11c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d007      	beq.n	8004cd8 <TIM_Base_SetConfig+0x40>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a3b      	ldr	r2, [pc, #236]	@ (8004db8 <TIM_Base_SetConfig+0x120>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_Base_SetConfig+0x40>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a3a      	ldr	r2, [pc, #232]	@ (8004dbc <TIM_Base_SetConfig+0x124>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d108      	bne.n	8004cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a2f      	ldr	r2, [pc, #188]	@ (8004dac <TIM_Base_SetConfig+0x114>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d02b      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf8:	d027      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8004db0 <TIM_Base_SetConfig+0x118>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d023      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a2b      	ldr	r2, [pc, #172]	@ (8004db4 <TIM_Base_SetConfig+0x11c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d01f      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8004db8 <TIM_Base_SetConfig+0x120>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d01b      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a29      	ldr	r2, [pc, #164]	@ (8004dbc <TIM_Base_SetConfig+0x124>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d017      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a28      	ldr	r2, [pc, #160]	@ (8004dc0 <TIM_Base_SetConfig+0x128>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d013      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a27      	ldr	r2, [pc, #156]	@ (8004dc4 <TIM_Base_SetConfig+0x12c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00f      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a26      	ldr	r2, [pc, #152]	@ (8004dc8 <TIM_Base_SetConfig+0x130>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00b      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a25      	ldr	r2, [pc, #148]	@ (8004dcc <TIM_Base_SetConfig+0x134>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d007      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a24      	ldr	r2, [pc, #144]	@ (8004dd0 <TIM_Base_SetConfig+0x138>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d003      	beq.n	8004d4a <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a23      	ldr	r2, [pc, #140]	@ (8004dd4 <TIM_Base_SetConfig+0x13c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d108      	bne.n	8004d5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a0a      	ldr	r2, [pc, #40]	@ (8004dac <TIM_Base_SetConfig+0x114>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_Base_SetConfig+0xf8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8004dbc <TIM_Base_SetConfig+0x124>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d103      	bne.n	8004d98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	615a      	str	r2, [r3, #20]
}
 8004d9e:	bf00      	nop
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40010000 	.word	0x40010000
 8004db0:	40000400 	.word	0x40000400
 8004db4:	40000800 	.word	0x40000800
 8004db8:	40000c00 	.word	0x40000c00
 8004dbc:	40010400 	.word	0x40010400
 8004dc0:	40014000 	.word	0x40014000
 8004dc4:	40014400 	.word	0x40014400
 8004dc8:	40014800 	.word	0x40014800
 8004dcc:	40001800 	.word	0x40001800
 8004dd0:	40001c00 	.word	0x40001c00
 8004dd4:	40002000 	.word	0x40002000

08004dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f023 0201 	bic.w	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f023 030a 	bic.w	r3, r3, #10
 8004e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b087      	sub	sp, #28
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f023 0210 	bic.w	r2, r3, #16
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	031b      	lsls	r3, r3, #12
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f043 0307 	orr.w	r3, r3, #7
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	021a      	lsls	r2, r3, #8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	609a      	str	r2, [r3, #8]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e05a      	b.n	8004fda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a21      	ldr	r2, [pc, #132]	@ (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d022      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f70:	d01d      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a1d      	ldr	r2, [pc, #116]	@ (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d018      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00e      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a18      	ldr	r2, [pc, #96]	@ (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a17      	ldr	r2, [pc, #92]	@ (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d004      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a15      	ldr	r2, [pc, #84]	@ (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d10c      	bne.n	8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40000800 	.word	0x40000800
 8004ff4:	40000c00 	.word	0x40000c00
 8004ff8:	40010400 	.word	0x40010400
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40001800 	.word	0x40001800

08005004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e03f      	b.n	80050be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fc fac8 	bl	80015e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2224      	movs	r2, #36	@ 0x24
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800506e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f829 	bl	80050c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050cc:	b0c0      	sub	sp, #256	@ 0x100
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e4:	68d9      	ldr	r1, [r3, #12]
 80050e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	ea40 0301 	orr.w	r3, r0, r1
 80050f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	431a      	orrs	r2, r3
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	431a      	orrs	r2, r3
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005120:	f021 010c 	bic.w	r1, r1, #12
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800512e:	430b      	orrs	r3, r1
 8005130:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800513e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005142:	6999      	ldr	r1, [r3, #24]
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	ea40 0301 	orr.w	r3, r0, r1
 800514e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	4b8f      	ldr	r3, [pc, #572]	@ (8005394 <UART_SetConfig+0x2cc>)
 8005158:	429a      	cmp	r2, r3
 800515a:	d005      	beq.n	8005168 <UART_SetConfig+0xa0>
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	4b8d      	ldr	r3, [pc, #564]	@ (8005398 <UART_SetConfig+0x2d0>)
 8005164:	429a      	cmp	r2, r3
 8005166:	d104      	bne.n	8005172 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005168:	f7fe fa60 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 800516c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005170:	e003      	b.n	800517a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005172:	f7fe fa47 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8005176:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005184:	f040 810c 	bne.w	80053a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800518c:	2200      	movs	r2, #0
 800518e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005192:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005196:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800519a:	4622      	mov	r2, r4
 800519c:	462b      	mov	r3, r5
 800519e:	1891      	adds	r1, r2, r2
 80051a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80051a2:	415b      	adcs	r3, r3
 80051a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051aa:	4621      	mov	r1, r4
 80051ac:	eb12 0801 	adds.w	r8, r2, r1
 80051b0:	4629      	mov	r1, r5
 80051b2:	eb43 0901 	adc.w	r9, r3, r1
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051ca:	4690      	mov	r8, r2
 80051cc:	4699      	mov	r9, r3
 80051ce:	4623      	mov	r3, r4
 80051d0:	eb18 0303 	adds.w	r3, r8, r3
 80051d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051d8:	462b      	mov	r3, r5
 80051da:	eb49 0303 	adc.w	r3, r9, r3
 80051de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80051f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051f6:	460b      	mov	r3, r1
 80051f8:	18db      	adds	r3, r3, r3
 80051fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80051fc:	4613      	mov	r3, r2
 80051fe:	eb42 0303 	adc.w	r3, r2, r3
 8005202:	657b      	str	r3, [r7, #84]	@ 0x54
 8005204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005208:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800520c:	f7fa fffa 	bl	8000204 <__aeabi_uldivmod>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4b61      	ldr	r3, [pc, #388]	@ (800539c <UART_SetConfig+0x2d4>)
 8005216:	fba3 2302 	umull	r2, r3, r3, r2
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	011c      	lsls	r4, r3, #4
 800521e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005222:	2200      	movs	r2, #0
 8005224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005228:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800522c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005230:	4642      	mov	r2, r8
 8005232:	464b      	mov	r3, r9
 8005234:	1891      	adds	r1, r2, r2
 8005236:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005238:	415b      	adcs	r3, r3
 800523a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800523c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005240:	4641      	mov	r1, r8
 8005242:	eb12 0a01 	adds.w	sl, r2, r1
 8005246:	4649      	mov	r1, r9
 8005248:	eb43 0b01 	adc.w	fp, r3, r1
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005258:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800525c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005260:	4692      	mov	sl, r2
 8005262:	469b      	mov	fp, r3
 8005264:	4643      	mov	r3, r8
 8005266:	eb1a 0303 	adds.w	r3, sl, r3
 800526a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800526e:	464b      	mov	r3, r9
 8005270:	eb4b 0303 	adc.w	r3, fp, r3
 8005274:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005284:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005288:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800528c:	460b      	mov	r3, r1
 800528e:	18db      	adds	r3, r3, r3
 8005290:	643b      	str	r3, [r7, #64]	@ 0x40
 8005292:	4613      	mov	r3, r2
 8005294:	eb42 0303 	adc.w	r3, r2, r3
 8005298:	647b      	str	r3, [r7, #68]	@ 0x44
 800529a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800529e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80052a2:	f7fa ffaf 	bl	8000204 <__aeabi_uldivmod>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4611      	mov	r1, r2
 80052ac:	4b3b      	ldr	r3, [pc, #236]	@ (800539c <UART_SetConfig+0x2d4>)
 80052ae:	fba3 2301 	umull	r2, r3, r3, r1
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	2264      	movs	r2, #100	@ 0x64
 80052b6:	fb02 f303 	mul.w	r3, r2, r3
 80052ba:	1acb      	subs	r3, r1, r3
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80052c2:	4b36      	ldr	r3, [pc, #216]	@ (800539c <UART_SetConfig+0x2d4>)
 80052c4:	fba3 2302 	umull	r2, r3, r3, r2
 80052c8:	095b      	lsrs	r3, r3, #5
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052d0:	441c      	add	r4, r3
 80052d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80052e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80052e4:	4642      	mov	r2, r8
 80052e6:	464b      	mov	r3, r9
 80052e8:	1891      	adds	r1, r2, r2
 80052ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052ec:	415b      	adcs	r3, r3
 80052ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80052f4:	4641      	mov	r1, r8
 80052f6:	1851      	adds	r1, r2, r1
 80052f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80052fa:	4649      	mov	r1, r9
 80052fc:	414b      	adcs	r3, r1
 80052fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800530c:	4659      	mov	r1, fp
 800530e:	00cb      	lsls	r3, r1, #3
 8005310:	4651      	mov	r1, sl
 8005312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005316:	4651      	mov	r1, sl
 8005318:	00ca      	lsls	r2, r1, #3
 800531a:	4610      	mov	r0, r2
 800531c:	4619      	mov	r1, r3
 800531e:	4603      	mov	r3, r0
 8005320:	4642      	mov	r2, r8
 8005322:	189b      	adds	r3, r3, r2
 8005324:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005328:	464b      	mov	r3, r9
 800532a:	460a      	mov	r2, r1
 800532c:	eb42 0303 	adc.w	r3, r2, r3
 8005330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005340:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005344:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005348:	460b      	mov	r3, r1
 800534a:	18db      	adds	r3, r3, r3
 800534c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800534e:	4613      	mov	r3, r2
 8005350:	eb42 0303 	adc.w	r3, r2, r3
 8005354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005356:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800535a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800535e:	f7fa ff51 	bl	8000204 <__aeabi_uldivmod>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4b0d      	ldr	r3, [pc, #52]	@ (800539c <UART_SetConfig+0x2d4>)
 8005368:	fba3 1302 	umull	r1, r3, r3, r2
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	2164      	movs	r1, #100	@ 0x64
 8005370:	fb01 f303 	mul.w	r3, r1, r3
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	3332      	adds	r3, #50	@ 0x32
 800537a:	4a08      	ldr	r2, [pc, #32]	@ (800539c <UART_SetConfig+0x2d4>)
 800537c:	fba2 2303 	umull	r2, r3, r2, r3
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	f003 0207 	and.w	r2, r3, #7
 8005386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4422      	add	r2, r4
 800538e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005390:	e106      	b.n	80055a0 <UART_SetConfig+0x4d8>
 8005392:	bf00      	nop
 8005394:	40011000 	.word	0x40011000
 8005398:	40011400 	.word	0x40011400
 800539c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80053ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80053b2:	4642      	mov	r2, r8
 80053b4:	464b      	mov	r3, r9
 80053b6:	1891      	adds	r1, r2, r2
 80053b8:	6239      	str	r1, [r7, #32]
 80053ba:	415b      	adcs	r3, r3
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80053be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053c2:	4641      	mov	r1, r8
 80053c4:	1854      	adds	r4, r2, r1
 80053c6:	4649      	mov	r1, r9
 80053c8:	eb43 0501 	adc.w	r5, r3, r1
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	00eb      	lsls	r3, r5, #3
 80053d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053da:	00e2      	lsls	r2, r4, #3
 80053dc:	4614      	mov	r4, r2
 80053de:	461d      	mov	r5, r3
 80053e0:	4643      	mov	r3, r8
 80053e2:	18e3      	adds	r3, r4, r3
 80053e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053e8:	464b      	mov	r3, r9
 80053ea:	eb45 0303 	adc.w	r3, r5, r3
 80053ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800540e:	4629      	mov	r1, r5
 8005410:	008b      	lsls	r3, r1, #2
 8005412:	4621      	mov	r1, r4
 8005414:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005418:	4621      	mov	r1, r4
 800541a:	008a      	lsls	r2, r1, #2
 800541c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005420:	f7fa fef0 	bl	8000204 <__aeabi_uldivmod>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4b60      	ldr	r3, [pc, #384]	@ (80055ac <UART_SetConfig+0x4e4>)
 800542a:	fba3 2302 	umull	r2, r3, r3, r2
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	011c      	lsls	r4, r3, #4
 8005432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005436:	2200      	movs	r2, #0
 8005438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800543c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005440:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005444:	4642      	mov	r2, r8
 8005446:	464b      	mov	r3, r9
 8005448:	1891      	adds	r1, r2, r2
 800544a:	61b9      	str	r1, [r7, #24]
 800544c:	415b      	adcs	r3, r3
 800544e:	61fb      	str	r3, [r7, #28]
 8005450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005454:	4641      	mov	r1, r8
 8005456:	1851      	adds	r1, r2, r1
 8005458:	6139      	str	r1, [r7, #16]
 800545a:	4649      	mov	r1, r9
 800545c:	414b      	adcs	r3, r1
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800546c:	4659      	mov	r1, fp
 800546e:	00cb      	lsls	r3, r1, #3
 8005470:	4651      	mov	r1, sl
 8005472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005476:	4651      	mov	r1, sl
 8005478:	00ca      	lsls	r2, r1, #3
 800547a:	4610      	mov	r0, r2
 800547c:	4619      	mov	r1, r3
 800547e:	4603      	mov	r3, r0
 8005480:	4642      	mov	r2, r8
 8005482:	189b      	adds	r3, r3, r2
 8005484:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005488:	464b      	mov	r3, r9
 800548a:	460a      	mov	r2, r1
 800548c:	eb42 0303 	adc.w	r3, r2, r3
 8005490:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800549e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80054ac:	4649      	mov	r1, r9
 80054ae:	008b      	lsls	r3, r1, #2
 80054b0:	4641      	mov	r1, r8
 80054b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054b6:	4641      	mov	r1, r8
 80054b8:	008a      	lsls	r2, r1, #2
 80054ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80054be:	f7fa fea1 	bl	8000204 <__aeabi_uldivmod>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4611      	mov	r1, r2
 80054c8:	4b38      	ldr	r3, [pc, #224]	@ (80055ac <UART_SetConfig+0x4e4>)
 80054ca:	fba3 2301 	umull	r2, r3, r3, r1
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	2264      	movs	r2, #100	@ 0x64
 80054d2:	fb02 f303 	mul.w	r3, r2, r3
 80054d6:	1acb      	subs	r3, r1, r3
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	3332      	adds	r3, #50	@ 0x32
 80054dc:	4a33      	ldr	r2, [pc, #204]	@ (80055ac <UART_SetConfig+0x4e4>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054e8:	441c      	add	r4, r3
 80054ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ee:	2200      	movs	r2, #0
 80054f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80054f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80054f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80054f8:	4642      	mov	r2, r8
 80054fa:	464b      	mov	r3, r9
 80054fc:	1891      	adds	r1, r2, r2
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	415b      	adcs	r3, r3
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005508:	4641      	mov	r1, r8
 800550a:	1851      	adds	r1, r2, r1
 800550c:	6039      	str	r1, [r7, #0]
 800550e:	4649      	mov	r1, r9
 8005510:	414b      	adcs	r3, r1
 8005512:	607b      	str	r3, [r7, #4]
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005520:	4659      	mov	r1, fp
 8005522:	00cb      	lsls	r3, r1, #3
 8005524:	4651      	mov	r1, sl
 8005526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800552a:	4651      	mov	r1, sl
 800552c:	00ca      	lsls	r2, r1, #3
 800552e:	4610      	mov	r0, r2
 8005530:	4619      	mov	r1, r3
 8005532:	4603      	mov	r3, r0
 8005534:	4642      	mov	r2, r8
 8005536:	189b      	adds	r3, r3, r2
 8005538:	66bb      	str	r3, [r7, #104]	@ 0x68
 800553a:	464b      	mov	r3, r9
 800553c:	460a      	mov	r2, r1
 800553e:	eb42 0303 	adc.w	r3, r2, r3
 8005542:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	663b      	str	r3, [r7, #96]	@ 0x60
 800554e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800555c:	4649      	mov	r1, r9
 800555e:	008b      	lsls	r3, r1, #2
 8005560:	4641      	mov	r1, r8
 8005562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005566:	4641      	mov	r1, r8
 8005568:	008a      	lsls	r2, r1, #2
 800556a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800556e:	f7fa fe49 	bl	8000204 <__aeabi_uldivmod>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4b0d      	ldr	r3, [pc, #52]	@ (80055ac <UART_SetConfig+0x4e4>)
 8005578:	fba3 1302 	umull	r1, r3, r3, r2
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	2164      	movs	r1, #100	@ 0x64
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	3332      	adds	r3, #50	@ 0x32
 800558a:	4a08      	ldr	r2, [pc, #32]	@ (80055ac <UART_SetConfig+0x4e4>)
 800558c:	fba2 2303 	umull	r2, r3, r2, r3
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	f003 020f 	and.w	r2, r3, #15
 8005596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4422      	add	r2, r4
 800559e:	609a      	str	r2, [r3, #8]
}
 80055a0:	bf00      	nop
 80055a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80055a6:	46bd      	mov	sp, r7
 80055a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ac:	51eb851f 	.word	0x51eb851f

080055b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055b0:	b084      	sub	sp, #16
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	f107 001c 	add.w	r0, r7, #28
 80055be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d122      	bne.n	800560e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80055dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d105      	bne.n	8005602 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa9c 	bl	8005b40 <USB_CoreReset>
 8005608:	4603      	mov	r3, r0
 800560a:	73fb      	strb	r3, [r7, #15]
 800560c:	e01a      	b.n	8005644 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fa90 	bl	8005b40 <USB_CoreReset>
 8005620:	4603      	mov	r3, r0
 8005622:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	639a      	str	r2, [r3, #56]	@ 0x38
 8005636:	e005      	b.n	8005644 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	2b01      	cmp	r3, #1
 8005648:	d10b      	bne.n	8005662 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f043 0206 	orr.w	r2, r3, #6
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f043 0220 	orr.w	r2, r3, #32
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005662:	7bfb      	ldrb	r3, [r7, #15]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800566e:	b004      	add	sp, #16
 8005670:	4770      	bx	lr

08005672 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f023 0201 	bic.w	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d115      	bne.n	80056e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056c2:	2001      	movs	r0, #1
 80056c4:	f7fc f9c0 	bl	8001a48 <HAL_Delay>
      ms++;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3301      	adds	r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fa28 	bl	8005b24 <USB_GetMode>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d01e      	beq.n	8005718 <USB_SetCurrentMode+0x84>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b31      	cmp	r3, #49	@ 0x31
 80056de:	d9f0      	bls.n	80056c2 <USB_SetCurrentMode+0x2e>
 80056e0:	e01a      	b.n	8005718 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056e2:	78fb      	ldrb	r3, [r7, #3]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d115      	bne.n	8005714 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056f4:	2001      	movs	r0, #1
 80056f6:	f7fc f9a7 	bl	8001a48 <HAL_Delay>
      ms++;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3301      	adds	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fa0f 	bl	8005b24 <USB_GetMode>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <USB_SetCurrentMode+0x84>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b31      	cmp	r3, #49	@ 0x31
 8005710:	d9f0      	bls.n	80056f4 <USB_SetCurrentMode+0x60>
 8005712:	e001      	b.n	8005718 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e005      	b.n	8005724 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b32      	cmp	r3, #50	@ 0x32
 800571c:	d101      	bne.n	8005722 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800572c:	b084      	sub	sp, #16
 800572e:	b580      	push	{r7, lr}
 8005730:	b086      	sub	sp, #24
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800573a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005746:	2300      	movs	r3, #0
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	e009      	b.n	8005760 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	3340      	adds	r3, #64	@ 0x40
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	2200      	movs	r2, #0
 8005758:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	3301      	adds	r3, #1
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b0e      	cmp	r3, #14
 8005764:	d9f2      	bls.n	800574c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d11c      	bne.n	80057a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800577a:	f043 0302 	orr.w	r3, r3, #2
 800577e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005784:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	e005      	b.n	80057b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057b8:	461a      	mov	r2, r3
 80057ba:	2300      	movs	r3, #0
 80057bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c4:	4619      	mov	r1, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057cc:	461a      	mov	r2, r3
 80057ce:	680b      	ldr	r3, [r1, #0]
 80057d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d10c      	bne.n	80057f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d104      	bne.n	80057e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057de:	2100      	movs	r1, #0
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f965 	bl	8005ab0 <USB_SetDevSpeed>
 80057e6:	e008      	b.n	80057fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057e8:	2101      	movs	r1, #1
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f960 	bl	8005ab0 <USB_SetDevSpeed>
 80057f0:	e003      	b.n	80057fa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057f2:	2103      	movs	r1, #3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f95b 	bl	8005ab0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057fa:	2110      	movs	r1, #16
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f8f3 	bl	80059e8 <USB_FlushTxFifo>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f91f 	bl	8005a50 <USB_FlushRxFifo>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005822:	461a      	mov	r2, r3
 8005824:	2300      	movs	r3, #0
 8005826:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582e:	461a      	mov	r2, r3
 8005830:	2300      	movs	r3, #0
 8005832:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583a:	461a      	mov	r2, r3
 800583c:	2300      	movs	r3, #0
 800583e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	e043      	b.n	80058ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800585c:	d118      	bne.n	8005890 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005870:	461a      	mov	r2, r3
 8005872:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	e013      	b.n	80058a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005886:	461a      	mov	r2, r3
 8005888:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	e008      	b.n	80058a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589c:	461a      	mov	r2, r3
 800589e:	2300      	movs	r3, #0
 80058a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ae:	461a      	mov	r2, r3
 80058b0:	2300      	movs	r3, #0
 80058b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c0:	461a      	mov	r2, r3
 80058c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	3301      	adds	r3, #1
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d3b7      	bcc.n	8005846 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058d6:	2300      	movs	r3, #0
 80058d8:	613b      	str	r3, [r7, #16]
 80058da:	e043      	b.n	8005964 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058f2:	d118      	bne.n	8005926 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005906:	461a      	mov	r2, r3
 8005908:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e013      	b.n	8005938 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591c:	461a      	mov	r2, r3
 800591e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	e008      	b.n	8005938 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005932:	461a      	mov	r2, r3
 8005934:	2300      	movs	r3, #0
 8005936:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005944:	461a      	mov	r2, r3
 8005946:	2300      	movs	r3, #0
 8005948:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005956:	461a      	mov	r2, r3
 8005958:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800595c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	3301      	adds	r3, #1
 8005962:	613b      	str	r3, [r7, #16]
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	429a      	cmp	r2, r3
 800596a:	d3b7      	bcc.n	80058dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800597a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800597e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800598c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	2b00      	cmp	r3, #0
 8005992:	d105      	bne.n	80059a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	f043 0210 	orr.w	r2, r3, #16
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699a      	ldr	r2, [r3, #24]
 80059a4:	4b0f      	ldr	r3, [pc, #60]	@ (80059e4 <USB_DevInit+0x2b8>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f043 0208 	orr.w	r2, r3, #8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d107      	bne.n	80059d4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059cc:	f043 0304 	orr.w	r3, r3, #4
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059e0:	b004      	add	sp, #16
 80059e2:	4770      	bx	lr
 80059e4:	803c3800 	.word	0x803c3800

080059e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3301      	adds	r3, #1
 80059fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4a13      	ldr	r2, [pc, #76]	@ (8005a4c <USB_FlushTxFifo+0x64>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d901      	bls.n	8005a08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e01b      	b.n	8005a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	daf2      	bge.n	80059f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	019b      	lsls	r3, r3, #6
 8005a18:	f043 0220 	orr.w	r2, r3, #32
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3301      	adds	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4a08      	ldr	r2, [pc, #32]	@ (8005a4c <USB_FlushTxFifo+0x64>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d901      	bls.n	8005a32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e006      	b.n	8005a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d0f0      	beq.n	8005a20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	00030d40 	.word	0x00030d40

08005a50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4a11      	ldr	r2, [pc, #68]	@ (8005aac <USB_FlushRxFifo+0x5c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d901      	bls.n	8005a6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e018      	b.n	8005aa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	daf2      	bge.n	8005a5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2210      	movs	r2, #16
 8005a7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3301      	adds	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4a08      	ldr	r2, [pc, #32]	@ (8005aac <USB_FlushRxFifo+0x5c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d901      	bls.n	8005a92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e006      	b.n	8005aa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d0f0      	beq.n	8005a80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	00030d40 	.word	0x00030d40

08005ab0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	68f9      	ldr	r1, [r7, #12]
 8005acc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005afc:	f023 0303 	bic.w	r3, r3, #3
 8005b00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b10:	f043 0302 	orr.w	r3, r3, #2
 8005b14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	f003 0301 	and.w	r3, r3, #1
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a13      	ldr	r2, [pc, #76]	@ (8005ba4 <USB_CoreReset+0x64>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d901      	bls.n	8005b5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e01b      	b.n	8005b96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	daf2      	bge.n	8005b4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f043 0201 	orr.w	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4a09      	ldr	r2, [pc, #36]	@ (8005ba4 <USB_CoreReset+0x64>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d901      	bls.n	8005b88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e006      	b.n	8005b96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d0f0      	beq.n	8005b76 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	00030d40 	.word	0x00030d40

08005ba8 <arm_fir_init_f32>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	9c04      	ldr	r4, [sp, #16]
 8005bac:	6082      	str	r2, [r0, #8]
 8005bae:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8005bb2:	3c01      	subs	r4, #1
 8005bb4:	440c      	add	r4, r1
 8005bb6:	8001      	strh	r1, [r0, #0]
 8005bb8:	4605      	mov	r5, r0
 8005bba:	00a2      	lsls	r2, r4, #2
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	f000 f90c 	bl	8005ddc <memset>
 8005bc4:	6068      	str	r0, [r5, #4]
 8005bc6:	bd38      	pop	{r3, r4, r5, pc}

08005bc8 <arm_biquad_cascade_df1_init_f32>:
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	6082      	str	r2, [r0, #8]
 8005bcc:	6001      	str	r1, [r0, #0]
 8005bce:	4604      	mov	r4, r0
 8005bd0:	010a      	lsls	r2, r1, #4
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	f000 f901 	bl	8005ddc <memset>
 8005bda:	6060      	str	r0, [r4, #4]
 8005bdc:	bd10      	pop	{r4, pc}
 8005bde:	bf00      	nop

08005be0 <arm_biquad_cascade_df1_f32>:
 8005be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be4:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 8005be8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005bec:	f003 0e03 	and.w	lr, r3, #3
 8005bf0:	ea4f 190c 	mov.w	r9, ip, lsl #4
 8005bf4:	6807      	ldr	r7, [r0, #0]
 8005bf6:	eb02 0a09 	add.w	sl, r2, r9
 8005bfa:	f10e 38ff 	add.w	r8, lr, #4294967295
 8005bfe:	3614      	adds	r6, #20
 8005c00:	3510      	adds	r5, #16
 8005c02:	ed16 4a05 	vldr	s8, [r6, #-20]	@ 0xffffffec
 8005c06:	ed16 2a04 	vldr	s4, [r6, #-16]
 8005c0a:	ed56 2a03 	vldr	s5, [r6, #-12]
 8005c0e:	ed16 3a02 	vldr	s6, [r6, #-8]
 8005c12:	ed56 3a01 	vldr	s7, [r6, #-4]
 8005c16:	ed55 5a04 	vldr	s11, [r5, #-16]
 8005c1a:	ed15 5a03 	vldr	s10, [r5, #-12]
 8005c1e:	ed15 7a02 	vldr	s14, [r5, #-8]
 8005c22:	ed55 7a01 	vldr	s15, [r5, #-4]
 8005c26:	f1bc 0f00 	cmp.w	ip, #0
 8005c2a:	f000 80d4 	beq.w	8005dd6 <arm_biquad_cascade_df1_f32+0x1f6>
 8005c2e:	f101 0010 	add.w	r0, r1, #16
 8005c32:	f102 0310 	add.w	r3, r2, #16
 8005c36:	4664      	mov	r4, ip
 8005c38:	ed10 6a04 	vldr	s12, [r0, #-16]
 8005c3c:	ee62 4a25 	vmul.f32	s9, s4, s11
 8005c40:	ee64 6a06 	vmul.f32	s13, s8, s12
 8005c44:	ee22 5a85 	vmul.f32	s10, s5, s10
 8005c48:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005c4c:	ee63 4a07 	vmul.f32	s9, s6, s14
 8005c50:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005c54:	ee23 5aa7 	vmul.f32	s10, s7, s15
 8005c58:	ee76 7aa4 	vadd.f32	s15, s13, s9
 8005c5c:	ee22 1a06 	vmul.f32	s2, s4, s12
 8005c60:	ee77 7a85 	vadd.f32	s15, s15, s10
 8005c64:	ee62 1aa5 	vmul.f32	s3, s5, s11
 8005c68:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005c6c:	ed50 4a03 	vldr	s9, [r0, #-12]
 8005c70:	ee64 6a24 	vmul.f32	s13, s8, s9
 8005c74:	ee23 5a27 	vmul.f32	s10, s6, s15
 8005c78:	ee76 6a81 	vadd.f32	s13, s13, s2
 8005c7c:	ee63 5a87 	vmul.f32	s11, s7, s14
 8005c80:	ee36 7aa1 	vadd.f32	s14, s13, s3
 8005c84:	ee62 1a24 	vmul.f32	s3, s4, s9
 8005c88:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005c8c:	ee22 6a86 	vmul.f32	s12, s5, s12
 8005c90:	ee37 7a25 	vadd.f32	s14, s14, s11
 8005c94:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8005c98:	ed03 7a03 	vstr	s14, [r3, #-12]
 8005c9c:	ed10 5a02 	vldr	s10, [r0, #-8]
 8005ca0:	ee64 5a05 	vmul.f32	s11, s8, s10
 8005ca4:	ee63 6a07 	vmul.f32	s13, s6, s14
 8005ca8:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8005cac:	ee62 1a05 	vmul.f32	s3, s4, s10
 8005cb0:	ee75 5a86 	vadd.f32	s11, s11, s12
 8005cb4:	ee62 4aa4 	vmul.f32	s9, s5, s9
 8005cb8:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8005cbc:	ee23 7a87 	vmul.f32	s14, s7, s14
 8005cc0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8005cc4:	3c01      	subs	r4, #1
 8005cc6:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005cca:	ed50 5a01 	vldr	s11, [r0, #-4]
 8005cce:	ee24 6a25 	vmul.f32	s12, s8, s11
 8005cd2:	ee63 6a27 	vmul.f32	s13, s6, s15
 8005cd6:	ee36 6a21 	vadd.f32	s12, s12, s3
 8005cda:	f100 0010 	add.w	r0, r0, #16
 8005cde:	ee36 6a24 	vadd.f32	s12, s12, s9
 8005ce2:	f103 0310 	add.w	r3, r3, #16
 8005ce6:	ee36 6a26 	vadd.f32	s12, s12, s13
 8005cea:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005cee:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 8005cf2:	d1a1      	bne.n	8005c38 <arm_biquad_cascade_df1_f32+0x58>
 8005cf4:	4449      	add	r1, r9
 8005cf6:	4653      	mov	r3, sl
 8005cf8:	f1be 0f00 	cmp.w	lr, #0
 8005cfc:	d047      	beq.n	8005d8e <arm_biquad_cascade_df1_f32+0x1ae>
 8005cfe:	edd1 4a00 	vldr	s9, [r1]
 8005d02:	ee22 6a25 	vmul.f32	s12, s4, s11
 8005d06:	ee64 1a24 	vmul.f32	s3, s8, s9
 8005d0a:	ee62 6a85 	vmul.f32	s13, s5, s10
 8005d0e:	ee36 5a21 	vadd.f32	s10, s12, s3
 8005d12:	ee23 6a07 	vmul.f32	s12, s6, s14
 8005d16:	ee35 5a26 	vadd.f32	s10, s10, s13
 8005d1a:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8005d1e:	ee35 6a06 	vadd.f32	s12, s10, s12
 8005d22:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d26:	ed83 6a00 	vstr	s12, [r3]
 8005d2a:	f1b8 0f00 	cmp.w	r8, #0
 8005d2e:	d040      	beq.n	8005db2 <arm_biquad_cascade_df1_f32+0x1d2>
 8005d30:	ed91 5a01 	vldr	s10, [r1, #4]
 8005d34:	ee62 7a24 	vmul.f32	s15, s4, s9
 8005d38:	ee65 1a04 	vmul.f32	s3, s10, s8
 8005d3c:	ee62 6aa5 	vmul.f32	s13, s5, s11
 8005d40:	ee77 5aa1 	vadd.f32	s11, s15, s3
 8005d44:	ee63 7a06 	vmul.f32	s15, s6, s12
 8005d48:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8005d4c:	ee23 7a87 	vmul.f32	s14, s7, s14
 8005d50:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8005d54:	f1b8 0f01 	cmp.w	r8, #1
 8005d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d5c:	edc3 7a01 	vstr	s15, [r3, #4]
 8005d60:	d030      	beq.n	8005dc4 <arm_biquad_cascade_df1_f32+0x1e4>
 8005d62:	edd1 5a02 	vldr	s11, [r1, #8]
 8005d66:	ee25 2a02 	vmul.f32	s4, s10, s4
 8005d6a:	ee64 6a25 	vmul.f32	s13, s8, s11
 8005d6e:	ee62 2aa4 	vmul.f32	s5, s5, s9
 8005d72:	ee76 6a82 	vadd.f32	s13, s13, s4
 8005d76:	ee27 3a83 	vmul.f32	s6, s15, s6
 8005d7a:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8005d7e:	ee63 3a86 	vmul.f32	s7, s7, s12
 8005d82:	ee76 6a83 	vadd.f32	s13, s13, s6
 8005d86:	ee36 7aa3 	vadd.f32	s14, s13, s7
 8005d8a:	ed83 7a02 	vstr	s14, [r3, #8]
 8005d8e:	3f01      	subs	r7, #1
 8005d90:	ed45 5a04 	vstr	s11, [r5, #-16]
 8005d94:	ed05 5a03 	vstr	s10, [r5, #-12]
 8005d98:	ed05 7a02 	vstr	s14, [r5, #-8]
 8005d9c:	ed45 7a01 	vstr	s15, [r5, #-4]
 8005da0:	f106 0614 	add.w	r6, r6, #20
 8005da4:	f105 0510 	add.w	r5, r5, #16
 8005da8:	4611      	mov	r1, r2
 8005daa:	f47f af2a 	bne.w	8005c02 <arm_biquad_cascade_df1_f32+0x22>
 8005dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db2:	eef0 7a47 	vmov.f32	s15, s14
 8005db6:	eeb0 5a65 	vmov.f32	s10, s11
 8005dba:	eeb0 7a46 	vmov.f32	s14, s12
 8005dbe:	eef0 5a64 	vmov.f32	s11, s9
 8005dc2:	e7e4      	b.n	8005d8e <arm_biquad_cascade_df1_f32+0x1ae>
 8005dc4:	eeb0 7a67 	vmov.f32	s14, s15
 8005dc8:	eef0 5a45 	vmov.f32	s11, s10
 8005dcc:	eef0 7a46 	vmov.f32	s15, s12
 8005dd0:	eeb0 5a64 	vmov.f32	s10, s9
 8005dd4:	e7db      	b.n	8005d8e <arm_biquad_cascade_df1_f32+0x1ae>
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	e78e      	b.n	8005cf8 <arm_biquad_cascade_df1_f32+0x118>
 8005dda:	bf00      	nop

08005ddc <memset>:
 8005ddc:	4402      	add	r2, r0
 8005dde:	4603      	mov	r3, r0
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d100      	bne.n	8005de6 <memset+0xa>
 8005de4:	4770      	bx	lr
 8005de6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dea:	e7f9      	b.n	8005de0 <memset+0x4>

08005dec <__libc_init_array>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4d0d      	ldr	r5, [pc, #52]	@ (8005e24 <__libc_init_array+0x38>)
 8005df0:	4c0d      	ldr	r4, [pc, #52]	@ (8005e28 <__libc_init_array+0x3c>)
 8005df2:	1b64      	subs	r4, r4, r5
 8005df4:	10a4      	asrs	r4, r4, #2
 8005df6:	2600      	movs	r6, #0
 8005df8:	42a6      	cmp	r6, r4
 8005dfa:	d109      	bne.n	8005e10 <__libc_init_array+0x24>
 8005dfc:	4d0b      	ldr	r5, [pc, #44]	@ (8005e2c <__libc_init_array+0x40>)
 8005dfe:	4c0c      	ldr	r4, [pc, #48]	@ (8005e30 <__libc_init_array+0x44>)
 8005e00:	f000 f818 	bl	8005e34 <_init>
 8005e04:	1b64      	subs	r4, r4, r5
 8005e06:	10a4      	asrs	r4, r4, #2
 8005e08:	2600      	movs	r6, #0
 8005e0a:	42a6      	cmp	r6, r4
 8005e0c:	d105      	bne.n	8005e1a <__libc_init_array+0x2e>
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e14:	4798      	blx	r3
 8005e16:	3601      	adds	r6, #1
 8005e18:	e7ee      	b.n	8005df8 <__libc_init_array+0xc>
 8005e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1e:	4798      	blx	r3
 8005e20:	3601      	adds	r6, #1
 8005e22:	e7f2      	b.n	8005e0a <__libc_init_array+0x1e>
 8005e24:	08006dc8 	.word	0x08006dc8
 8005e28:	08006dc8 	.word	0x08006dc8
 8005e2c:	08006dc8 	.word	0x08006dc8
 8005e30:	08006dcc 	.word	0x08006dcc

08005e34 <_init>:
 8005e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e36:	bf00      	nop
 8005e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3a:	bc08      	pop	{r3}
 8005e3c:	469e      	mov	lr, r3
 8005e3e:	4770      	bx	lr

08005e40 <_fini>:
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	bf00      	nop
 8005e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e46:	bc08      	pop	{r3}
 8005e48:	469e      	mov	lr, r3
 8005e4a:	4770      	bx	lr
